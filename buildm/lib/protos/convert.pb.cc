// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: convert.proto

#include "convert.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_convert_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigConvertProtocol_ConvertProtocol_convert_2eproto;
class ConvertProtocolConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConvertProtocolConfigResponse> _instance;
} _ConvertProtocolConfigResponse_default_instance_;
class ConfigConvertProtocol_ConvertProtocolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigConvertProtocol_ConvertProtocol> _instance;
} _ConfigConvertProtocol_ConvertProtocol_default_instance_;
class ConfigConvertProtocolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigConvertProtocol> _instance;
} _ConfigConvertProtocol_default_instance_;
static void InitDefaultsscc_info_ConfigConvertProtocol_convert_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfigConvertProtocol_default_instance_;
    new (ptr) ::ConfigConvertProtocol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfigConvertProtocol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfigConvertProtocol_convert_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConfigConvertProtocol_convert_2eproto}, {
      &scc_info_ConfigConvertProtocol_ConvertProtocol_convert_2eproto.base,}};

static void InitDefaultsscc_info_ConfigConvertProtocol_ConvertProtocol_convert_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfigConvertProtocol_ConvertProtocol_default_instance_;
    new (ptr) ::ConfigConvertProtocol_ConvertProtocol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfigConvertProtocol_ConvertProtocol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigConvertProtocol_ConvertProtocol_convert_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigConvertProtocol_ConvertProtocol_convert_2eproto}, {}};

static void InitDefaultsscc_info_ConvertProtocolConfigResponse_convert_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConvertProtocolConfigResponse_default_instance_;
    new (ptr) ::ConvertProtocolConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConvertProtocolConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvertProtocolConfigResponse_convert_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConvertProtocolConfigResponse_convert_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_convert_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_convert_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_convert_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_convert_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConvertProtocolConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConvertProtocolConfigResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ConvertProtocolConfigResponse, errorcode_),
  PROTOBUF_FIELD_OFFSET(::ConvertProtocolConfigResponse, errordesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigConvertProtocol_ConvertProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConfigConvertProtocol_ConvertProtocol, tagnamesource_),
  PROTOBUF_FIELD_OFFSET(::ConfigConvertProtocol_ConvertProtocol, tagnamedist_),
  PROTOBUF_FIELD_OFFSET(::ConfigConvertProtocol_ConvertProtocol, timer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigConvertProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConfigConvertProtocol, convertprotocol_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ConvertProtocolConfigResponse)},
  { 8, -1, sizeof(::ConfigConvertProtocol_ConvertProtocol)},
  { 16, -1, sizeof(::ConfigConvertProtocol)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConvertProtocolConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigConvertProtocol_ConvertProtocol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigConvertProtocol_default_instance_),
};

const char descriptor_table_protodef_convert_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rconvert.proto\"V\n\035ConvertProtocolConfig"
  "Response\022\017\n\007Success\030\001 \001(\010\022\021\n\terrorCode\030\002"
  " \001(\005\022\021\n\terrorDesc\030\003 \001(\t\"\246\001\n\025ConfigConver"
  "tProtocol\022\?\n\017convertProtocol\030\001 \003(\0132&.Con"
  "figConvertProtocol.ConvertProtocol\032L\n\017Co"
  "nvertProtocol\022\025\n\rtagNameSource\030\001 \001(\t\022\023\n\013"
  "tagNameDist\030\002 \001(\t\022\r\n\005timer\030\003 \001(\0052x\n\033Syst"
  "emConvertProtocolConfig\022Y\n\037SendSystemCon"
  "vertProtocolConfig\022\026.ConfigConvertProtoc"
  "ol\032\036.ConvertProtocolConfigResponseb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_convert_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_convert_2eproto_sccs[3] = {
  &scc_info_ConfigConvertProtocol_convert_2eproto.base,
  &scc_info_ConfigConvertProtocol_ConvertProtocol_convert_2eproto.base,
  &scc_info_ConvertProtocolConfigResponse_convert_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_convert_2eproto_once;
static bool descriptor_table_convert_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_convert_2eproto = {
  &descriptor_table_convert_2eproto_initialized, descriptor_table_protodef_convert_2eproto, "convert.proto", 402,
  &descriptor_table_convert_2eproto_once, descriptor_table_convert_2eproto_sccs, descriptor_table_convert_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_convert_2eproto::offsets,
  file_level_metadata_convert_2eproto, 3, file_level_enum_descriptors_convert_2eproto, file_level_service_descriptors_convert_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_convert_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_convert_2eproto), true);

// ===================================================================

void ConvertProtocolConfigResponse::InitAsDefaultInstance() {
}
class ConvertProtocolConfigResponse::_Internal {
 public:
};

ConvertProtocolConfigResponse::ConvertProtocolConfigResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConvertProtocolConfigResponse)
}
ConvertProtocolConfigResponse::ConvertProtocolConfigResponse(const ConvertProtocolConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errordesc().empty()) {
    errordesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errordesc_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:ConvertProtocolConfigResponse)
}

void ConvertProtocolConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConvertProtocolConfigResponse_convert_2eproto.base);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
}

ConvertProtocolConfigResponse::~ConvertProtocolConfigResponse() {
  // @@protoc_insertion_point(destructor:ConvertProtocolConfigResponse)
  SharedDtor();
}

void ConvertProtocolConfigResponse::SharedDtor() {
  errordesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConvertProtocolConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConvertProtocolConfigResponse& ConvertProtocolConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConvertProtocolConfigResponse_convert_2eproto.base);
  return *internal_default_instance();
}


void ConvertProtocolConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConvertProtocolConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errordesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  _internal_metadata_.Clear();
}

const char* ConvertProtocolConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errorDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errordesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConvertProtocolConfigResponse.errorDesc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvertProtocolConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConvertProtocolConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 errorCode = 2;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // string errorDesc = 3;
  if (this->errordesc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errordesc().data(), static_cast<int>(this->_internal_errordesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConvertProtocolConfigResponse.errorDesc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errordesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConvertProtocolConfigResponse)
  return target;
}

size_t ConvertProtocolConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConvertProtocolConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorDesc = 3;
  if (this->errordesc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errordesc());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 errorCode = 2;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvertProtocolConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConvertProtocolConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvertProtocolConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConvertProtocolConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConvertProtocolConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConvertProtocolConfigResponse)
    MergeFrom(*source);
  }
}

void ConvertProtocolConfigResponse::MergeFrom(const ConvertProtocolConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConvertProtocolConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errordesc().size() > 0) {

    errordesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errordesc_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void ConvertProtocolConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConvertProtocolConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvertProtocolConfigResponse::CopyFrom(const ConvertProtocolConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConvertProtocolConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertProtocolConfigResponse::IsInitialized() const {
  return true;
}

void ConvertProtocolConfigResponse::InternalSwap(ConvertProtocolConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errordesc_.Swap(&other->errordesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvertProtocolConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigConvertProtocol_ConvertProtocol::InitAsDefaultInstance() {
}
class ConfigConvertProtocol_ConvertProtocol::_Internal {
 public:
};

ConfigConvertProtocol_ConvertProtocol::ConfigConvertProtocol_ConvertProtocol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigConvertProtocol.ConvertProtocol)
}
ConfigConvertProtocol_ConvertProtocol::ConfigConvertProtocol_ConvertProtocol(const ConfigConvertProtocol_ConvertProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tagnamesource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagnamesource().empty()) {
    tagnamesource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tagnamesource_);
  }
  tagnamedist_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagnamedist().empty()) {
    tagnamedist_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tagnamedist_);
  }
  timer_ = from.timer_;
  // @@protoc_insertion_point(copy_constructor:ConfigConvertProtocol.ConvertProtocol)
}

void ConfigConvertProtocol_ConvertProtocol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigConvertProtocol_ConvertProtocol_convert_2eproto.base);
  tagnamesource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tagnamedist_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timer_ = 0;
}

ConfigConvertProtocol_ConvertProtocol::~ConfigConvertProtocol_ConvertProtocol() {
  // @@protoc_insertion_point(destructor:ConfigConvertProtocol.ConvertProtocol)
  SharedDtor();
}

void ConfigConvertProtocol_ConvertProtocol::SharedDtor() {
  tagnamesource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tagnamedist_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigConvertProtocol_ConvertProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigConvertProtocol_ConvertProtocol& ConfigConvertProtocol_ConvertProtocol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigConvertProtocol_ConvertProtocol_convert_2eproto.base);
  return *internal_default_instance();
}


void ConfigConvertProtocol_ConvertProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigConvertProtocol.ConvertProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagnamesource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tagnamedist_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timer_ = 0;
  _internal_metadata_.Clear();
}

const char* ConfigConvertProtocol_ConvertProtocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tagNameSource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tagnamesource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigConvertProtocol.ConvertProtocol.tagNameSource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tagNameDist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tagnamedist();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigConvertProtocol.ConvertProtocol.tagNameDist"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigConvertProtocol_ConvertProtocol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigConvertProtocol.ConvertProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tagNameSource = 1;
  if (this->tagnamesource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagnamesource().data(), static_cast<int>(this->_internal_tagnamesource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigConvertProtocol.ConvertProtocol.tagNameSource");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tagnamesource(), target);
  }

  // string tagNameDist = 2;
  if (this->tagnamedist().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagnamedist().data(), static_cast<int>(this->_internal_tagnamedist().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigConvertProtocol.ConvertProtocol.tagNameDist");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tagnamedist(), target);
  }

  // int32 timer = 3;
  if (this->timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigConvertProtocol.ConvertProtocol)
  return target;
}

size_t ConfigConvertProtocol_ConvertProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigConvertProtocol.ConvertProtocol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tagNameSource = 1;
  if (this->tagnamesource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagnamesource());
  }

  // string tagNameDist = 2;
  if (this->tagnamedist().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagnamedist());
  }

  // int32 timer = 3;
  if (this->timer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigConvertProtocol_ConvertProtocol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigConvertProtocol.ConvertProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigConvertProtocol_ConvertProtocol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigConvertProtocol_ConvertProtocol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigConvertProtocol.ConvertProtocol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigConvertProtocol.ConvertProtocol)
    MergeFrom(*source);
  }
}

void ConfigConvertProtocol_ConvertProtocol::MergeFrom(const ConfigConvertProtocol_ConvertProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigConvertProtocol.ConvertProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tagnamesource().size() > 0) {

    tagnamesource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tagnamesource_);
  }
  if (from.tagnamedist().size() > 0) {

    tagnamedist_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tagnamedist_);
  }
  if (from.timer() != 0) {
    _internal_set_timer(from._internal_timer());
  }
}

void ConfigConvertProtocol_ConvertProtocol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigConvertProtocol.ConvertProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigConvertProtocol_ConvertProtocol::CopyFrom(const ConfigConvertProtocol_ConvertProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigConvertProtocol.ConvertProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigConvertProtocol_ConvertProtocol::IsInitialized() const {
  return true;
}

void ConfigConvertProtocol_ConvertProtocol::InternalSwap(ConfigConvertProtocol_ConvertProtocol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tagnamesource_.Swap(&other->tagnamesource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tagnamedist_.Swap(&other->tagnamedist_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timer_, other->timer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigConvertProtocol_ConvertProtocol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigConvertProtocol::InitAsDefaultInstance() {
}
class ConfigConvertProtocol::_Internal {
 public:
};

ConfigConvertProtocol::ConfigConvertProtocol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigConvertProtocol)
}
ConfigConvertProtocol::ConfigConvertProtocol(const ConfigConvertProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      convertprotocol_(from.convertprotocol_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConfigConvertProtocol)
}

void ConfigConvertProtocol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigConvertProtocol_convert_2eproto.base);
}

ConfigConvertProtocol::~ConfigConvertProtocol() {
  // @@protoc_insertion_point(destructor:ConfigConvertProtocol)
  SharedDtor();
}

void ConfigConvertProtocol::SharedDtor() {
}

void ConfigConvertProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigConvertProtocol& ConfigConvertProtocol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigConvertProtocol_convert_2eproto.base);
  return *internal_default_instance();
}


void ConfigConvertProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigConvertProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  convertprotocol_.Clear();
  _internal_metadata_.Clear();
}

const char* ConfigConvertProtocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ConfigConvertProtocol.ConvertProtocol convertProtocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_convertprotocol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigConvertProtocol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigConvertProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ConfigConvertProtocol.ConvertProtocol convertProtocol = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_convertprotocol_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_convertprotocol(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigConvertProtocol)
  return target;
}

size_t ConfigConvertProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigConvertProtocol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConfigConvertProtocol.ConvertProtocol convertProtocol = 1;
  total_size += 1UL * this->_internal_convertprotocol_size();
  for (const auto& msg : this->convertprotocol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigConvertProtocol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigConvertProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigConvertProtocol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigConvertProtocol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigConvertProtocol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigConvertProtocol)
    MergeFrom(*source);
  }
}

void ConfigConvertProtocol::MergeFrom(const ConfigConvertProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigConvertProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  convertprotocol_.MergeFrom(from.convertprotocol_);
}

void ConfigConvertProtocol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigConvertProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigConvertProtocol::CopyFrom(const ConfigConvertProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigConvertProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigConvertProtocol::IsInitialized() const {
  return true;
}

void ConfigConvertProtocol::InternalSwap(ConfigConvertProtocol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  convertprotocol_.InternalSwap(&other->convertprotocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigConvertProtocol::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ConvertProtocolConfigResponse* Arena::CreateMaybeMessage< ::ConvertProtocolConfigResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConvertProtocolConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigConvertProtocol_ConvertProtocol* Arena::CreateMaybeMessage< ::ConfigConvertProtocol_ConvertProtocol >(Arena* arena) {
  return Arena::CreateInternal< ::ConfigConvertProtocol_ConvertProtocol >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigConvertProtocol* Arena::CreateMaybeMessage< ::ConfigConvertProtocol >(Arena* arena) {
  return Arena::CreateInternal< ::ConfigConvertProtocol >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
