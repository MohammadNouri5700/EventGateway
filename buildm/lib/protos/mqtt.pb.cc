// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mqtt.proto

#include "mqtt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mqtt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MqttBorker_BrokerClient_mqtt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mqtt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MqttBorker_BrokerClient_ClientTopic_mqtt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mqtt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MqttBorker_BrokerTag_mqtt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mqtt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MqttClients_MqttClient_mqtt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mqtt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MqttClients_MqttClient_Business_mqtt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mqtt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MqttClients_MqttClient_ClientTag_mqtt_2eproto;
class ConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigResponse> _instance;
} _ConfigResponse_default_instance_;
class MqttClients_MqttClient_ClientTagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MqttClients_MqttClient_ClientTag> _instance;
} _MqttClients_MqttClient_ClientTag_default_instance_;
class MqttClients_MqttClient_BusinessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MqttClients_MqttClient_Business> _instance;
} _MqttClients_MqttClient_Business_default_instance_;
class MqttClients_MqttClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MqttClients_MqttClient> _instance;
} _MqttClients_MqttClient_default_instance_;
class MqttClientsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MqttClients> _instance;
} _MqttClients_default_instance_;
class MqttBorker_BrokerTagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MqttBorker_BrokerTag> _instance;
} _MqttBorker_BrokerTag_default_instance_;
class MqttBorker_BrokerClient_ClientTopicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MqttBorker_BrokerClient_ClientTopic> _instance;
} _MqttBorker_BrokerClient_ClientTopic_default_instance_;
class MqttBorker_BrokerClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MqttBorker_BrokerClient> _instance;
} _MqttBorker_BrokerClient_default_instance_;
class MqttBorkerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MqttBorker> _instance;
} _MqttBorker_default_instance_;
static void InitDefaultsscc_info_ConfigResponse_mqtt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfigResponse_default_instance_;
    new (ptr) ::ConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigResponse_mqtt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigResponse_mqtt_2eproto}, {}};

static void InitDefaultsscc_info_MqttBorker_mqtt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MqttBorker_default_instance_;
    new (ptr) ::MqttBorker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MqttBorker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MqttBorker_mqtt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MqttBorker_mqtt_2eproto}, {
      &scc_info_MqttBorker_BrokerClient_mqtt_2eproto.base,
      &scc_info_MqttBorker_BrokerTag_mqtt_2eproto.base,}};

static void InitDefaultsscc_info_MqttBorker_BrokerClient_mqtt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MqttBorker_BrokerClient_default_instance_;
    new (ptr) ::MqttBorker_BrokerClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MqttBorker_BrokerClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MqttBorker_BrokerClient_mqtt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MqttBorker_BrokerClient_mqtt_2eproto}, {
      &scc_info_MqttBorker_BrokerClient_ClientTopic_mqtt_2eproto.base,}};

static void InitDefaultsscc_info_MqttBorker_BrokerClient_ClientTopic_mqtt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MqttBorker_BrokerClient_ClientTopic_default_instance_;
    new (ptr) ::MqttBorker_BrokerClient_ClientTopic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MqttBorker_BrokerClient_ClientTopic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MqttBorker_BrokerClient_ClientTopic_mqtt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MqttBorker_BrokerClient_ClientTopic_mqtt_2eproto}, {}};

static void InitDefaultsscc_info_MqttBorker_BrokerTag_mqtt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MqttBorker_BrokerTag_default_instance_;
    new (ptr) ::MqttBorker_BrokerTag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MqttBorker_BrokerTag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MqttBorker_BrokerTag_mqtt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MqttBorker_BrokerTag_mqtt_2eproto}, {}};

static void InitDefaultsscc_info_MqttClients_mqtt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MqttClients_default_instance_;
    new (ptr) ::MqttClients();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MqttClients::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MqttClients_mqtt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MqttClients_mqtt_2eproto}, {
      &scc_info_MqttClients_MqttClient_mqtt_2eproto.base,}};

static void InitDefaultsscc_info_MqttClients_MqttClient_mqtt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MqttClients_MqttClient_default_instance_;
    new (ptr) ::MqttClients_MqttClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MqttClients_MqttClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MqttClients_MqttClient_mqtt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MqttClients_MqttClient_mqtt_2eproto}, {
      &scc_info_MqttClients_MqttClient_ClientTag_mqtt_2eproto.base,
      &scc_info_MqttClients_MqttClient_Business_mqtt_2eproto.base,}};

static void InitDefaultsscc_info_MqttClients_MqttClient_Business_mqtt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MqttClients_MqttClient_Business_default_instance_;
    new (ptr) ::MqttClients_MqttClient_Business();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MqttClients_MqttClient_Business::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MqttClients_MqttClient_Business_mqtt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MqttClients_MqttClient_Business_mqtt_2eproto}, {}};

static void InitDefaultsscc_info_MqttClients_MqttClient_ClientTag_mqtt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MqttClients_MqttClient_ClientTag_default_instance_;
    new (ptr) ::MqttClients_MqttClient_ClientTag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MqttClients_MqttClient_ClientTag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MqttClients_MqttClient_ClientTag_mqtt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MqttClients_MqttClient_ClientTag_mqtt_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mqtt_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mqtt_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mqtt_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mqtt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConfigResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ConfigResponse, errorcode_),
  PROTOBUF_FIELD_OFFSET(::ConfigResponse, errordesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient_ClientTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient_ClientTag, tagname_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient_ClientTag, topicname_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient_ClientTag, mqttvartype_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient_ClientTag, onoff_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient_ClientTag, systemname_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient_ClientTag, clientactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient_Business, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient_Business, name_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient_Business, size_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient_Business, trpersec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, clientname_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, clientid_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, protocol_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, hostaddress_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, hostport_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, username_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, userpassword_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, reconnect_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, timeout_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, willtopic_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, willqos_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, willpayload_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, sendtimestamp_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, keepalive_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, keepalivetime_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, mqtt31compatilble_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, willretain_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, cleansession_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, clienttag_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, qos_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, publishinterval_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, retain_),
  PROTOBUF_FIELD_OFFSET(::MqttClients_MqttClient, business_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MqttClients, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MqttClients, mqttclient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerTag, tagname_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerTag, topicname_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerTag, mqttvartype_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerTag, onoff_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerTag, systemname_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerTag, timer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerClient_ClientTopic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerClient_ClientTopic, clienttopic_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerClient_ClientTopic, topicname_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerClient_ClientTopic, qos_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerClient_ClientTopic, retain_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerClient_ClientTopic, private__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerClient, brokerclientname_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerClient, brokerclientid_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerClient, qos_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerClient, clientactions_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker_BrokerClient, clienttopic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MqttBorker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MqttBorker, clientname_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, clientid_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, protocol_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, hostaddress_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, hostport_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, username_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, userpassword_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, maxcient_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, maxlenght_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, brokerqos_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, maxqueleght_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, retainmessage_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, sendtimestamp_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, keepalive_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, keepalivetime_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, mqtt31compatilble_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, retainwill_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, wildcardsub_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, brokerclient_),
  PROTOBUF_FIELD_OFFSET(::MqttBorker, brokertag_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ConfigResponse)},
  { 8, -1, sizeof(::MqttClients_MqttClient_ClientTag)},
  { 19, -1, sizeof(::MqttClients_MqttClient_Business)},
  { 27, -1, sizeof(::MqttClients_MqttClient)},
  { 55, -1, sizeof(::MqttClients)},
  { 61, -1, sizeof(::MqttBorker_BrokerTag)},
  { 72, -1, sizeof(::MqttBorker_BrokerClient_ClientTopic)},
  { 82, -1, sizeof(::MqttBorker_BrokerClient)},
  { 92, -1, sizeof(::MqttBorker)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MqttClients_MqttClient_ClientTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MqttClients_MqttClient_Business_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MqttClients_MqttClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MqttClients_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MqttBorker_BrokerTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MqttBorker_BrokerClient_ClientTopic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MqttBorker_BrokerClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MqttBorker_default_instance_),
};

const char descriptor_table_protodef_mqtt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nmqtt.proto\"G\n\016ConfigResponse\022\017\n\007Succes"
  "s\030\001 \001(\010\022\021\n\terrorCode\030\002 \001(\005\022\021\n\terrorDesc\030"
  "\003 \001(\t\"\303\006\n\013MqttClients\022+\n\nmqttClient\030\001 \003("
  "\0132\027.MqttClients.MqttClient\032\206\006\n\nMqttClien"
  "t\022\022\n\nclientName\030\001 \001(\t\022\020\n\010clientID\030\002 \001(\t\022"
  "\033\n\010protocol\030\003 \001(\0162\t.Protocol\022\023\n\013hostAddr"
  "ess\030\004 \001(\t\022\020\n\010hostPort\030\005 \001(\005\022\020\n\010userName\030"
  "\006 \001(\t\022\024\n\014userPassword\030\007 \001(\t\022\021\n\treConnect"
  "\030\010 \001(\005\022\017\n\007timeOut\030\t \001(\005\022\021\n\twillTopic\030\n \001"
  "(\t\022\025\n\007willQos\030\013 \001(\0162\004.Qos\022\023\n\013willPayLoad"
  "\030\014 \001(\t\022\025\n\rsendTimestamp\030\r \001(\010\022\021\n\tkeepAli"
  "ve\030\016 \001(\010\022\025\n\rkeepAliveTime\030\017 \001(\005\022\031\n\021mqtt3"
  "1Compatilble\030\020 \001(\010\022\022\n\nwillRetain\030\021 \001(\010\022\024"
  "\n\014cleanSession\030\022 \001(\010\0224\n\tclientTag\030\023 \003(\0132"
  "!.MqttClients.MqttClient.ClientTag\022\021\n\003qo"
  "s\030\024 \001(\0162\004.Qos\022\027\n\017publishInterval\030\025 \001(\005\022\016"
  "\n\006retain\030\026 \001(\010\0222\n\010business\030\027 \001(\0132 .MqttC"
  "lients.MqttClient.Business\032\234\001\n\tClientTag"
  "\022\017\n\007tagName\030\001 \001(\t\022\021\n\ttopicName\030\002 \001(\t\022!\n\013"
  "mqttVarType\030\003 \001(\0162\014.MqttVarType\022\r\n\005onOff"
  "\030\004 \001(\010\022\022\n\nsystemName\030\005 \001(\t\022%\n\rclientActi"
  "ons\030\006 \001(\0162\016.ClientActions\0328\n\010Business\022\014\n"
  "\004name\030\001 \001(\t\022\014\n\004size\030\002 \001(\005\022\020\n\010trpersec\030\003 "
  "\001(\002\"\221\007\n\nMqttBorker\022\022\n\nclientName\030\001 \001(\t\022\020"
  "\n\010clientID\030\002 \001(\t\022\033\n\010protocol\030\003 \001(\0162\t.Pro"
  "tocol\022\023\n\013hostAddress\030\004 \001(\t\022\020\n\010hostPort\030\005"
  " \001(\005\022\020\n\010userName\030\006 \001(\t\022\024\n\014userPassword\030\007"
  " \001(\t\022\020\n\010maxCient\030\010 \001(\005\022\021\n\tmaxLenght\030\t \001("
  "\005\022\027\n\tbrokerQos\030\n \001(\0162\004.Qos\022\023\n\013maxQueLegh"
  "t\030\013 \001(\005\022\025\n\rretainMessage\030\014 \001(\005\022\025\n\rsendTi"
  "mestamp\030\r \001(\010\022\021\n\tkeepAlive\030\016 \001(\010\022\025\n\rkeep"
  "AliveTime\030\017 \001(\005\022\031\n\021mqtt31Compatilble\030\020 \001"
  "(\010\022\022\n\nretainWill\030\021 \001(\010\022\023\n\013wildcardSub\030\022 "
  "\001(\010\022.\n\014brokerClient\030\023 \003(\0132\030.MqttBorker.B"
  "rokerClient\022(\n\tbrokerTag\030\024 \003(\0132\025.MqttBor"
  "ker.BrokerTag\032\204\001\n\tBrokerTag\022\017\n\007tagName\030\001"
  " \001(\t\022\021\n\ttopicName\030\002 \001(\t\022!\n\013mqttVarType\030\003"
  " \001(\0162\014.MqttVarType\022\r\n\005onOff\030\004 \001(\010\022\022\n\nsys"
  "temName\030\005 \001(\t\022\r\n\005timer\030\006 \001(\005\032\240\002\n\014BrokerC"
  "lient\022\030\n\020brokerClientName\030\001 \001(\t\022\026\n\016broke"
  "rClientID\030\002 \001(\t\022\021\n\003qos\030\003 \001(\0162\004.Qos\022%\n\rcl"
  "ientActions\030\004 \001(\0162\016.ClientActions\0229\n\013cli"
  "entTopic\030\005 \003(\0132$.MqttBorker.BrokerClient"
  ".ClientTopic\032i\n\013ClientTopic\022\023\n\013clientTop"
  "ic\030\001 \001(\t\022\021\n\ttopicName\030\002 \001(\t\022\021\n\003qos\030\003 \001(\016"
  "2\004.Qos\022\016\n\006retain\030\004 \001(\010\022\017\n\007private\030\005 \001(\010*"
  "C\n\003Qos\022\017\n\013ALMOST_ONCE\020\000\022\020\n\014ATLEAST_ONCE\020"
  "\001\022\020\n\014EXACTLY_ONCE\020\002\022\007\n\003ALL\020\003*6\n\010Protocol"
  "\022\006\n\002WS\020\000\022\007\n\003WSS\020\001\022\013\n\007MQTTTCP\020\002\022\014\n\010MQTTTT"
  "LS\020\003*+\n\013MqttVarType\022\t\n\005PLAIN\020\000\022\010\n\004JSON\020\001"
  "\022\007\n\003CSV\020\002*.\n\rClientActions\022\007\n\003PUB\020\000\022\007\n\003S"
  "UB\020\001\022\013\n\007PUB_SUB\020\0022K\n\021MqttClientsConfig\0226"
  "\n\025SendMqttClientsConfig\022\014.MqttClients\032\017."
  "ConfigResponse2H\n\020MqttBrokerConfig\0224\n\024Se"
  "ndMqttBrokerConfig\022\013.MqttBorker\032\017.Config"
  "Responseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mqtt_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mqtt_2eproto_sccs[9] = {
  &scc_info_ConfigResponse_mqtt_2eproto.base,
  &scc_info_MqttBorker_mqtt_2eproto.base,
  &scc_info_MqttBorker_BrokerClient_mqtt_2eproto.base,
  &scc_info_MqttBorker_BrokerClient_ClientTopic_mqtt_2eproto.base,
  &scc_info_MqttBorker_BrokerTag_mqtt_2eproto.base,
  &scc_info_MqttClients_mqtt_2eproto.base,
  &scc_info_MqttClients_MqttClient_mqtt_2eproto.base,
  &scc_info_MqttClients_MqttClient_Business_mqtt_2eproto.base,
  &scc_info_MqttClients_MqttClient_ClientTag_mqtt_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mqtt_2eproto_once;
static bool descriptor_table_mqtt_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mqtt_2eproto = {
  &descriptor_table_mqtt_2eproto_initialized, descriptor_table_protodef_mqtt_2eproto, "mqtt.proto", 2216,
  &descriptor_table_mqtt_2eproto_once, descriptor_table_mqtt_2eproto_sccs, descriptor_table_mqtt_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_mqtt_2eproto::offsets,
  file_level_metadata_mqtt_2eproto, 9, file_level_enum_descriptors_mqtt_2eproto, file_level_service_descriptors_mqtt_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mqtt_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mqtt_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Qos_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mqtt_2eproto);
  return file_level_enum_descriptors_mqtt_2eproto[0];
}
bool Qos_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mqtt_2eproto);
  return file_level_enum_descriptors_mqtt_2eproto[1];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MqttVarType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mqtt_2eproto);
  return file_level_enum_descriptors_mqtt_2eproto[2];
}
bool MqttVarType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientActions_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mqtt_2eproto);
  return file_level_enum_descriptors_mqtt_2eproto[3];
}
bool ClientActions_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ConfigResponse::InitAsDefaultInstance() {
}
class ConfigResponse::_Internal {
 public:
};

ConfigResponse::ConfigResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigResponse)
}
ConfigResponse::ConfigResponse(const ConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errordesc().empty()) {
    errordesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errordesc_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:ConfigResponse)
}

void ConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigResponse_mqtt_2eproto.base);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
}

ConfigResponse::~ConfigResponse() {
  // @@protoc_insertion_point(destructor:ConfigResponse)
  SharedDtor();
}

void ConfigResponse::SharedDtor() {
  errordesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigResponse& ConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigResponse_mqtt_2eproto.base);
  return *internal_default_instance();
}


void ConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errordesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  _internal_metadata_.Clear();
}

const char* ConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errorDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errordesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigResponse.errorDesc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 errorCode = 2;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // string errorDesc = 3;
  if (this->errordesc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errordesc().data(), static_cast<int>(this->_internal_errordesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigResponse.errorDesc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errordesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigResponse)
  return target;
}

size_t ConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorDesc = 3;
  if (this->errordesc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errordesc());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 errorCode = 2;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigResponse)
    MergeFrom(*source);
  }
}

void ConfigResponse::MergeFrom(const ConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errordesc().size() > 0) {

    errordesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errordesc_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void ConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigResponse::CopyFrom(const ConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigResponse::IsInitialized() const {
  return true;
}

void ConfigResponse::InternalSwap(ConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errordesc_.Swap(&other->errordesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MqttClients_MqttClient_ClientTag::InitAsDefaultInstance() {
}
class MqttClients_MqttClient_ClientTag::_Internal {
 public:
};

MqttClients_MqttClient_ClientTag::MqttClients_MqttClient_ClientTag()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MqttClients.MqttClient.ClientTag)
}
MqttClients_MqttClient_ClientTag::MqttClients_MqttClient_ClientTag(const MqttClients_MqttClient_ClientTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagname().empty()) {
    tagname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tagname_);
  }
  topicname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topicname().empty()) {
    topicname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicname_);
  }
  systemname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_systemname().empty()) {
    systemname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.systemname_);
  }
  ::memcpy(&mqttvartype_, &from.mqttvartype_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientactions_) -
    reinterpret_cast<char*>(&mqttvartype_)) + sizeof(clientactions_));
  // @@protoc_insertion_point(copy_constructor:MqttClients.MqttClient.ClientTag)
}

void MqttClients_MqttClient_ClientTag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MqttClients_MqttClient_ClientTag_mqtt_2eproto.base);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topicname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  systemname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mqttvartype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientactions_) -
      reinterpret_cast<char*>(&mqttvartype_)) + sizeof(clientactions_));
}

MqttClients_MqttClient_ClientTag::~MqttClients_MqttClient_ClientTag() {
  // @@protoc_insertion_point(destructor:MqttClients.MqttClient.ClientTag)
  SharedDtor();
}

void MqttClients_MqttClient_ClientTag::SharedDtor() {
  tagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topicname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  systemname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MqttClients_MqttClient_ClientTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MqttClients_MqttClient_ClientTag& MqttClients_MqttClient_ClientTag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MqttClients_MqttClient_ClientTag_mqtt_2eproto.base);
  return *internal_default_instance();
}


void MqttClients_MqttClient_ClientTag::Clear() {
// @@protoc_insertion_point(message_clear_start:MqttClients.MqttClient.ClientTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topicname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  systemname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mqttvartype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientactions_) -
      reinterpret_cast<char*>(&mqttvartype_)) + sizeof(clientactions_));
  _internal_metadata_.Clear();
}

const char* MqttClients_MqttClient_ClientTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tagName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttClients.MqttClient.ClientTag.tagName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topicName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_topicname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttClients.MqttClient.ClientTag.topicName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MqttVarType mqttVarType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_mqttvartype(static_cast<::MqttVarType>(val));
        } else goto handle_unusual;
        continue;
      // bool onOff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          onoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string systemName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_systemname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttClients.MqttClient.ClientTag.systemName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ClientActions clientActions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_clientactions(static_cast<::ClientActions>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MqttClients_MqttClient_ClientTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MqttClients.MqttClient.ClientTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tagName = 1;
  if (this->tagname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagname().data(), static_cast<int>(this->_internal_tagname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttClients.MqttClient.ClientTag.tagName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tagname(), target);
  }

  // string topicName = 2;
  if (this->topicname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topicname().data(), static_cast<int>(this->_internal_topicname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttClients.MqttClient.ClientTag.topicName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_topicname(), target);
  }

  // .MqttVarType mqttVarType = 3;
  if (this->mqttvartype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mqttvartype(), target);
  }

  // bool onOff = 4;
  if (this->onoff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_onoff(), target);
  }

  // string systemName = 5;
  if (this->systemname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_systemname().data(), static_cast<int>(this->_internal_systemname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttClients.MqttClient.ClientTag.systemName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_systemname(), target);
  }

  // .ClientActions clientActions = 6;
  if (this->clientactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_clientactions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MqttClients.MqttClient.ClientTag)
  return target;
}

size_t MqttClients_MqttClient_ClientTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MqttClients.MqttClient.ClientTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tagName = 1;
  if (this->tagname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagname());
  }

  // string topicName = 2;
  if (this->topicname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topicname());
  }

  // string systemName = 5;
  if (this->systemname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_systemname());
  }

  // .MqttVarType mqttVarType = 3;
  if (this->mqttvartype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mqttvartype());
  }

  // bool onOff = 4;
  if (this->onoff() != 0) {
    total_size += 1 + 1;
  }

  // .ClientActions clientActions = 6;
  if (this->clientactions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clientactions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MqttClients_MqttClient_ClientTag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MqttClients.MqttClient.ClientTag)
  GOOGLE_DCHECK_NE(&from, this);
  const MqttClients_MqttClient_ClientTag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MqttClients_MqttClient_ClientTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MqttClients.MqttClient.ClientTag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MqttClients.MqttClient.ClientTag)
    MergeFrom(*source);
  }
}

void MqttClients_MqttClient_ClientTag::MergeFrom(const MqttClients_MqttClient_ClientTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MqttClients.MqttClient.ClientTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tagname().size() > 0) {

    tagname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tagname_);
  }
  if (from.topicname().size() > 0) {

    topicname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicname_);
  }
  if (from.systemname().size() > 0) {

    systemname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.systemname_);
  }
  if (from.mqttvartype() != 0) {
    _internal_set_mqttvartype(from._internal_mqttvartype());
  }
  if (from.onoff() != 0) {
    _internal_set_onoff(from._internal_onoff());
  }
  if (from.clientactions() != 0) {
    _internal_set_clientactions(from._internal_clientactions());
  }
}

void MqttClients_MqttClient_ClientTag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MqttClients.MqttClient.ClientTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MqttClients_MqttClient_ClientTag::CopyFrom(const MqttClients_MqttClient_ClientTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MqttClients.MqttClient.ClientTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MqttClients_MqttClient_ClientTag::IsInitialized() const {
  return true;
}

void MqttClients_MqttClient_ClientTag::InternalSwap(MqttClients_MqttClient_ClientTag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tagname_.Swap(&other->tagname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topicname_.Swap(&other->topicname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  systemname_.Swap(&other->systemname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mqttvartype_, other->mqttvartype_);
  swap(onoff_, other->onoff_);
  swap(clientactions_, other->clientactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MqttClients_MqttClient_ClientTag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MqttClients_MqttClient_Business::InitAsDefaultInstance() {
}
class MqttClients_MqttClient_Business::_Internal {
 public:
};

MqttClients_MqttClient_Business::MqttClients_MqttClient_Business()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MqttClients.MqttClient.Business)
}
MqttClients_MqttClient_Business::MqttClients_MqttClient_Business(const MqttClients_MqttClient_Business& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&trpersec_) -
    reinterpret_cast<char*>(&size_)) + sizeof(trpersec_));
  // @@protoc_insertion_point(copy_constructor:MqttClients.MqttClient.Business)
}

void MqttClients_MqttClient_Business::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MqttClients_MqttClient_Business_mqtt_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trpersec_) -
      reinterpret_cast<char*>(&size_)) + sizeof(trpersec_));
}

MqttClients_MqttClient_Business::~MqttClients_MqttClient_Business() {
  // @@protoc_insertion_point(destructor:MqttClients.MqttClient.Business)
  SharedDtor();
}

void MqttClients_MqttClient_Business::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MqttClients_MqttClient_Business::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MqttClients_MqttClient_Business& MqttClients_MqttClient_Business::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MqttClients_MqttClient_Business_mqtt_2eproto.base);
  return *internal_default_instance();
}


void MqttClients_MqttClient_Business::Clear() {
// @@protoc_insertion_point(message_clear_start:MqttClients.MqttClient.Business)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trpersec_) -
      reinterpret_cast<char*>(&size_)) + sizeof(trpersec_));
  _internal_metadata_.Clear();
}

const char* MqttClients_MqttClient_Business::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttClients.MqttClient.Business.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float trpersec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          trpersec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MqttClients_MqttClient_Business::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MqttClients.MqttClient.Business)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttClients.MqttClient.Business.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  // float trpersec = 3;
  if (!(this->trpersec() <= 0 && this->trpersec() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_trpersec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MqttClients.MqttClient.Business)
  return target;
}

size_t MqttClients_MqttClient_Business::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MqttClients.MqttClient.Business)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // float trpersec = 3;
  if (!(this->trpersec() <= 0 && this->trpersec() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MqttClients_MqttClient_Business::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MqttClients.MqttClient.Business)
  GOOGLE_DCHECK_NE(&from, this);
  const MqttClients_MqttClient_Business* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MqttClients_MqttClient_Business>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MqttClients.MqttClient.Business)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MqttClients.MqttClient.Business)
    MergeFrom(*source);
  }
}

void MqttClients_MqttClient_Business::MergeFrom(const MqttClients_MqttClient_Business& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MqttClients.MqttClient.Business)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (!(from.trpersec() <= 0 && from.trpersec() >= 0)) {
    _internal_set_trpersec(from._internal_trpersec());
  }
}

void MqttClients_MqttClient_Business::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MqttClients.MqttClient.Business)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MqttClients_MqttClient_Business::CopyFrom(const MqttClients_MqttClient_Business& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MqttClients.MqttClient.Business)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MqttClients_MqttClient_Business::IsInitialized() const {
  return true;
}

void MqttClients_MqttClient_Business::InternalSwap(MqttClients_MqttClient_Business* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(trpersec_, other->trpersec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MqttClients_MqttClient_Business::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MqttClients_MqttClient::InitAsDefaultInstance() {
  ::_MqttClients_MqttClient_default_instance_._instance.get_mutable()->business_ = const_cast< ::MqttClients_MqttClient_Business*>(
      ::MqttClients_MqttClient_Business::internal_default_instance());
}
class MqttClients_MqttClient::_Internal {
 public:
  static const ::MqttClients_MqttClient_Business& business(const MqttClients_MqttClient* msg);
};

const ::MqttClients_MqttClient_Business&
MqttClients_MqttClient::_Internal::business(const MqttClients_MqttClient* msg) {
  return *msg->business_;
}
MqttClients_MqttClient::MqttClients_MqttClient()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MqttClients.MqttClient)
}
MqttClients_MqttClient::MqttClients_MqttClient(const MqttClients_MqttClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      clienttag_(from.clienttag_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientname().empty()) {
    clientname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  hostaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostaddress().empty()) {
    hostaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostaddress_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userpassword().empty()) {
    userpassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userpassword_);
  }
  willtopic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_willtopic().empty()) {
    willtopic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.willtopic_);
  }
  willpayload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_willpayload().empty()) {
    willpayload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.willpayload_);
  }
  if (from._internal_has_business()) {
    business_ = new ::MqttClients_MqttClient_Business(*from.business_);
  } else {
    business_ = nullptr;
  }
  ::memcpy(&protocol_, &from.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&publishinterval_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(publishinterval_));
  // @@protoc_insertion_point(copy_constructor:MqttClients.MqttClient)
}

void MqttClients_MqttClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MqttClients_MqttClient_mqtt_2eproto.base);
  clientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  willtopic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  willpayload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&business_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publishinterval_) -
      reinterpret_cast<char*>(&business_)) + sizeof(publishinterval_));
}

MqttClients_MqttClient::~MqttClients_MqttClient() {
  // @@protoc_insertion_point(destructor:MqttClients.MqttClient)
  SharedDtor();
}

void MqttClients_MqttClient::SharedDtor() {
  clientname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  willtopic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  willpayload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete business_;
}

void MqttClients_MqttClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MqttClients_MqttClient& MqttClients_MqttClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MqttClients_MqttClient_mqtt_2eproto.base);
  return *internal_default_instance();
}


void MqttClients_MqttClient::Clear() {
// @@protoc_insertion_point(message_clear_start:MqttClients.MqttClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clienttag_.Clear();
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  willtopic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  willpayload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && business_ != nullptr) {
    delete business_;
  }
  business_ = nullptr;
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publishinterval_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(publishinterval_));
  _internal_metadata_.Clear();
}

const char* MqttClients_MqttClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string clientName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttClients.MqttClient.clientName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttClients.MqttClient.clientID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol protocol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::Protocol>(val));
        } else goto handle_unusual;
        continue;
      // string hostAddress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hostaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttClients.MqttClient.hostAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hostPort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hostport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttClients.MqttClient.userName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userPassword = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_userpassword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttClients.MqttClient.userPassword"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reConnect = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          reconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeOut = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string willTopic = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_willtopic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttClients.MqttClient.willTopic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Qos willQos = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_willqos(static_cast<::Qos>(val));
        } else goto handle_unusual;
        continue;
      // string willPayLoad = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_willpayload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttClients.MqttClient.willPayLoad"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sendTimestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sendtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keepAlive = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          keepalive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 keepAliveTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          keepalivetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mqtt31Compatilble = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          mqtt31compatilble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool willRetain = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          willretain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cleanSession = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          cleansession_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MqttClients.MqttClient.ClientTag clientTag = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_clienttag(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // .Qos qos = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_qos(static_cast<::Qos>(val));
        } else goto handle_unusual;
        continue;
      // int32 publishInterval = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          publishinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool retain = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          retain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MqttClients.MqttClient.Business business = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_business(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MqttClients_MqttClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MqttClients.MqttClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientName = 1;
  if (this->clientname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientname().data(), static_cast<int>(this->_internal_clientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttClients.MqttClient.clientName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientname(), target);
  }

  // string clientID = 2;
  if (this->clientid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttClients.MqttClient.clientID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientid(), target);
  }

  // .Protocol protocol = 3;
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_protocol(), target);
  }

  // string hostAddress = 4;
  if (this->hostaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostaddress().data(), static_cast<int>(this->_internal_hostaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttClients.MqttClient.hostAddress");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostaddress(), target);
  }

  // int32 hostPort = 5;
  if (this->hostport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_hostport(), target);
  }

  // string userName = 6;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttClients.MqttClient.userName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_username(), target);
  }

  // string userPassword = 7;
  if (this->userpassword().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userpassword().data(), static_cast<int>(this->_internal_userpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttClients.MqttClient.userPassword");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_userpassword(), target);
  }

  // int32 reConnect = 8;
  if (this->reconnect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_reconnect(), target);
  }

  // int32 timeOut = 9;
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_timeout(), target);
  }

  // string willTopic = 10;
  if (this->willtopic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_willtopic().data(), static_cast<int>(this->_internal_willtopic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttClients.MqttClient.willTopic");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_willtopic(), target);
  }

  // .Qos willQos = 11;
  if (this->willqos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_willqos(), target);
  }

  // string willPayLoad = 12;
  if (this->willpayload().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_willpayload().data(), static_cast<int>(this->_internal_willpayload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttClients.MqttClient.willPayLoad");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_willpayload(), target);
  }

  // bool sendTimestamp = 13;
  if (this->sendtimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_sendtimestamp(), target);
  }

  // bool keepAlive = 14;
  if (this->keepalive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_keepalive(), target);
  }

  // int32 keepAliveTime = 15;
  if (this->keepalivetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_keepalivetime(), target);
  }

  // bool mqtt31Compatilble = 16;
  if (this->mqtt31compatilble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_mqtt31compatilble(), target);
  }

  // bool willRetain = 17;
  if (this->willretain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_willretain(), target);
  }

  // bool cleanSession = 18;
  if (this->cleansession() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_cleansession(), target);
  }

  // repeated .MqttClients.MqttClient.ClientTag clientTag = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clienttag_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_clienttag(i), target, stream);
  }

  // .Qos qos = 20;
  if (this->qos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_qos(), target);
  }

  // int32 publishInterval = 21;
  if (this->publishinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_publishinterval(), target);
  }

  // bool retain = 22;
  if (this->retain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_retain(), target);
  }

  // .MqttClients.MqttClient.Business business = 23;
  if (this->has_business()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::business(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MqttClients.MqttClient)
  return target;
}

size_t MqttClients_MqttClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MqttClients.MqttClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MqttClients.MqttClient.ClientTag clientTag = 19;
  total_size += 2UL * this->_internal_clienttag_size();
  for (const auto& msg : this->clienttag_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string clientName = 1;
  if (this->clientname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientname());
  }

  // string clientID = 2;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string hostAddress = 4;
  if (this->hostaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostaddress());
  }

  // string userName = 6;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string userPassword = 7;
  if (this->userpassword().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userpassword());
  }

  // string willTopic = 10;
  if (this->willtopic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_willtopic());
  }

  // string willPayLoad = 12;
  if (this->willpayload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_willpayload());
  }

  // .MqttClients.MqttClient.Business business = 23;
  if (this->has_business()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *business_);
  }

  // .Protocol protocol = 3;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // int32 hostPort = 5;
  if (this->hostport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hostport());
  }

  // int32 reConnect = 8;
  if (this->reconnect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reconnect());
  }

  // int32 timeOut = 9;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeout());
  }

  // .Qos willQos = 11;
  if (this->willqos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_willqos());
  }

  // int32 keepAliveTime = 15;
  if (this->keepalivetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keepalivetime());
  }

  // bool sendTimestamp = 13;
  if (this->sendtimestamp() != 0) {
    total_size += 1 + 1;
  }

  // bool keepAlive = 14;
  if (this->keepalive() != 0) {
    total_size += 1 + 1;
  }

  // bool mqtt31Compatilble = 16;
  if (this->mqtt31compatilble() != 0) {
    total_size += 2 + 1;
  }

  // bool willRetain = 17;
  if (this->willretain() != 0) {
    total_size += 2 + 1;
  }

  // .Qos qos = 20;
  if (this->qos() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_qos());
  }

  // bool cleanSession = 18;
  if (this->cleansession() != 0) {
    total_size += 2 + 1;
  }

  // bool retain = 22;
  if (this->retain() != 0) {
    total_size += 2 + 1;
  }

  // int32 publishInterval = 21;
  if (this->publishinterval() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_publishinterval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MqttClients_MqttClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MqttClients.MqttClient)
  GOOGLE_DCHECK_NE(&from, this);
  const MqttClients_MqttClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MqttClients_MqttClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MqttClients.MqttClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MqttClients.MqttClient)
    MergeFrom(*source);
  }
}

void MqttClients_MqttClient::MergeFrom(const MqttClients_MqttClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MqttClients.MqttClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clienttag_.MergeFrom(from.clienttag_);
  if (from.clientname().size() > 0) {

    clientname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.clientid().size() > 0) {

    clientid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.hostaddress().size() > 0) {

    hostaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostaddress_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.userpassword().size() > 0) {

    userpassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userpassword_);
  }
  if (from.willtopic().size() > 0) {

    willtopic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.willtopic_);
  }
  if (from.willpayload().size() > 0) {

    willpayload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.willpayload_);
  }
  if (from.has_business()) {
    _internal_mutable_business()->::MqttClients_MqttClient_Business::MergeFrom(from._internal_business());
  }
  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.hostport() != 0) {
    _internal_set_hostport(from._internal_hostport());
  }
  if (from.reconnect() != 0) {
    _internal_set_reconnect(from._internal_reconnect());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from.willqos() != 0) {
    _internal_set_willqos(from._internal_willqos());
  }
  if (from.keepalivetime() != 0) {
    _internal_set_keepalivetime(from._internal_keepalivetime());
  }
  if (from.sendtimestamp() != 0) {
    _internal_set_sendtimestamp(from._internal_sendtimestamp());
  }
  if (from.keepalive() != 0) {
    _internal_set_keepalive(from._internal_keepalive());
  }
  if (from.mqtt31compatilble() != 0) {
    _internal_set_mqtt31compatilble(from._internal_mqtt31compatilble());
  }
  if (from.willretain() != 0) {
    _internal_set_willretain(from._internal_willretain());
  }
  if (from.qos() != 0) {
    _internal_set_qos(from._internal_qos());
  }
  if (from.cleansession() != 0) {
    _internal_set_cleansession(from._internal_cleansession());
  }
  if (from.retain() != 0) {
    _internal_set_retain(from._internal_retain());
  }
  if (from.publishinterval() != 0) {
    _internal_set_publishinterval(from._internal_publishinterval());
  }
}

void MqttClients_MqttClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MqttClients.MqttClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MqttClients_MqttClient::CopyFrom(const MqttClients_MqttClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MqttClients.MqttClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MqttClients_MqttClient::IsInitialized() const {
  return true;
}

void MqttClients_MqttClient::InternalSwap(MqttClients_MqttClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clienttag_.InternalSwap(&other->clienttag_);
  clientname_.Swap(&other->clientname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientid_.Swap(&other->clientid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostaddress_.Swap(&other->hostaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userpassword_.Swap(&other->userpassword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  willtopic_.Swap(&other->willtopic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  willpayload_.Swap(&other->willpayload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(business_, other->business_);
  swap(protocol_, other->protocol_);
  swap(hostport_, other->hostport_);
  swap(reconnect_, other->reconnect_);
  swap(timeout_, other->timeout_);
  swap(willqos_, other->willqos_);
  swap(keepalivetime_, other->keepalivetime_);
  swap(sendtimestamp_, other->sendtimestamp_);
  swap(keepalive_, other->keepalive_);
  swap(mqtt31compatilble_, other->mqtt31compatilble_);
  swap(willretain_, other->willretain_);
  swap(qos_, other->qos_);
  swap(cleansession_, other->cleansession_);
  swap(retain_, other->retain_);
  swap(publishinterval_, other->publishinterval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MqttClients_MqttClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MqttClients::InitAsDefaultInstance() {
}
class MqttClients::_Internal {
 public:
};

MqttClients::MqttClients()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MqttClients)
}
MqttClients::MqttClients(const MqttClients& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      mqttclient_(from.mqttclient_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MqttClients)
}

void MqttClients::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MqttClients_mqtt_2eproto.base);
}

MqttClients::~MqttClients() {
  // @@protoc_insertion_point(destructor:MqttClients)
  SharedDtor();
}

void MqttClients::SharedDtor() {
}

void MqttClients::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MqttClients& MqttClients::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MqttClients_mqtt_2eproto.base);
  return *internal_default_instance();
}


void MqttClients::Clear() {
// @@protoc_insertion_point(message_clear_start:MqttClients)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mqttclient_.Clear();
  _internal_metadata_.Clear();
}

const char* MqttClients::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MqttClients.MqttClient mqttClient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mqttclient(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MqttClients::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MqttClients)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MqttClients.MqttClient mqttClient = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mqttclient_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mqttclient(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MqttClients)
  return target;
}

size_t MqttClients::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MqttClients)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MqttClients.MqttClient mqttClient = 1;
  total_size += 1UL * this->_internal_mqttclient_size();
  for (const auto& msg : this->mqttclient_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MqttClients::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MqttClients)
  GOOGLE_DCHECK_NE(&from, this);
  const MqttClients* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MqttClients>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MqttClients)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MqttClients)
    MergeFrom(*source);
  }
}

void MqttClients::MergeFrom(const MqttClients& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MqttClients)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mqttclient_.MergeFrom(from.mqttclient_);
}

void MqttClients::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MqttClients)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MqttClients::CopyFrom(const MqttClients& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MqttClients)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MqttClients::IsInitialized() const {
  return true;
}

void MqttClients::InternalSwap(MqttClients* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mqttclient_.InternalSwap(&other->mqttclient_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MqttClients::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MqttBorker_BrokerTag::InitAsDefaultInstance() {
}
class MqttBorker_BrokerTag::_Internal {
 public:
};

MqttBorker_BrokerTag::MqttBorker_BrokerTag()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MqttBorker.BrokerTag)
}
MqttBorker_BrokerTag::MqttBorker_BrokerTag(const MqttBorker_BrokerTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagname().empty()) {
    tagname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tagname_);
  }
  topicname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topicname().empty()) {
    topicname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicname_);
  }
  systemname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_systemname().empty()) {
    systemname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.systemname_);
  }
  ::memcpy(&mqttvartype_, &from.mqttvartype_,
    static_cast<size_t>(reinterpret_cast<char*>(&timer_) -
    reinterpret_cast<char*>(&mqttvartype_)) + sizeof(timer_));
  // @@protoc_insertion_point(copy_constructor:MqttBorker.BrokerTag)
}

void MqttBorker_BrokerTag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MqttBorker_BrokerTag_mqtt_2eproto.base);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topicname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  systemname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mqttvartype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timer_) -
      reinterpret_cast<char*>(&mqttvartype_)) + sizeof(timer_));
}

MqttBorker_BrokerTag::~MqttBorker_BrokerTag() {
  // @@protoc_insertion_point(destructor:MqttBorker.BrokerTag)
  SharedDtor();
}

void MqttBorker_BrokerTag::SharedDtor() {
  tagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topicname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  systemname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MqttBorker_BrokerTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MqttBorker_BrokerTag& MqttBorker_BrokerTag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MqttBorker_BrokerTag_mqtt_2eproto.base);
  return *internal_default_instance();
}


void MqttBorker_BrokerTag::Clear() {
// @@protoc_insertion_point(message_clear_start:MqttBorker.BrokerTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topicname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  systemname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mqttvartype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timer_) -
      reinterpret_cast<char*>(&mqttvartype_)) + sizeof(timer_));
  _internal_metadata_.Clear();
}

const char* MqttBorker_BrokerTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tagName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttBorker.BrokerTag.tagName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topicName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_topicname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttBorker.BrokerTag.topicName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MqttVarType mqttVarType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_mqttvartype(static_cast<::MqttVarType>(val));
        } else goto handle_unusual;
        continue;
      // bool onOff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          onoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string systemName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_systemname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttBorker.BrokerTag.systemName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MqttBorker_BrokerTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MqttBorker.BrokerTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tagName = 1;
  if (this->tagname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagname().data(), static_cast<int>(this->_internal_tagname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttBorker.BrokerTag.tagName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tagname(), target);
  }

  // string topicName = 2;
  if (this->topicname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topicname().data(), static_cast<int>(this->_internal_topicname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttBorker.BrokerTag.topicName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_topicname(), target);
  }

  // .MqttVarType mqttVarType = 3;
  if (this->mqttvartype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mqttvartype(), target);
  }

  // bool onOff = 4;
  if (this->onoff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_onoff(), target);
  }

  // string systemName = 5;
  if (this->systemname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_systemname().data(), static_cast<int>(this->_internal_systemname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttBorker.BrokerTag.systemName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_systemname(), target);
  }

  // int32 timer = 6;
  if (this->timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_timer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MqttBorker.BrokerTag)
  return target;
}

size_t MqttBorker_BrokerTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MqttBorker.BrokerTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tagName = 1;
  if (this->tagname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagname());
  }

  // string topicName = 2;
  if (this->topicname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topicname());
  }

  // string systemName = 5;
  if (this->systemname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_systemname());
  }

  // .MqttVarType mqttVarType = 3;
  if (this->mqttvartype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mqttvartype());
  }

  // bool onOff = 4;
  if (this->onoff() != 0) {
    total_size += 1 + 1;
  }

  // int32 timer = 6;
  if (this->timer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MqttBorker_BrokerTag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MqttBorker.BrokerTag)
  GOOGLE_DCHECK_NE(&from, this);
  const MqttBorker_BrokerTag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MqttBorker_BrokerTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MqttBorker.BrokerTag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MqttBorker.BrokerTag)
    MergeFrom(*source);
  }
}

void MqttBorker_BrokerTag::MergeFrom(const MqttBorker_BrokerTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MqttBorker.BrokerTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tagname().size() > 0) {

    tagname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tagname_);
  }
  if (from.topicname().size() > 0) {

    topicname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicname_);
  }
  if (from.systemname().size() > 0) {

    systemname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.systemname_);
  }
  if (from.mqttvartype() != 0) {
    _internal_set_mqttvartype(from._internal_mqttvartype());
  }
  if (from.onoff() != 0) {
    _internal_set_onoff(from._internal_onoff());
  }
  if (from.timer() != 0) {
    _internal_set_timer(from._internal_timer());
  }
}

void MqttBorker_BrokerTag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MqttBorker.BrokerTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MqttBorker_BrokerTag::CopyFrom(const MqttBorker_BrokerTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MqttBorker.BrokerTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MqttBorker_BrokerTag::IsInitialized() const {
  return true;
}

void MqttBorker_BrokerTag::InternalSwap(MqttBorker_BrokerTag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tagname_.Swap(&other->tagname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topicname_.Swap(&other->topicname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  systemname_.Swap(&other->systemname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mqttvartype_, other->mqttvartype_);
  swap(onoff_, other->onoff_);
  swap(timer_, other->timer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MqttBorker_BrokerTag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MqttBorker_BrokerClient_ClientTopic::InitAsDefaultInstance() {
}
class MqttBorker_BrokerClient_ClientTopic::_Internal {
 public:
};

MqttBorker_BrokerClient_ClientTopic::MqttBorker_BrokerClient_ClientTopic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MqttBorker.BrokerClient.ClientTopic)
}
MqttBorker_BrokerClient_ClientTopic::MqttBorker_BrokerClient_ClientTopic(const MqttBorker_BrokerClient_ClientTopic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clienttopic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clienttopic().empty()) {
    clienttopic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clienttopic_);
  }
  topicname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topicname().empty()) {
    topicname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicname_);
  }
  ::memcpy(&qos_, &from.qos_,
    static_cast<size_t>(reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&qos_)) + sizeof(private__));
  // @@protoc_insertion_point(copy_constructor:MqttBorker.BrokerClient.ClientTopic)
}

void MqttBorker_BrokerClient_ClientTopic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MqttBorker_BrokerClient_ClientTopic_mqtt_2eproto.base);
  clienttopic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topicname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&qos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&private__) -
      reinterpret_cast<char*>(&qos_)) + sizeof(private__));
}

MqttBorker_BrokerClient_ClientTopic::~MqttBorker_BrokerClient_ClientTopic() {
  // @@protoc_insertion_point(destructor:MqttBorker.BrokerClient.ClientTopic)
  SharedDtor();
}

void MqttBorker_BrokerClient_ClientTopic::SharedDtor() {
  clienttopic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topicname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MqttBorker_BrokerClient_ClientTopic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MqttBorker_BrokerClient_ClientTopic& MqttBorker_BrokerClient_ClientTopic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MqttBorker_BrokerClient_ClientTopic_mqtt_2eproto.base);
  return *internal_default_instance();
}


void MqttBorker_BrokerClient_ClientTopic::Clear() {
// @@protoc_insertion_point(message_clear_start:MqttBorker.BrokerClient.ClientTopic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clienttopic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topicname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&qos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&private__) -
      reinterpret_cast<char*>(&qos_)) + sizeof(private__));
  _internal_metadata_.Clear();
}

const char* MqttBorker_BrokerClient_ClientTopic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string clientTopic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clienttopic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttBorker.BrokerClient.ClientTopic.clientTopic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topicName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_topicname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttBorker.BrokerClient.ClientTopic.topicName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Qos qos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_qos(static_cast<::Qos>(val));
        } else goto handle_unusual;
        continue;
      // bool retain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          retain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool private = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MqttBorker_BrokerClient_ClientTopic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MqttBorker.BrokerClient.ClientTopic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientTopic = 1;
  if (this->clienttopic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clienttopic().data(), static_cast<int>(this->_internal_clienttopic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttBorker.BrokerClient.ClientTopic.clientTopic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clienttopic(), target);
  }

  // string topicName = 2;
  if (this->topicname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topicname().data(), static_cast<int>(this->_internal_topicname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttBorker.BrokerClient.ClientTopic.topicName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_topicname(), target);
  }

  // .Qos qos = 3;
  if (this->qos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_qos(), target);
  }

  // bool retain = 4;
  if (this->retain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_retain(), target);
  }

  // bool private = 5;
  if (this->private_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_private_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MqttBorker.BrokerClient.ClientTopic)
  return target;
}

size_t MqttBorker_BrokerClient_ClientTopic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MqttBorker.BrokerClient.ClientTopic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientTopic = 1;
  if (this->clienttopic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clienttopic());
  }

  // string topicName = 2;
  if (this->topicname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topicname());
  }

  // .Qos qos = 3;
  if (this->qos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_qos());
  }

  // bool retain = 4;
  if (this->retain() != 0) {
    total_size += 1 + 1;
  }

  // bool private = 5;
  if (this->private_() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MqttBorker_BrokerClient_ClientTopic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MqttBorker.BrokerClient.ClientTopic)
  GOOGLE_DCHECK_NE(&from, this);
  const MqttBorker_BrokerClient_ClientTopic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MqttBorker_BrokerClient_ClientTopic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MqttBorker.BrokerClient.ClientTopic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MqttBorker.BrokerClient.ClientTopic)
    MergeFrom(*source);
  }
}

void MqttBorker_BrokerClient_ClientTopic::MergeFrom(const MqttBorker_BrokerClient_ClientTopic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MqttBorker.BrokerClient.ClientTopic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clienttopic().size() > 0) {

    clienttopic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clienttopic_);
  }
  if (from.topicname().size() > 0) {

    topicname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicname_);
  }
  if (from.qos() != 0) {
    _internal_set_qos(from._internal_qos());
  }
  if (from.retain() != 0) {
    _internal_set_retain(from._internal_retain());
  }
  if (from.private_() != 0) {
    _internal_set_private_(from._internal_private_());
  }
}

void MqttBorker_BrokerClient_ClientTopic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MqttBorker.BrokerClient.ClientTopic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MqttBorker_BrokerClient_ClientTopic::CopyFrom(const MqttBorker_BrokerClient_ClientTopic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MqttBorker.BrokerClient.ClientTopic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MqttBorker_BrokerClient_ClientTopic::IsInitialized() const {
  return true;
}

void MqttBorker_BrokerClient_ClientTopic::InternalSwap(MqttBorker_BrokerClient_ClientTopic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clienttopic_.Swap(&other->clienttopic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topicname_.Swap(&other->topicname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(qos_, other->qos_);
  swap(retain_, other->retain_);
  swap(private__, other->private__);
}

::PROTOBUF_NAMESPACE_ID::Metadata MqttBorker_BrokerClient_ClientTopic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MqttBorker_BrokerClient::InitAsDefaultInstance() {
}
class MqttBorker_BrokerClient::_Internal {
 public:
};

MqttBorker_BrokerClient::MqttBorker_BrokerClient()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MqttBorker.BrokerClient)
}
MqttBorker_BrokerClient::MqttBorker_BrokerClient(const MqttBorker_BrokerClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      clienttopic_(from.clienttopic_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brokerclientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brokerclientname().empty()) {
    brokerclientname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brokerclientname_);
  }
  brokerclientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brokerclientid().empty()) {
    brokerclientid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brokerclientid_);
  }
  ::memcpy(&qos_, &from.qos_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientactions_) -
    reinterpret_cast<char*>(&qos_)) + sizeof(clientactions_));
  // @@protoc_insertion_point(copy_constructor:MqttBorker.BrokerClient)
}

void MqttBorker_BrokerClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MqttBorker_BrokerClient_mqtt_2eproto.base);
  brokerclientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brokerclientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&qos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientactions_) -
      reinterpret_cast<char*>(&qos_)) + sizeof(clientactions_));
}

MqttBorker_BrokerClient::~MqttBorker_BrokerClient() {
  // @@protoc_insertion_point(destructor:MqttBorker.BrokerClient)
  SharedDtor();
}

void MqttBorker_BrokerClient::SharedDtor() {
  brokerclientname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brokerclientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MqttBorker_BrokerClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MqttBorker_BrokerClient& MqttBorker_BrokerClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MqttBorker_BrokerClient_mqtt_2eproto.base);
  return *internal_default_instance();
}


void MqttBorker_BrokerClient::Clear() {
// @@protoc_insertion_point(message_clear_start:MqttBorker.BrokerClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clienttopic_.Clear();
  brokerclientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brokerclientid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&qos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientactions_) -
      reinterpret_cast<char*>(&qos_)) + sizeof(clientactions_));
  _internal_metadata_.Clear();
}

const char* MqttBorker_BrokerClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string brokerClientName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_brokerclientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttBorker.BrokerClient.brokerClientName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string brokerClientID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_brokerclientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttBorker.BrokerClient.brokerClientID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Qos qos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_qos(static_cast<::Qos>(val));
        } else goto handle_unusual;
        continue;
      // .ClientActions clientActions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_clientactions(static_cast<::ClientActions>(val));
        } else goto handle_unusual;
        continue;
      // repeated .MqttBorker.BrokerClient.ClientTopic clientTopic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clienttopic(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MqttBorker_BrokerClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MqttBorker.BrokerClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string brokerClientName = 1;
  if (this->brokerclientname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brokerclientname().data(), static_cast<int>(this->_internal_brokerclientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttBorker.BrokerClient.brokerClientName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_brokerclientname(), target);
  }

  // string brokerClientID = 2;
  if (this->brokerclientid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brokerclientid().data(), static_cast<int>(this->_internal_brokerclientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttBorker.BrokerClient.brokerClientID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_brokerclientid(), target);
  }

  // .Qos qos = 3;
  if (this->qos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_qos(), target);
  }

  // .ClientActions clientActions = 4;
  if (this->clientactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_clientactions(), target);
  }

  // repeated .MqttBorker.BrokerClient.ClientTopic clientTopic = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clienttopic_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_clienttopic(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MqttBorker.BrokerClient)
  return target;
}

size_t MqttBorker_BrokerClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MqttBorker.BrokerClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MqttBorker.BrokerClient.ClientTopic clientTopic = 5;
  total_size += 1UL * this->_internal_clienttopic_size();
  for (const auto& msg : this->clienttopic_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string brokerClientName = 1;
  if (this->brokerclientname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brokerclientname());
  }

  // string brokerClientID = 2;
  if (this->brokerclientid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brokerclientid());
  }

  // .Qos qos = 3;
  if (this->qos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_qos());
  }

  // .ClientActions clientActions = 4;
  if (this->clientactions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clientactions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MqttBorker_BrokerClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MqttBorker.BrokerClient)
  GOOGLE_DCHECK_NE(&from, this);
  const MqttBorker_BrokerClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MqttBorker_BrokerClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MqttBorker.BrokerClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MqttBorker.BrokerClient)
    MergeFrom(*source);
  }
}

void MqttBorker_BrokerClient::MergeFrom(const MqttBorker_BrokerClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MqttBorker.BrokerClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clienttopic_.MergeFrom(from.clienttopic_);
  if (from.brokerclientname().size() > 0) {

    brokerclientname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brokerclientname_);
  }
  if (from.brokerclientid().size() > 0) {

    brokerclientid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brokerclientid_);
  }
  if (from.qos() != 0) {
    _internal_set_qos(from._internal_qos());
  }
  if (from.clientactions() != 0) {
    _internal_set_clientactions(from._internal_clientactions());
  }
}

void MqttBorker_BrokerClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MqttBorker.BrokerClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MqttBorker_BrokerClient::CopyFrom(const MqttBorker_BrokerClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MqttBorker.BrokerClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MqttBorker_BrokerClient::IsInitialized() const {
  return true;
}

void MqttBorker_BrokerClient::InternalSwap(MqttBorker_BrokerClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clienttopic_.InternalSwap(&other->clienttopic_);
  brokerclientname_.Swap(&other->brokerclientname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  brokerclientid_.Swap(&other->brokerclientid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(qos_, other->qos_);
  swap(clientactions_, other->clientactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MqttBorker_BrokerClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MqttBorker::InitAsDefaultInstance() {
}
class MqttBorker::_Internal {
 public:
};

MqttBorker::MqttBorker()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MqttBorker)
}
MqttBorker::MqttBorker(const MqttBorker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      brokerclient_(from.brokerclient_),
      brokertag_(from.brokertag_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientname().empty()) {
    clientname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  hostaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostaddress().empty()) {
    hostaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostaddress_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userpassword().empty()) {
    userpassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userpassword_);
  }
  ::memcpy(&protocol_, &from.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&wildcardsub_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(wildcardsub_));
  // @@protoc_insertion_point(copy_constructor:MqttBorker)
}

void MqttBorker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MqttBorker_mqtt_2eproto.base);
  clientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wildcardsub_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(wildcardsub_));
}

MqttBorker::~MqttBorker() {
  // @@protoc_insertion_point(destructor:MqttBorker)
  SharedDtor();
}

void MqttBorker::SharedDtor() {
  clientname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MqttBorker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MqttBorker& MqttBorker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MqttBorker_mqtt_2eproto.base);
  return *internal_default_instance();
}


void MqttBorker::Clear() {
// @@protoc_insertion_point(message_clear_start:MqttBorker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brokerclient_.Clear();
  brokertag_.Clear();
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wildcardsub_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(wildcardsub_));
  _internal_metadata_.Clear();
}

const char* MqttBorker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string clientName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttBorker.clientName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttBorker.clientID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol protocol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::Protocol>(val));
        } else goto handle_unusual;
        continue;
      // string hostAddress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hostaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttBorker.hostAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hostPort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hostport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttBorker.userName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userPassword = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_userpassword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MqttBorker.userPassword"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxCient = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          maxcient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxLenght = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          maxlenght_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Qos brokerQos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_brokerqos(static_cast<::Qos>(val));
        } else goto handle_unusual;
        continue;
      // int32 maxQueLeght = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          maxqueleght_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 retainMessage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          retainmessage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sendTimestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sendtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keepAlive = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          keepalive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 keepAliveTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          keepalivetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mqtt31Compatilble = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          mqtt31compatilble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool retainWill = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          retainwill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool wildcardSub = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          wildcardsub_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MqttBorker.BrokerClient brokerClient = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_brokerclient(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .MqttBorker.BrokerTag brokerTag = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_brokertag(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MqttBorker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MqttBorker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientName = 1;
  if (this->clientname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientname().data(), static_cast<int>(this->_internal_clientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttBorker.clientName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientname(), target);
  }

  // string clientID = 2;
  if (this->clientid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttBorker.clientID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientid(), target);
  }

  // .Protocol protocol = 3;
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_protocol(), target);
  }

  // string hostAddress = 4;
  if (this->hostaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostaddress().data(), static_cast<int>(this->_internal_hostaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttBorker.hostAddress");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostaddress(), target);
  }

  // int32 hostPort = 5;
  if (this->hostport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_hostport(), target);
  }

  // string userName = 6;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttBorker.userName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_username(), target);
  }

  // string userPassword = 7;
  if (this->userpassword().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userpassword().data(), static_cast<int>(this->_internal_userpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MqttBorker.userPassword");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_userpassword(), target);
  }

  // int32 maxCient = 8;
  if (this->maxcient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_maxcient(), target);
  }

  // int32 maxLenght = 9;
  if (this->maxlenght() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_maxlenght(), target);
  }

  // .Qos brokerQos = 10;
  if (this->brokerqos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_brokerqos(), target);
  }

  // int32 maxQueLeght = 11;
  if (this->maxqueleght() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_maxqueleght(), target);
  }

  // int32 retainMessage = 12;
  if (this->retainmessage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_retainmessage(), target);
  }

  // bool sendTimestamp = 13;
  if (this->sendtimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_sendtimestamp(), target);
  }

  // bool keepAlive = 14;
  if (this->keepalive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_keepalive(), target);
  }

  // int32 keepAliveTime = 15;
  if (this->keepalivetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_keepalivetime(), target);
  }

  // bool mqtt31Compatilble = 16;
  if (this->mqtt31compatilble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_mqtt31compatilble(), target);
  }

  // bool retainWill = 17;
  if (this->retainwill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_retainwill(), target);
  }

  // bool wildcardSub = 18;
  if (this->wildcardsub() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_wildcardsub(), target);
  }

  // repeated .MqttBorker.BrokerClient brokerClient = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_brokerclient_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_brokerclient(i), target, stream);
  }

  // repeated .MqttBorker.BrokerTag brokerTag = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_brokertag_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_brokertag(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MqttBorker)
  return target;
}

size_t MqttBorker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MqttBorker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MqttBorker.BrokerClient brokerClient = 19;
  total_size += 2UL * this->_internal_brokerclient_size();
  for (const auto& msg : this->brokerclient_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MqttBorker.BrokerTag brokerTag = 20;
  total_size += 2UL * this->_internal_brokertag_size();
  for (const auto& msg : this->brokertag_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string clientName = 1;
  if (this->clientname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientname());
  }

  // string clientID = 2;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string hostAddress = 4;
  if (this->hostaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostaddress());
  }

  // string userName = 6;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string userPassword = 7;
  if (this->userpassword().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userpassword());
  }

  // .Protocol protocol = 3;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // int32 hostPort = 5;
  if (this->hostport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hostport());
  }

  // int32 maxCient = 8;
  if (this->maxcient() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxcient());
  }

  // int32 maxLenght = 9;
  if (this->maxlenght() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxlenght());
  }

  // .Qos brokerQos = 10;
  if (this->brokerqos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brokerqos());
  }

  // int32 maxQueLeght = 11;
  if (this->maxqueleght() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxqueleght());
  }

  // int32 retainMessage = 12;
  if (this->retainmessage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retainmessage());
  }

  // int32 keepAliveTime = 15;
  if (this->keepalivetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keepalivetime());
  }

  // bool sendTimestamp = 13;
  if (this->sendtimestamp() != 0) {
    total_size += 1 + 1;
  }

  // bool keepAlive = 14;
  if (this->keepalive() != 0) {
    total_size += 1 + 1;
  }

  // bool mqtt31Compatilble = 16;
  if (this->mqtt31compatilble() != 0) {
    total_size += 2 + 1;
  }

  // bool retainWill = 17;
  if (this->retainwill() != 0) {
    total_size += 2 + 1;
  }

  // bool wildcardSub = 18;
  if (this->wildcardsub() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MqttBorker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MqttBorker)
  GOOGLE_DCHECK_NE(&from, this);
  const MqttBorker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MqttBorker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MqttBorker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MqttBorker)
    MergeFrom(*source);
  }
}

void MqttBorker::MergeFrom(const MqttBorker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MqttBorker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  brokerclient_.MergeFrom(from.brokerclient_);
  brokertag_.MergeFrom(from.brokertag_);
  if (from.clientname().size() > 0) {

    clientname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.clientid().size() > 0) {

    clientid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.hostaddress().size() > 0) {

    hostaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostaddress_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.userpassword().size() > 0) {

    userpassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userpassword_);
  }
  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.hostport() != 0) {
    _internal_set_hostport(from._internal_hostport());
  }
  if (from.maxcient() != 0) {
    _internal_set_maxcient(from._internal_maxcient());
  }
  if (from.maxlenght() != 0) {
    _internal_set_maxlenght(from._internal_maxlenght());
  }
  if (from.brokerqos() != 0) {
    _internal_set_brokerqos(from._internal_brokerqos());
  }
  if (from.maxqueleght() != 0) {
    _internal_set_maxqueleght(from._internal_maxqueleght());
  }
  if (from.retainmessage() != 0) {
    _internal_set_retainmessage(from._internal_retainmessage());
  }
  if (from.keepalivetime() != 0) {
    _internal_set_keepalivetime(from._internal_keepalivetime());
  }
  if (from.sendtimestamp() != 0) {
    _internal_set_sendtimestamp(from._internal_sendtimestamp());
  }
  if (from.keepalive() != 0) {
    _internal_set_keepalive(from._internal_keepalive());
  }
  if (from.mqtt31compatilble() != 0) {
    _internal_set_mqtt31compatilble(from._internal_mqtt31compatilble());
  }
  if (from.retainwill() != 0) {
    _internal_set_retainwill(from._internal_retainwill());
  }
  if (from.wildcardsub() != 0) {
    _internal_set_wildcardsub(from._internal_wildcardsub());
  }
}

void MqttBorker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MqttBorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MqttBorker::CopyFrom(const MqttBorker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MqttBorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MqttBorker::IsInitialized() const {
  return true;
}

void MqttBorker::InternalSwap(MqttBorker* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  brokerclient_.InternalSwap(&other->brokerclient_);
  brokertag_.InternalSwap(&other->brokertag_);
  clientname_.Swap(&other->clientname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientid_.Swap(&other->clientid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostaddress_.Swap(&other->hostaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userpassword_.Swap(&other->userpassword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(protocol_, other->protocol_);
  swap(hostport_, other->hostport_);
  swap(maxcient_, other->maxcient_);
  swap(maxlenght_, other->maxlenght_);
  swap(brokerqos_, other->brokerqos_);
  swap(maxqueleght_, other->maxqueleght_);
  swap(retainmessage_, other->retainmessage_);
  swap(keepalivetime_, other->keepalivetime_);
  swap(sendtimestamp_, other->sendtimestamp_);
  swap(keepalive_, other->keepalive_);
  swap(mqtt31compatilble_, other->mqtt31compatilble_);
  swap(retainwill_, other->retainwill_);
  swap(wildcardsub_, other->wildcardsub_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MqttBorker::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ConfigResponse* Arena::CreateMaybeMessage< ::ConfigResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MqttClients_MqttClient_ClientTag* Arena::CreateMaybeMessage< ::MqttClients_MqttClient_ClientTag >(Arena* arena) {
  return Arena::CreateInternal< ::MqttClients_MqttClient_ClientTag >(arena);
}
template<> PROTOBUF_NOINLINE ::MqttClients_MqttClient_Business* Arena::CreateMaybeMessage< ::MqttClients_MqttClient_Business >(Arena* arena) {
  return Arena::CreateInternal< ::MqttClients_MqttClient_Business >(arena);
}
template<> PROTOBUF_NOINLINE ::MqttClients_MqttClient* Arena::CreateMaybeMessage< ::MqttClients_MqttClient >(Arena* arena) {
  return Arena::CreateInternal< ::MqttClients_MqttClient >(arena);
}
template<> PROTOBUF_NOINLINE ::MqttClients* Arena::CreateMaybeMessage< ::MqttClients >(Arena* arena) {
  return Arena::CreateInternal< ::MqttClients >(arena);
}
template<> PROTOBUF_NOINLINE ::MqttBorker_BrokerTag* Arena::CreateMaybeMessage< ::MqttBorker_BrokerTag >(Arena* arena) {
  return Arena::CreateInternal< ::MqttBorker_BrokerTag >(arena);
}
template<> PROTOBUF_NOINLINE ::MqttBorker_BrokerClient_ClientTopic* Arena::CreateMaybeMessage< ::MqttBorker_BrokerClient_ClientTopic >(Arena* arena) {
  return Arena::CreateInternal< ::MqttBorker_BrokerClient_ClientTopic >(arena);
}
template<> PROTOBUF_NOINLINE ::MqttBorker_BrokerClient* Arena::CreateMaybeMessage< ::MqttBorker_BrokerClient >(Arena* arena) {
  return Arena::CreateInternal< ::MqttBorker_BrokerClient >(arena);
}
template<> PROTOBUF_NOINLINE ::MqttBorker* Arena::CreateMaybeMessage< ::MqttBorker >(Arena* arena) {
  return Arena::CreateInternal< ::MqttBorker >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
