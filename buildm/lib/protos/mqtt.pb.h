// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mqtt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mqtt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mqtt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mqtt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mqtt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mqtt_2eproto;
class ConfigResponse;
class ConfigResponseDefaultTypeInternal;
extern ConfigResponseDefaultTypeInternal _ConfigResponse_default_instance_;
class MqttBorker;
class MqttBorkerDefaultTypeInternal;
extern MqttBorkerDefaultTypeInternal _MqttBorker_default_instance_;
class MqttBorker_BrokerClient;
class MqttBorker_BrokerClientDefaultTypeInternal;
extern MqttBorker_BrokerClientDefaultTypeInternal _MqttBorker_BrokerClient_default_instance_;
class MqttBorker_BrokerClient_ClientTopic;
class MqttBorker_BrokerClient_ClientTopicDefaultTypeInternal;
extern MqttBorker_BrokerClient_ClientTopicDefaultTypeInternal _MqttBorker_BrokerClient_ClientTopic_default_instance_;
class MqttBorker_BrokerTag;
class MqttBorker_BrokerTagDefaultTypeInternal;
extern MqttBorker_BrokerTagDefaultTypeInternal _MqttBorker_BrokerTag_default_instance_;
class MqttClients;
class MqttClientsDefaultTypeInternal;
extern MqttClientsDefaultTypeInternal _MqttClients_default_instance_;
class MqttClients_MqttClient;
class MqttClients_MqttClientDefaultTypeInternal;
extern MqttClients_MqttClientDefaultTypeInternal _MqttClients_MqttClient_default_instance_;
class MqttClients_MqttClient_Business;
class MqttClients_MqttClient_BusinessDefaultTypeInternal;
extern MqttClients_MqttClient_BusinessDefaultTypeInternal _MqttClients_MqttClient_Business_default_instance_;
class MqttClients_MqttClient_ClientTag;
class MqttClients_MqttClient_ClientTagDefaultTypeInternal;
extern MqttClients_MqttClient_ClientTagDefaultTypeInternal _MqttClients_MqttClient_ClientTag_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConfigResponse* Arena::CreateMaybeMessage<::ConfigResponse>(Arena*);
template<> ::MqttBorker* Arena::CreateMaybeMessage<::MqttBorker>(Arena*);
template<> ::MqttBorker_BrokerClient* Arena::CreateMaybeMessage<::MqttBorker_BrokerClient>(Arena*);
template<> ::MqttBorker_BrokerClient_ClientTopic* Arena::CreateMaybeMessage<::MqttBorker_BrokerClient_ClientTopic>(Arena*);
template<> ::MqttBorker_BrokerTag* Arena::CreateMaybeMessage<::MqttBorker_BrokerTag>(Arena*);
template<> ::MqttClients* Arena::CreateMaybeMessage<::MqttClients>(Arena*);
template<> ::MqttClients_MqttClient* Arena::CreateMaybeMessage<::MqttClients_MqttClient>(Arena*);
template<> ::MqttClients_MqttClient_Business* Arena::CreateMaybeMessage<::MqttClients_MqttClient_Business>(Arena*);
template<> ::MqttClients_MqttClient_ClientTag* Arena::CreateMaybeMessage<::MqttClients_MqttClient_ClientTag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Qos : int {
  ALMOST_ONCE = 0,
  ATLEAST_ONCE = 1,
  EXACTLY_ONCE = 2,
  ALL = 3,
  Qos_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Qos_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Qos_IsValid(int value);
constexpr Qos Qos_MIN = ALMOST_ONCE;
constexpr Qos Qos_MAX = ALL;
constexpr int Qos_ARRAYSIZE = Qos_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Qos_descriptor();
template<typename T>
inline const std::string& Qos_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Qos>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Qos_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Qos_descriptor(), enum_t_value);
}
inline bool Qos_Parse(
    const std::string& name, Qos* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Qos>(
    Qos_descriptor(), name, value);
}
enum Protocol : int {
  WS = 0,
  WSS = 1,
  MQTTTCP = 2,
  MQTTTTLS = 3,
  Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Protocol_IsValid(int value);
constexpr Protocol Protocol_MIN = WS;
constexpr Protocol Protocol_MAX = MQTTTTLS;
constexpr int Protocol_ARRAYSIZE = Protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor();
template<typename T>
inline const std::string& Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Protocol_descriptor(), enum_t_value);
}
inline bool Protocol_Parse(
    const std::string& name, Protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Protocol>(
    Protocol_descriptor(), name, value);
}
enum MqttVarType : int {
  PLAIN = 0,
  JSON = 1,
  CSV = 2,
  MqttVarType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MqttVarType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MqttVarType_IsValid(int value);
constexpr MqttVarType MqttVarType_MIN = PLAIN;
constexpr MqttVarType MqttVarType_MAX = CSV;
constexpr int MqttVarType_ARRAYSIZE = MqttVarType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MqttVarType_descriptor();
template<typename T>
inline const std::string& MqttVarType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MqttVarType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MqttVarType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MqttVarType_descriptor(), enum_t_value);
}
inline bool MqttVarType_Parse(
    const std::string& name, MqttVarType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MqttVarType>(
    MqttVarType_descriptor(), name, value);
}
enum ClientActions : int {
  PUB = 0,
  SUB = 1,
  PUB_SUB = 2,
  ClientActions_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientActions_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientActions_IsValid(int value);
constexpr ClientActions ClientActions_MIN = PUB;
constexpr ClientActions ClientActions_MAX = PUB_SUB;
constexpr int ClientActions_ARRAYSIZE = ClientActions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientActions_descriptor();
template<typename T>
inline const std::string& ClientActions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientActions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientActions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientActions_descriptor(), enum_t_value);
}
inline bool ClientActions_Parse(
    const std::string& name, ClientActions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientActions>(
    ClientActions_descriptor(), name, value);
}
// ===================================================================

class ConfigResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigResponse) */ {
 public:
  ConfigResponse();
  virtual ~ConfigResponse();

  ConfigResponse(const ConfigResponse& from);
  ConfigResponse(ConfigResponse&& from) noexcept
    : ConfigResponse() {
    *this = ::std::move(from);
  }

  inline ConfigResponse& operator=(const ConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigResponse& operator=(ConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigResponse* internal_default_instance() {
    return reinterpret_cast<const ConfigResponse*>(
               &_ConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigResponse& a, ConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigResponse* New() const final {
    return CreateMaybeMessage<ConfigResponse>(nullptr);
  }

  ConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigResponse& from);
  void MergeFrom(const ConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mqtt_2eproto);
    return ::descriptor_table_mqtt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDescFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // string errorDesc = 3;
  void clear_errordesc();
  const std::string& errordesc() const;
  void set_errordesc(const std::string& value);
  void set_errordesc(std::string&& value);
  void set_errordesc(const char* value);
  void set_errordesc(const char* value, size_t size);
  std::string* mutable_errordesc();
  std::string* release_errordesc();
  void set_allocated_errordesc(std::string* errordesc);
  private:
  const std::string& _internal_errordesc() const;
  void _internal_set_errordesc(const std::string& value);
  std::string* _internal_mutable_errordesc();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 errorCode = 2;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ConfigResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordesc_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqtt_2eproto;
};
// -------------------------------------------------------------------

class MqttClients_MqttClient_ClientTag :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MqttClients.MqttClient.ClientTag) */ {
 public:
  MqttClients_MqttClient_ClientTag();
  virtual ~MqttClients_MqttClient_ClientTag();

  MqttClients_MqttClient_ClientTag(const MqttClients_MqttClient_ClientTag& from);
  MqttClients_MqttClient_ClientTag(MqttClients_MqttClient_ClientTag&& from) noexcept
    : MqttClients_MqttClient_ClientTag() {
    *this = ::std::move(from);
  }

  inline MqttClients_MqttClient_ClientTag& operator=(const MqttClients_MqttClient_ClientTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline MqttClients_MqttClient_ClientTag& operator=(MqttClients_MqttClient_ClientTag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MqttClients_MqttClient_ClientTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MqttClients_MqttClient_ClientTag* internal_default_instance() {
    return reinterpret_cast<const MqttClients_MqttClient_ClientTag*>(
               &_MqttClients_MqttClient_ClientTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MqttClients_MqttClient_ClientTag& a, MqttClients_MqttClient_ClientTag& b) {
    a.Swap(&b);
  }
  inline void Swap(MqttClients_MqttClient_ClientTag* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MqttClients_MqttClient_ClientTag* New() const final {
    return CreateMaybeMessage<MqttClients_MqttClient_ClientTag>(nullptr);
  }

  MqttClients_MqttClient_ClientTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MqttClients_MqttClient_ClientTag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MqttClients_MqttClient_ClientTag& from);
  void MergeFrom(const MqttClients_MqttClient_ClientTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttClients_MqttClient_ClientTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MqttClients.MqttClient.ClientTag";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mqtt_2eproto);
    return ::descriptor_table_mqtt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagNameFieldNumber = 1,
    kTopicNameFieldNumber = 2,
    kSystemNameFieldNumber = 5,
    kMqttVarTypeFieldNumber = 3,
    kOnOffFieldNumber = 4,
    kClientActionsFieldNumber = 6,
  };
  // string tagName = 1;
  void clear_tagname();
  const std::string& tagname() const;
  void set_tagname(const std::string& value);
  void set_tagname(std::string&& value);
  void set_tagname(const char* value);
  void set_tagname(const char* value, size_t size);
  std::string* mutable_tagname();
  std::string* release_tagname();
  void set_allocated_tagname(std::string* tagname);
  private:
  const std::string& _internal_tagname() const;
  void _internal_set_tagname(const std::string& value);
  std::string* _internal_mutable_tagname();
  public:

  // string topicName = 2;
  void clear_topicname();
  const std::string& topicname() const;
  void set_topicname(const std::string& value);
  void set_topicname(std::string&& value);
  void set_topicname(const char* value);
  void set_topicname(const char* value, size_t size);
  std::string* mutable_topicname();
  std::string* release_topicname();
  void set_allocated_topicname(std::string* topicname);
  private:
  const std::string& _internal_topicname() const;
  void _internal_set_topicname(const std::string& value);
  std::string* _internal_mutable_topicname();
  public:

  // string systemName = 5;
  void clear_systemname();
  const std::string& systemname() const;
  void set_systemname(const std::string& value);
  void set_systemname(std::string&& value);
  void set_systemname(const char* value);
  void set_systemname(const char* value, size_t size);
  std::string* mutable_systemname();
  std::string* release_systemname();
  void set_allocated_systemname(std::string* systemname);
  private:
  const std::string& _internal_systemname() const;
  void _internal_set_systemname(const std::string& value);
  std::string* _internal_mutable_systemname();
  public:

  // .MqttVarType mqttVarType = 3;
  void clear_mqttvartype();
  ::MqttVarType mqttvartype() const;
  void set_mqttvartype(::MqttVarType value);
  private:
  ::MqttVarType _internal_mqttvartype() const;
  void _internal_set_mqttvartype(::MqttVarType value);
  public:

  // bool onOff = 4;
  void clear_onoff();
  bool onoff() const;
  void set_onoff(bool value);
  private:
  bool _internal_onoff() const;
  void _internal_set_onoff(bool value);
  public:

  // .ClientActions clientActions = 6;
  void clear_clientactions();
  ::ClientActions clientactions() const;
  void set_clientactions(::ClientActions value);
  private:
  ::ClientActions _internal_clientactions() const;
  void _internal_set_clientactions(::ClientActions value);
  public:

  // @@protoc_insertion_point(class_scope:MqttClients.MqttClient.ClientTag)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tagname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topicname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr systemname_;
  int mqttvartype_;
  bool onoff_;
  int clientactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqtt_2eproto;
};
// -------------------------------------------------------------------

class MqttClients_MqttClient_Business :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MqttClients.MqttClient.Business) */ {
 public:
  MqttClients_MqttClient_Business();
  virtual ~MqttClients_MqttClient_Business();

  MqttClients_MqttClient_Business(const MqttClients_MqttClient_Business& from);
  MqttClients_MqttClient_Business(MqttClients_MqttClient_Business&& from) noexcept
    : MqttClients_MqttClient_Business() {
    *this = ::std::move(from);
  }

  inline MqttClients_MqttClient_Business& operator=(const MqttClients_MqttClient_Business& from) {
    CopyFrom(from);
    return *this;
  }
  inline MqttClients_MqttClient_Business& operator=(MqttClients_MqttClient_Business&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MqttClients_MqttClient_Business& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MqttClients_MqttClient_Business* internal_default_instance() {
    return reinterpret_cast<const MqttClients_MqttClient_Business*>(
               &_MqttClients_MqttClient_Business_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MqttClients_MqttClient_Business& a, MqttClients_MqttClient_Business& b) {
    a.Swap(&b);
  }
  inline void Swap(MqttClients_MqttClient_Business* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MqttClients_MqttClient_Business* New() const final {
    return CreateMaybeMessage<MqttClients_MqttClient_Business>(nullptr);
  }

  MqttClients_MqttClient_Business* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MqttClients_MqttClient_Business>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MqttClients_MqttClient_Business& from);
  void MergeFrom(const MqttClients_MqttClient_Business& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttClients_MqttClient_Business* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MqttClients.MqttClient.Business";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mqtt_2eproto);
    return ::descriptor_table_mqtt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kTrpersecFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float trpersec = 3;
  void clear_trpersec();
  float trpersec() const;
  void set_trpersec(float value);
  private:
  float _internal_trpersec() const;
  void _internal_set_trpersec(float value);
  public:

  // @@protoc_insertion_point(class_scope:MqttClients.MqttClient.Business)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  float trpersec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqtt_2eproto;
};
// -------------------------------------------------------------------

class MqttClients_MqttClient :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MqttClients.MqttClient) */ {
 public:
  MqttClients_MqttClient();
  virtual ~MqttClients_MqttClient();

  MqttClients_MqttClient(const MqttClients_MqttClient& from);
  MqttClients_MqttClient(MqttClients_MqttClient&& from) noexcept
    : MqttClients_MqttClient() {
    *this = ::std::move(from);
  }

  inline MqttClients_MqttClient& operator=(const MqttClients_MqttClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline MqttClients_MqttClient& operator=(MqttClients_MqttClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MqttClients_MqttClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MqttClients_MqttClient* internal_default_instance() {
    return reinterpret_cast<const MqttClients_MqttClient*>(
               &_MqttClients_MqttClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MqttClients_MqttClient& a, MqttClients_MqttClient& b) {
    a.Swap(&b);
  }
  inline void Swap(MqttClients_MqttClient* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MqttClients_MqttClient* New() const final {
    return CreateMaybeMessage<MqttClients_MqttClient>(nullptr);
  }

  MqttClients_MqttClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MqttClients_MqttClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MqttClients_MqttClient& from);
  void MergeFrom(const MqttClients_MqttClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttClients_MqttClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MqttClients.MqttClient";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mqtt_2eproto);
    return ::descriptor_table_mqtt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MqttClients_MqttClient_ClientTag ClientTag;
  typedef MqttClients_MqttClient_Business Business;

  // accessors -------------------------------------------------------

  enum : int {
    kClientTagFieldNumber = 19,
    kClientNameFieldNumber = 1,
    kClientIDFieldNumber = 2,
    kHostAddressFieldNumber = 4,
    kUserNameFieldNumber = 6,
    kUserPasswordFieldNumber = 7,
    kWillTopicFieldNumber = 10,
    kWillPayLoadFieldNumber = 12,
    kBusinessFieldNumber = 23,
    kProtocolFieldNumber = 3,
    kHostPortFieldNumber = 5,
    kReConnectFieldNumber = 8,
    kTimeOutFieldNumber = 9,
    kWillQosFieldNumber = 11,
    kKeepAliveTimeFieldNumber = 15,
    kSendTimestampFieldNumber = 13,
    kKeepAliveFieldNumber = 14,
    kMqtt31CompatilbleFieldNumber = 16,
    kWillRetainFieldNumber = 17,
    kQosFieldNumber = 20,
    kCleanSessionFieldNumber = 18,
    kRetainFieldNumber = 22,
    kPublishIntervalFieldNumber = 21,
  };
  // repeated .MqttClients.MqttClient.ClientTag clientTag = 19;
  int clienttag_size() const;
  private:
  int _internal_clienttag_size() const;
  public:
  void clear_clienttag();
  ::MqttClients_MqttClient_ClientTag* mutable_clienttag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttClients_MqttClient_ClientTag >*
      mutable_clienttag();
  private:
  const ::MqttClients_MqttClient_ClientTag& _internal_clienttag(int index) const;
  ::MqttClients_MqttClient_ClientTag* _internal_add_clienttag();
  public:
  const ::MqttClients_MqttClient_ClientTag& clienttag(int index) const;
  ::MqttClients_MqttClient_ClientTag* add_clienttag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttClients_MqttClient_ClientTag >&
      clienttag() const;

  // string clientName = 1;
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // string clientID = 2;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // string hostAddress = 4;
  void clear_hostaddress();
  const std::string& hostaddress() const;
  void set_hostaddress(const std::string& value);
  void set_hostaddress(std::string&& value);
  void set_hostaddress(const char* value);
  void set_hostaddress(const char* value, size_t size);
  std::string* mutable_hostaddress();
  std::string* release_hostaddress();
  void set_allocated_hostaddress(std::string* hostaddress);
  private:
  const std::string& _internal_hostaddress() const;
  void _internal_set_hostaddress(const std::string& value);
  std::string* _internal_mutable_hostaddress();
  public:

  // string userName = 6;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string userPassword = 7;
  void clear_userpassword();
  const std::string& userpassword() const;
  void set_userpassword(const std::string& value);
  void set_userpassword(std::string&& value);
  void set_userpassword(const char* value);
  void set_userpassword(const char* value, size_t size);
  std::string* mutable_userpassword();
  std::string* release_userpassword();
  void set_allocated_userpassword(std::string* userpassword);
  private:
  const std::string& _internal_userpassword() const;
  void _internal_set_userpassword(const std::string& value);
  std::string* _internal_mutable_userpassword();
  public:

  // string willTopic = 10;
  void clear_willtopic();
  const std::string& willtopic() const;
  void set_willtopic(const std::string& value);
  void set_willtopic(std::string&& value);
  void set_willtopic(const char* value);
  void set_willtopic(const char* value, size_t size);
  std::string* mutable_willtopic();
  std::string* release_willtopic();
  void set_allocated_willtopic(std::string* willtopic);
  private:
  const std::string& _internal_willtopic() const;
  void _internal_set_willtopic(const std::string& value);
  std::string* _internal_mutable_willtopic();
  public:

  // string willPayLoad = 12;
  void clear_willpayload();
  const std::string& willpayload() const;
  void set_willpayload(const std::string& value);
  void set_willpayload(std::string&& value);
  void set_willpayload(const char* value);
  void set_willpayload(const char* value, size_t size);
  std::string* mutable_willpayload();
  std::string* release_willpayload();
  void set_allocated_willpayload(std::string* willpayload);
  private:
  const std::string& _internal_willpayload() const;
  void _internal_set_willpayload(const std::string& value);
  std::string* _internal_mutable_willpayload();
  public:

  // .MqttClients.MqttClient.Business business = 23;
  bool has_business() const;
  private:
  bool _internal_has_business() const;
  public:
  void clear_business();
  const ::MqttClients_MqttClient_Business& business() const;
  ::MqttClients_MqttClient_Business* release_business();
  ::MqttClients_MqttClient_Business* mutable_business();
  void set_allocated_business(::MqttClients_MqttClient_Business* business);
  private:
  const ::MqttClients_MqttClient_Business& _internal_business() const;
  ::MqttClients_MqttClient_Business* _internal_mutable_business();
  public:

  // .Protocol protocol = 3;
  void clear_protocol();
  ::Protocol protocol() const;
  void set_protocol(::Protocol value);
  private:
  ::Protocol _internal_protocol() const;
  void _internal_set_protocol(::Protocol value);
  public:

  // int32 hostPort = 5;
  void clear_hostport();
  ::PROTOBUF_NAMESPACE_ID::int32 hostport() const;
  void set_hostport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hostport() const;
  void _internal_set_hostport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reConnect = 8;
  void clear_reconnect();
  ::PROTOBUF_NAMESPACE_ID::int32 reconnect() const;
  void set_reconnect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reconnect() const;
  void _internal_set_reconnect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeOut = 9;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Qos willQos = 11;
  void clear_willqos();
  ::Qos willqos() const;
  void set_willqos(::Qos value);
  private:
  ::Qos _internal_willqos() const;
  void _internal_set_willqos(::Qos value);
  public:

  // int32 keepAliveTime = 15;
  void clear_keepalivetime();
  ::PROTOBUF_NAMESPACE_ID::int32 keepalivetime() const;
  void set_keepalivetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keepalivetime() const;
  void _internal_set_keepalivetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool sendTimestamp = 13;
  void clear_sendtimestamp();
  bool sendtimestamp() const;
  void set_sendtimestamp(bool value);
  private:
  bool _internal_sendtimestamp() const;
  void _internal_set_sendtimestamp(bool value);
  public:

  // bool keepAlive = 14;
  void clear_keepalive();
  bool keepalive() const;
  void set_keepalive(bool value);
  private:
  bool _internal_keepalive() const;
  void _internal_set_keepalive(bool value);
  public:

  // bool mqtt31Compatilble = 16;
  void clear_mqtt31compatilble();
  bool mqtt31compatilble() const;
  void set_mqtt31compatilble(bool value);
  private:
  bool _internal_mqtt31compatilble() const;
  void _internal_set_mqtt31compatilble(bool value);
  public:

  // bool willRetain = 17;
  void clear_willretain();
  bool willretain() const;
  void set_willretain(bool value);
  private:
  bool _internal_willretain() const;
  void _internal_set_willretain(bool value);
  public:

  // .Qos qos = 20;
  void clear_qos();
  ::Qos qos() const;
  void set_qos(::Qos value);
  private:
  ::Qos _internal_qos() const;
  void _internal_set_qos(::Qos value);
  public:

  // bool cleanSession = 18;
  void clear_cleansession();
  bool cleansession() const;
  void set_cleansession(bool value);
  private:
  bool _internal_cleansession() const;
  void _internal_set_cleansession(bool value);
  public:

  // bool retain = 22;
  void clear_retain();
  bool retain() const;
  void set_retain(bool value);
  private:
  bool _internal_retain() const;
  void _internal_set_retain(bool value);
  public:

  // int32 publishInterval = 21;
  void clear_publishinterval();
  ::PROTOBUF_NAMESPACE_ID::int32 publishinterval() const;
  void set_publishinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_publishinterval() const;
  void _internal_set_publishinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MqttClients.MqttClient)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttClients_MqttClient_ClientTag > clienttag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userpassword_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr willtopic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr willpayload_;
  ::MqttClients_MqttClient_Business* business_;
  int protocol_;
  ::PROTOBUF_NAMESPACE_ID::int32 hostport_;
  ::PROTOBUF_NAMESPACE_ID::int32 reconnect_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_;
  int willqos_;
  ::PROTOBUF_NAMESPACE_ID::int32 keepalivetime_;
  bool sendtimestamp_;
  bool keepalive_;
  bool mqtt31compatilble_;
  bool willretain_;
  int qos_;
  bool cleansession_;
  bool retain_;
  ::PROTOBUF_NAMESPACE_ID::int32 publishinterval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqtt_2eproto;
};
// -------------------------------------------------------------------

class MqttClients :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MqttClients) */ {
 public:
  MqttClients();
  virtual ~MqttClients();

  MqttClients(const MqttClients& from);
  MqttClients(MqttClients&& from) noexcept
    : MqttClients() {
    *this = ::std::move(from);
  }

  inline MqttClients& operator=(const MqttClients& from) {
    CopyFrom(from);
    return *this;
  }
  inline MqttClients& operator=(MqttClients&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MqttClients& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MqttClients* internal_default_instance() {
    return reinterpret_cast<const MqttClients*>(
               &_MqttClients_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MqttClients& a, MqttClients& b) {
    a.Swap(&b);
  }
  inline void Swap(MqttClients* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MqttClients* New() const final {
    return CreateMaybeMessage<MqttClients>(nullptr);
  }

  MqttClients* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MqttClients>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MqttClients& from);
  void MergeFrom(const MqttClients& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttClients* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MqttClients";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mqtt_2eproto);
    return ::descriptor_table_mqtt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MqttClients_MqttClient MqttClient;

  // accessors -------------------------------------------------------

  enum : int {
    kMqttClientFieldNumber = 1,
  };
  // repeated .MqttClients.MqttClient mqttClient = 1;
  int mqttclient_size() const;
  private:
  int _internal_mqttclient_size() const;
  public:
  void clear_mqttclient();
  ::MqttClients_MqttClient* mutable_mqttclient(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttClients_MqttClient >*
      mutable_mqttclient();
  private:
  const ::MqttClients_MqttClient& _internal_mqttclient(int index) const;
  ::MqttClients_MqttClient* _internal_add_mqttclient();
  public:
  const ::MqttClients_MqttClient& mqttclient(int index) const;
  ::MqttClients_MqttClient* add_mqttclient();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttClients_MqttClient >&
      mqttclient() const;

  // @@protoc_insertion_point(class_scope:MqttClients)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttClients_MqttClient > mqttclient_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqtt_2eproto;
};
// -------------------------------------------------------------------

class MqttBorker_BrokerTag :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MqttBorker.BrokerTag) */ {
 public:
  MqttBorker_BrokerTag();
  virtual ~MqttBorker_BrokerTag();

  MqttBorker_BrokerTag(const MqttBorker_BrokerTag& from);
  MqttBorker_BrokerTag(MqttBorker_BrokerTag&& from) noexcept
    : MqttBorker_BrokerTag() {
    *this = ::std::move(from);
  }

  inline MqttBorker_BrokerTag& operator=(const MqttBorker_BrokerTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline MqttBorker_BrokerTag& operator=(MqttBorker_BrokerTag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MqttBorker_BrokerTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MqttBorker_BrokerTag* internal_default_instance() {
    return reinterpret_cast<const MqttBorker_BrokerTag*>(
               &_MqttBorker_BrokerTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MqttBorker_BrokerTag& a, MqttBorker_BrokerTag& b) {
    a.Swap(&b);
  }
  inline void Swap(MqttBorker_BrokerTag* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MqttBorker_BrokerTag* New() const final {
    return CreateMaybeMessage<MqttBorker_BrokerTag>(nullptr);
  }

  MqttBorker_BrokerTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MqttBorker_BrokerTag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MqttBorker_BrokerTag& from);
  void MergeFrom(const MqttBorker_BrokerTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttBorker_BrokerTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MqttBorker.BrokerTag";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mqtt_2eproto);
    return ::descriptor_table_mqtt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagNameFieldNumber = 1,
    kTopicNameFieldNumber = 2,
    kSystemNameFieldNumber = 5,
    kMqttVarTypeFieldNumber = 3,
    kOnOffFieldNumber = 4,
    kTimerFieldNumber = 6,
  };
  // string tagName = 1;
  void clear_tagname();
  const std::string& tagname() const;
  void set_tagname(const std::string& value);
  void set_tagname(std::string&& value);
  void set_tagname(const char* value);
  void set_tagname(const char* value, size_t size);
  std::string* mutable_tagname();
  std::string* release_tagname();
  void set_allocated_tagname(std::string* tagname);
  private:
  const std::string& _internal_tagname() const;
  void _internal_set_tagname(const std::string& value);
  std::string* _internal_mutable_tagname();
  public:

  // string topicName = 2;
  void clear_topicname();
  const std::string& topicname() const;
  void set_topicname(const std::string& value);
  void set_topicname(std::string&& value);
  void set_topicname(const char* value);
  void set_topicname(const char* value, size_t size);
  std::string* mutable_topicname();
  std::string* release_topicname();
  void set_allocated_topicname(std::string* topicname);
  private:
  const std::string& _internal_topicname() const;
  void _internal_set_topicname(const std::string& value);
  std::string* _internal_mutable_topicname();
  public:

  // string systemName = 5;
  void clear_systemname();
  const std::string& systemname() const;
  void set_systemname(const std::string& value);
  void set_systemname(std::string&& value);
  void set_systemname(const char* value);
  void set_systemname(const char* value, size_t size);
  std::string* mutable_systemname();
  std::string* release_systemname();
  void set_allocated_systemname(std::string* systemname);
  private:
  const std::string& _internal_systemname() const;
  void _internal_set_systemname(const std::string& value);
  std::string* _internal_mutable_systemname();
  public:

  // .MqttVarType mqttVarType = 3;
  void clear_mqttvartype();
  ::MqttVarType mqttvartype() const;
  void set_mqttvartype(::MqttVarType value);
  private:
  ::MqttVarType _internal_mqttvartype() const;
  void _internal_set_mqttvartype(::MqttVarType value);
  public:

  // bool onOff = 4;
  void clear_onoff();
  bool onoff() const;
  void set_onoff(bool value);
  private:
  bool _internal_onoff() const;
  void _internal_set_onoff(bool value);
  public:

  // int32 timer = 6;
  void clear_timer();
  ::PROTOBUF_NAMESPACE_ID::int32 timer() const;
  void set_timer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timer() const;
  void _internal_set_timer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MqttBorker.BrokerTag)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tagname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topicname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr systemname_;
  int mqttvartype_;
  bool onoff_;
  ::PROTOBUF_NAMESPACE_ID::int32 timer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqtt_2eproto;
};
// -------------------------------------------------------------------

class MqttBorker_BrokerClient_ClientTopic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MqttBorker.BrokerClient.ClientTopic) */ {
 public:
  MqttBorker_BrokerClient_ClientTopic();
  virtual ~MqttBorker_BrokerClient_ClientTopic();

  MqttBorker_BrokerClient_ClientTopic(const MqttBorker_BrokerClient_ClientTopic& from);
  MqttBorker_BrokerClient_ClientTopic(MqttBorker_BrokerClient_ClientTopic&& from) noexcept
    : MqttBorker_BrokerClient_ClientTopic() {
    *this = ::std::move(from);
  }

  inline MqttBorker_BrokerClient_ClientTopic& operator=(const MqttBorker_BrokerClient_ClientTopic& from) {
    CopyFrom(from);
    return *this;
  }
  inline MqttBorker_BrokerClient_ClientTopic& operator=(MqttBorker_BrokerClient_ClientTopic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MqttBorker_BrokerClient_ClientTopic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MqttBorker_BrokerClient_ClientTopic* internal_default_instance() {
    return reinterpret_cast<const MqttBorker_BrokerClient_ClientTopic*>(
               &_MqttBorker_BrokerClient_ClientTopic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MqttBorker_BrokerClient_ClientTopic& a, MqttBorker_BrokerClient_ClientTopic& b) {
    a.Swap(&b);
  }
  inline void Swap(MqttBorker_BrokerClient_ClientTopic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MqttBorker_BrokerClient_ClientTopic* New() const final {
    return CreateMaybeMessage<MqttBorker_BrokerClient_ClientTopic>(nullptr);
  }

  MqttBorker_BrokerClient_ClientTopic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MqttBorker_BrokerClient_ClientTopic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MqttBorker_BrokerClient_ClientTopic& from);
  void MergeFrom(const MqttBorker_BrokerClient_ClientTopic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttBorker_BrokerClient_ClientTopic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MqttBorker.BrokerClient.ClientTopic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mqtt_2eproto);
    return ::descriptor_table_mqtt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientTopicFieldNumber = 1,
    kTopicNameFieldNumber = 2,
    kQosFieldNumber = 3,
    kRetainFieldNumber = 4,
    kPrivateFieldNumber = 5,
  };
  // string clientTopic = 1;
  void clear_clienttopic();
  const std::string& clienttopic() const;
  void set_clienttopic(const std::string& value);
  void set_clienttopic(std::string&& value);
  void set_clienttopic(const char* value);
  void set_clienttopic(const char* value, size_t size);
  std::string* mutable_clienttopic();
  std::string* release_clienttopic();
  void set_allocated_clienttopic(std::string* clienttopic);
  private:
  const std::string& _internal_clienttopic() const;
  void _internal_set_clienttopic(const std::string& value);
  std::string* _internal_mutable_clienttopic();
  public:

  // string topicName = 2;
  void clear_topicname();
  const std::string& topicname() const;
  void set_topicname(const std::string& value);
  void set_topicname(std::string&& value);
  void set_topicname(const char* value);
  void set_topicname(const char* value, size_t size);
  std::string* mutable_topicname();
  std::string* release_topicname();
  void set_allocated_topicname(std::string* topicname);
  private:
  const std::string& _internal_topicname() const;
  void _internal_set_topicname(const std::string& value);
  std::string* _internal_mutable_topicname();
  public:

  // .Qos qos = 3;
  void clear_qos();
  ::Qos qos() const;
  void set_qos(::Qos value);
  private:
  ::Qos _internal_qos() const;
  void _internal_set_qos(::Qos value);
  public:

  // bool retain = 4;
  void clear_retain();
  bool retain() const;
  void set_retain(bool value);
  private:
  bool _internal_retain() const;
  void _internal_set_retain(bool value);
  public:

  // bool private = 5;
  void clear_private_();
  bool private_() const;
  void set_private_(bool value);
  private:
  bool _internal_private_() const;
  void _internal_set_private_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MqttBorker.BrokerClient.ClientTopic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clienttopic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topicname_;
  int qos_;
  bool retain_;
  bool private__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqtt_2eproto;
};
// -------------------------------------------------------------------

class MqttBorker_BrokerClient :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MqttBorker.BrokerClient) */ {
 public:
  MqttBorker_BrokerClient();
  virtual ~MqttBorker_BrokerClient();

  MqttBorker_BrokerClient(const MqttBorker_BrokerClient& from);
  MqttBorker_BrokerClient(MqttBorker_BrokerClient&& from) noexcept
    : MqttBorker_BrokerClient() {
    *this = ::std::move(from);
  }

  inline MqttBorker_BrokerClient& operator=(const MqttBorker_BrokerClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline MqttBorker_BrokerClient& operator=(MqttBorker_BrokerClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MqttBorker_BrokerClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MqttBorker_BrokerClient* internal_default_instance() {
    return reinterpret_cast<const MqttBorker_BrokerClient*>(
               &_MqttBorker_BrokerClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MqttBorker_BrokerClient& a, MqttBorker_BrokerClient& b) {
    a.Swap(&b);
  }
  inline void Swap(MqttBorker_BrokerClient* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MqttBorker_BrokerClient* New() const final {
    return CreateMaybeMessage<MqttBorker_BrokerClient>(nullptr);
  }

  MqttBorker_BrokerClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MqttBorker_BrokerClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MqttBorker_BrokerClient& from);
  void MergeFrom(const MqttBorker_BrokerClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttBorker_BrokerClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MqttBorker.BrokerClient";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mqtt_2eproto);
    return ::descriptor_table_mqtt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MqttBorker_BrokerClient_ClientTopic ClientTopic;

  // accessors -------------------------------------------------------

  enum : int {
    kClientTopicFieldNumber = 5,
    kBrokerClientNameFieldNumber = 1,
    kBrokerClientIDFieldNumber = 2,
    kQosFieldNumber = 3,
    kClientActionsFieldNumber = 4,
  };
  // repeated .MqttBorker.BrokerClient.ClientTopic clientTopic = 5;
  int clienttopic_size() const;
  private:
  int _internal_clienttopic_size() const;
  public:
  void clear_clienttopic();
  ::MqttBorker_BrokerClient_ClientTopic* mutable_clienttopic(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerClient_ClientTopic >*
      mutable_clienttopic();
  private:
  const ::MqttBorker_BrokerClient_ClientTopic& _internal_clienttopic(int index) const;
  ::MqttBorker_BrokerClient_ClientTopic* _internal_add_clienttopic();
  public:
  const ::MqttBorker_BrokerClient_ClientTopic& clienttopic(int index) const;
  ::MqttBorker_BrokerClient_ClientTopic* add_clienttopic();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerClient_ClientTopic >&
      clienttopic() const;

  // string brokerClientName = 1;
  void clear_brokerclientname();
  const std::string& brokerclientname() const;
  void set_brokerclientname(const std::string& value);
  void set_brokerclientname(std::string&& value);
  void set_brokerclientname(const char* value);
  void set_brokerclientname(const char* value, size_t size);
  std::string* mutable_brokerclientname();
  std::string* release_brokerclientname();
  void set_allocated_brokerclientname(std::string* brokerclientname);
  private:
  const std::string& _internal_brokerclientname() const;
  void _internal_set_brokerclientname(const std::string& value);
  std::string* _internal_mutable_brokerclientname();
  public:

  // string brokerClientID = 2;
  void clear_brokerclientid();
  const std::string& brokerclientid() const;
  void set_brokerclientid(const std::string& value);
  void set_brokerclientid(std::string&& value);
  void set_brokerclientid(const char* value);
  void set_brokerclientid(const char* value, size_t size);
  std::string* mutable_brokerclientid();
  std::string* release_brokerclientid();
  void set_allocated_brokerclientid(std::string* brokerclientid);
  private:
  const std::string& _internal_brokerclientid() const;
  void _internal_set_brokerclientid(const std::string& value);
  std::string* _internal_mutable_brokerclientid();
  public:

  // .Qos qos = 3;
  void clear_qos();
  ::Qos qos() const;
  void set_qos(::Qos value);
  private:
  ::Qos _internal_qos() const;
  void _internal_set_qos(::Qos value);
  public:

  // .ClientActions clientActions = 4;
  void clear_clientactions();
  ::ClientActions clientactions() const;
  void set_clientactions(::ClientActions value);
  private:
  ::ClientActions _internal_clientactions() const;
  void _internal_set_clientactions(::ClientActions value);
  public:

  // @@protoc_insertion_point(class_scope:MqttBorker.BrokerClient)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerClient_ClientTopic > clienttopic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brokerclientname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brokerclientid_;
  int qos_;
  int clientactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqtt_2eproto;
};
// -------------------------------------------------------------------

class MqttBorker :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MqttBorker) */ {
 public:
  MqttBorker();
  virtual ~MqttBorker();

  MqttBorker(const MqttBorker& from);
  MqttBorker(MqttBorker&& from) noexcept
    : MqttBorker() {
    *this = ::std::move(from);
  }

  inline MqttBorker& operator=(const MqttBorker& from) {
    CopyFrom(from);
    return *this;
  }
  inline MqttBorker& operator=(MqttBorker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MqttBorker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MqttBorker* internal_default_instance() {
    return reinterpret_cast<const MqttBorker*>(
               &_MqttBorker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MqttBorker& a, MqttBorker& b) {
    a.Swap(&b);
  }
  inline void Swap(MqttBorker* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MqttBorker* New() const final {
    return CreateMaybeMessage<MqttBorker>(nullptr);
  }

  MqttBorker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MqttBorker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MqttBorker& from);
  void MergeFrom(const MqttBorker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttBorker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MqttBorker";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mqtt_2eproto);
    return ::descriptor_table_mqtt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MqttBorker_BrokerTag BrokerTag;
  typedef MqttBorker_BrokerClient BrokerClient;

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerClientFieldNumber = 19,
    kBrokerTagFieldNumber = 20,
    kClientNameFieldNumber = 1,
    kClientIDFieldNumber = 2,
    kHostAddressFieldNumber = 4,
    kUserNameFieldNumber = 6,
    kUserPasswordFieldNumber = 7,
    kProtocolFieldNumber = 3,
    kHostPortFieldNumber = 5,
    kMaxCientFieldNumber = 8,
    kMaxLenghtFieldNumber = 9,
    kBrokerQosFieldNumber = 10,
    kMaxQueLeghtFieldNumber = 11,
    kRetainMessageFieldNumber = 12,
    kKeepAliveTimeFieldNumber = 15,
    kSendTimestampFieldNumber = 13,
    kKeepAliveFieldNumber = 14,
    kMqtt31CompatilbleFieldNumber = 16,
    kRetainWillFieldNumber = 17,
    kWildcardSubFieldNumber = 18,
  };
  // repeated .MqttBorker.BrokerClient brokerClient = 19;
  int brokerclient_size() const;
  private:
  int _internal_brokerclient_size() const;
  public:
  void clear_brokerclient();
  ::MqttBorker_BrokerClient* mutable_brokerclient(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerClient >*
      mutable_brokerclient();
  private:
  const ::MqttBorker_BrokerClient& _internal_brokerclient(int index) const;
  ::MqttBorker_BrokerClient* _internal_add_brokerclient();
  public:
  const ::MqttBorker_BrokerClient& brokerclient(int index) const;
  ::MqttBorker_BrokerClient* add_brokerclient();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerClient >&
      brokerclient() const;

  // repeated .MqttBorker.BrokerTag brokerTag = 20;
  int brokertag_size() const;
  private:
  int _internal_brokertag_size() const;
  public:
  void clear_brokertag();
  ::MqttBorker_BrokerTag* mutable_brokertag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerTag >*
      mutable_brokertag();
  private:
  const ::MqttBorker_BrokerTag& _internal_brokertag(int index) const;
  ::MqttBorker_BrokerTag* _internal_add_brokertag();
  public:
  const ::MqttBorker_BrokerTag& brokertag(int index) const;
  ::MqttBorker_BrokerTag* add_brokertag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerTag >&
      brokertag() const;

  // string clientName = 1;
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // string clientID = 2;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // string hostAddress = 4;
  void clear_hostaddress();
  const std::string& hostaddress() const;
  void set_hostaddress(const std::string& value);
  void set_hostaddress(std::string&& value);
  void set_hostaddress(const char* value);
  void set_hostaddress(const char* value, size_t size);
  std::string* mutable_hostaddress();
  std::string* release_hostaddress();
  void set_allocated_hostaddress(std::string* hostaddress);
  private:
  const std::string& _internal_hostaddress() const;
  void _internal_set_hostaddress(const std::string& value);
  std::string* _internal_mutable_hostaddress();
  public:

  // string userName = 6;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string userPassword = 7;
  void clear_userpassword();
  const std::string& userpassword() const;
  void set_userpassword(const std::string& value);
  void set_userpassword(std::string&& value);
  void set_userpassword(const char* value);
  void set_userpassword(const char* value, size_t size);
  std::string* mutable_userpassword();
  std::string* release_userpassword();
  void set_allocated_userpassword(std::string* userpassword);
  private:
  const std::string& _internal_userpassword() const;
  void _internal_set_userpassword(const std::string& value);
  std::string* _internal_mutable_userpassword();
  public:

  // .Protocol protocol = 3;
  void clear_protocol();
  ::Protocol protocol() const;
  void set_protocol(::Protocol value);
  private:
  ::Protocol _internal_protocol() const;
  void _internal_set_protocol(::Protocol value);
  public:

  // int32 hostPort = 5;
  void clear_hostport();
  ::PROTOBUF_NAMESPACE_ID::int32 hostport() const;
  void set_hostport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hostport() const;
  void _internal_set_hostport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxCient = 8;
  void clear_maxcient();
  ::PROTOBUF_NAMESPACE_ID::int32 maxcient() const;
  void set_maxcient(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxcient() const;
  void _internal_set_maxcient(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxLenght = 9;
  void clear_maxlenght();
  ::PROTOBUF_NAMESPACE_ID::int32 maxlenght() const;
  void set_maxlenght(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxlenght() const;
  void _internal_set_maxlenght(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Qos brokerQos = 10;
  void clear_brokerqos();
  ::Qos brokerqos() const;
  void set_brokerqos(::Qos value);
  private:
  ::Qos _internal_brokerqos() const;
  void _internal_set_brokerqos(::Qos value);
  public:

  // int32 maxQueLeght = 11;
  void clear_maxqueleght();
  ::PROTOBUF_NAMESPACE_ID::int32 maxqueleght() const;
  void set_maxqueleght(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxqueleght() const;
  void _internal_set_maxqueleght(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 retainMessage = 12;
  void clear_retainmessage();
  ::PROTOBUF_NAMESPACE_ID::int32 retainmessage() const;
  void set_retainmessage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retainmessage() const;
  void _internal_set_retainmessage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 keepAliveTime = 15;
  void clear_keepalivetime();
  ::PROTOBUF_NAMESPACE_ID::int32 keepalivetime() const;
  void set_keepalivetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keepalivetime() const;
  void _internal_set_keepalivetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool sendTimestamp = 13;
  void clear_sendtimestamp();
  bool sendtimestamp() const;
  void set_sendtimestamp(bool value);
  private:
  bool _internal_sendtimestamp() const;
  void _internal_set_sendtimestamp(bool value);
  public:

  // bool keepAlive = 14;
  void clear_keepalive();
  bool keepalive() const;
  void set_keepalive(bool value);
  private:
  bool _internal_keepalive() const;
  void _internal_set_keepalive(bool value);
  public:

  // bool mqtt31Compatilble = 16;
  void clear_mqtt31compatilble();
  bool mqtt31compatilble() const;
  void set_mqtt31compatilble(bool value);
  private:
  bool _internal_mqtt31compatilble() const;
  void _internal_set_mqtt31compatilble(bool value);
  public:

  // bool retainWill = 17;
  void clear_retainwill();
  bool retainwill() const;
  void set_retainwill(bool value);
  private:
  bool _internal_retainwill() const;
  void _internal_set_retainwill(bool value);
  public:

  // bool wildcardSub = 18;
  void clear_wildcardsub();
  bool wildcardsub() const;
  void set_wildcardsub(bool value);
  private:
  bool _internal_wildcardsub() const;
  void _internal_set_wildcardsub(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MqttBorker)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerClient > brokerclient_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerTag > brokertag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userpassword_;
  int protocol_;
  ::PROTOBUF_NAMESPACE_ID::int32 hostport_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxcient_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxlenght_;
  int brokerqos_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxqueleght_;
  ::PROTOBUF_NAMESPACE_ID::int32 retainmessage_;
  ::PROTOBUF_NAMESPACE_ID::int32 keepalivetime_;
  bool sendtimestamp_;
  bool keepalive_;
  bool mqtt31compatilble_;
  bool retainwill_;
  bool wildcardsub_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqtt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigResponse

// bool Success = 1;
inline void ConfigResponse::clear_success() {
  success_ = false;
}
inline bool ConfigResponse::_internal_success() const {
  return success_;
}
inline bool ConfigResponse::success() const {
  // @@protoc_insertion_point(field_get:ConfigResponse.Success)
  return _internal_success();
}
inline void ConfigResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ConfigResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ConfigResponse.Success)
}

// int32 errorCode = 2;
inline void ConfigResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:ConfigResponse.errorCode)
  return _internal_errorcode();
}
inline void ConfigResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void ConfigResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:ConfigResponse.errorCode)
}

// string errorDesc = 3;
inline void ConfigResponse::clear_errordesc() {
  errordesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigResponse::errordesc() const {
  // @@protoc_insertion_point(field_get:ConfigResponse.errorDesc)
  return _internal_errordesc();
}
inline void ConfigResponse::set_errordesc(const std::string& value) {
  _internal_set_errordesc(value);
  // @@protoc_insertion_point(field_set:ConfigResponse.errorDesc)
}
inline std::string* ConfigResponse::mutable_errordesc() {
  // @@protoc_insertion_point(field_mutable:ConfigResponse.errorDesc)
  return _internal_mutable_errordesc();
}
inline const std::string& ConfigResponse::_internal_errordesc() const {
  return errordesc_.GetNoArena();
}
inline void ConfigResponse::_internal_set_errordesc(const std::string& value) {
  
  errordesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigResponse::set_errordesc(std::string&& value) {
  
  errordesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigResponse.errorDesc)
}
inline void ConfigResponse::set_errordesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errordesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigResponse.errorDesc)
}
inline void ConfigResponse::set_errordesc(const char* value, size_t size) {
  
  errordesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigResponse.errorDesc)
}
inline std::string* ConfigResponse::_internal_mutable_errordesc() {
  
  return errordesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigResponse::release_errordesc() {
  // @@protoc_insertion_point(field_release:ConfigResponse.errorDesc)
  
  return errordesc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigResponse::set_allocated_errordesc(std::string* errordesc) {
  if (errordesc != nullptr) {
    
  } else {
    
  }
  errordesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordesc);
  // @@protoc_insertion_point(field_set_allocated:ConfigResponse.errorDesc)
}

// -------------------------------------------------------------------

// MqttClients_MqttClient_ClientTag

// string tagName = 1;
inline void MqttClients_MqttClient_ClientTag::clear_tagname() {
  tagname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttClients_MqttClient_ClientTag::tagname() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.ClientTag.tagName)
  return _internal_tagname();
}
inline void MqttClients_MqttClient_ClientTag::set_tagname(const std::string& value) {
  _internal_set_tagname(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.ClientTag.tagName)
}
inline std::string* MqttClients_MqttClient_ClientTag::mutable_tagname() {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.ClientTag.tagName)
  return _internal_mutable_tagname();
}
inline const std::string& MqttClients_MqttClient_ClientTag::_internal_tagname() const {
  return tagname_.GetNoArena();
}
inline void MqttClients_MqttClient_ClientTag::_internal_set_tagname(const std::string& value) {
  
  tagname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttClients_MqttClient_ClientTag::set_tagname(std::string&& value) {
  
  tagname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttClients.MqttClient.ClientTag.tagName)
}
inline void MqttClients_MqttClient_ClientTag::set_tagname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tagname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttClients.MqttClient.ClientTag.tagName)
}
inline void MqttClients_MqttClient_ClientTag::set_tagname(const char* value, size_t size) {
  
  tagname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttClients.MqttClient.ClientTag.tagName)
}
inline std::string* MqttClients_MqttClient_ClientTag::_internal_mutable_tagname() {
  
  return tagname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttClients_MqttClient_ClientTag::release_tagname() {
  // @@protoc_insertion_point(field_release:MqttClients.MqttClient.ClientTag.tagName)
  
  return tagname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttClients_MqttClient_ClientTag::set_allocated_tagname(std::string* tagname) {
  if (tagname != nullptr) {
    
  } else {
    
  }
  tagname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tagname);
  // @@protoc_insertion_point(field_set_allocated:MqttClients.MqttClient.ClientTag.tagName)
}

// string topicName = 2;
inline void MqttClients_MqttClient_ClientTag::clear_topicname() {
  topicname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttClients_MqttClient_ClientTag::topicname() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.ClientTag.topicName)
  return _internal_topicname();
}
inline void MqttClients_MqttClient_ClientTag::set_topicname(const std::string& value) {
  _internal_set_topicname(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.ClientTag.topicName)
}
inline std::string* MqttClients_MqttClient_ClientTag::mutable_topicname() {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.ClientTag.topicName)
  return _internal_mutable_topicname();
}
inline const std::string& MqttClients_MqttClient_ClientTag::_internal_topicname() const {
  return topicname_.GetNoArena();
}
inline void MqttClients_MqttClient_ClientTag::_internal_set_topicname(const std::string& value) {
  
  topicname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttClients_MqttClient_ClientTag::set_topicname(std::string&& value) {
  
  topicname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttClients.MqttClient.ClientTag.topicName)
}
inline void MqttClients_MqttClient_ClientTag::set_topicname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topicname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttClients.MqttClient.ClientTag.topicName)
}
inline void MqttClients_MqttClient_ClientTag::set_topicname(const char* value, size_t size) {
  
  topicname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttClients.MqttClient.ClientTag.topicName)
}
inline std::string* MqttClients_MqttClient_ClientTag::_internal_mutable_topicname() {
  
  return topicname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttClients_MqttClient_ClientTag::release_topicname() {
  // @@protoc_insertion_point(field_release:MqttClients.MqttClient.ClientTag.topicName)
  
  return topicname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttClients_MqttClient_ClientTag::set_allocated_topicname(std::string* topicname) {
  if (topicname != nullptr) {
    
  } else {
    
  }
  topicname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topicname);
  // @@protoc_insertion_point(field_set_allocated:MqttClients.MqttClient.ClientTag.topicName)
}

// .MqttVarType mqttVarType = 3;
inline void MqttClients_MqttClient_ClientTag::clear_mqttvartype() {
  mqttvartype_ = 0;
}
inline ::MqttVarType MqttClients_MqttClient_ClientTag::_internal_mqttvartype() const {
  return static_cast< ::MqttVarType >(mqttvartype_);
}
inline ::MqttVarType MqttClients_MqttClient_ClientTag::mqttvartype() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.ClientTag.mqttVarType)
  return _internal_mqttvartype();
}
inline void MqttClients_MqttClient_ClientTag::_internal_set_mqttvartype(::MqttVarType value) {
  
  mqttvartype_ = value;
}
inline void MqttClients_MqttClient_ClientTag::set_mqttvartype(::MqttVarType value) {
  _internal_set_mqttvartype(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.ClientTag.mqttVarType)
}

// bool onOff = 4;
inline void MqttClients_MqttClient_ClientTag::clear_onoff() {
  onoff_ = false;
}
inline bool MqttClients_MqttClient_ClientTag::_internal_onoff() const {
  return onoff_;
}
inline bool MqttClients_MqttClient_ClientTag::onoff() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.ClientTag.onOff)
  return _internal_onoff();
}
inline void MqttClients_MqttClient_ClientTag::_internal_set_onoff(bool value) {
  
  onoff_ = value;
}
inline void MqttClients_MqttClient_ClientTag::set_onoff(bool value) {
  _internal_set_onoff(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.ClientTag.onOff)
}

// string systemName = 5;
inline void MqttClients_MqttClient_ClientTag::clear_systemname() {
  systemname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttClients_MqttClient_ClientTag::systemname() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.ClientTag.systemName)
  return _internal_systemname();
}
inline void MqttClients_MqttClient_ClientTag::set_systemname(const std::string& value) {
  _internal_set_systemname(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.ClientTag.systemName)
}
inline std::string* MqttClients_MqttClient_ClientTag::mutable_systemname() {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.ClientTag.systemName)
  return _internal_mutable_systemname();
}
inline const std::string& MqttClients_MqttClient_ClientTag::_internal_systemname() const {
  return systemname_.GetNoArena();
}
inline void MqttClients_MqttClient_ClientTag::_internal_set_systemname(const std::string& value) {
  
  systemname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttClients_MqttClient_ClientTag::set_systemname(std::string&& value) {
  
  systemname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttClients.MqttClient.ClientTag.systemName)
}
inline void MqttClients_MqttClient_ClientTag::set_systemname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  systemname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttClients.MqttClient.ClientTag.systemName)
}
inline void MqttClients_MqttClient_ClientTag::set_systemname(const char* value, size_t size) {
  
  systemname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttClients.MqttClient.ClientTag.systemName)
}
inline std::string* MqttClients_MqttClient_ClientTag::_internal_mutable_systemname() {
  
  return systemname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttClients_MqttClient_ClientTag::release_systemname() {
  // @@protoc_insertion_point(field_release:MqttClients.MqttClient.ClientTag.systemName)
  
  return systemname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttClients_MqttClient_ClientTag::set_allocated_systemname(std::string* systemname) {
  if (systemname != nullptr) {
    
  } else {
    
  }
  systemname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), systemname);
  // @@protoc_insertion_point(field_set_allocated:MqttClients.MqttClient.ClientTag.systemName)
}

// .ClientActions clientActions = 6;
inline void MqttClients_MqttClient_ClientTag::clear_clientactions() {
  clientactions_ = 0;
}
inline ::ClientActions MqttClients_MqttClient_ClientTag::_internal_clientactions() const {
  return static_cast< ::ClientActions >(clientactions_);
}
inline ::ClientActions MqttClients_MqttClient_ClientTag::clientactions() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.ClientTag.clientActions)
  return _internal_clientactions();
}
inline void MqttClients_MqttClient_ClientTag::_internal_set_clientactions(::ClientActions value) {
  
  clientactions_ = value;
}
inline void MqttClients_MqttClient_ClientTag::set_clientactions(::ClientActions value) {
  _internal_set_clientactions(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.ClientTag.clientActions)
}

// -------------------------------------------------------------------

// MqttClients_MqttClient_Business

// string name = 1;
inline void MqttClients_MqttClient_Business::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttClients_MqttClient_Business::name() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.Business.name)
  return _internal_name();
}
inline void MqttClients_MqttClient_Business::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.Business.name)
}
inline std::string* MqttClients_MqttClient_Business::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.Business.name)
  return _internal_mutable_name();
}
inline const std::string& MqttClients_MqttClient_Business::_internal_name() const {
  return name_.GetNoArena();
}
inline void MqttClients_MqttClient_Business::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttClients_MqttClient_Business::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttClients.MqttClient.Business.name)
}
inline void MqttClients_MqttClient_Business::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttClients.MqttClient.Business.name)
}
inline void MqttClients_MqttClient_Business::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttClients.MqttClient.Business.name)
}
inline std::string* MqttClients_MqttClient_Business::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttClients_MqttClient_Business::release_name() {
  // @@protoc_insertion_point(field_release:MqttClients.MqttClient.Business.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttClients_MqttClient_Business::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MqttClients.MqttClient.Business.name)
}

// int32 size = 2;
inline void MqttClients_MqttClient_Business::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttClients_MqttClient_Business::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttClients_MqttClient_Business::size() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.Business.size)
  return _internal_size();
}
inline void MqttClients_MqttClient_Business::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void MqttClients_MqttClient_Business::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.Business.size)
}

// float trpersec = 3;
inline void MqttClients_MqttClient_Business::clear_trpersec() {
  trpersec_ = 0;
}
inline float MqttClients_MqttClient_Business::_internal_trpersec() const {
  return trpersec_;
}
inline float MqttClients_MqttClient_Business::trpersec() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.Business.trpersec)
  return _internal_trpersec();
}
inline void MqttClients_MqttClient_Business::_internal_set_trpersec(float value) {
  
  trpersec_ = value;
}
inline void MqttClients_MqttClient_Business::set_trpersec(float value) {
  _internal_set_trpersec(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.Business.trpersec)
}

// -------------------------------------------------------------------

// MqttClients_MqttClient

// string clientName = 1;
inline void MqttClients_MqttClient::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttClients_MqttClient::clientname() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.clientName)
  return _internal_clientname();
}
inline void MqttClients_MqttClient::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.clientName)
}
inline std::string* MqttClients_MqttClient::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& MqttClients_MqttClient::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void MqttClients_MqttClient::_internal_set_clientname(const std::string& value) {
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttClients_MqttClient::set_clientname(std::string&& value) {
  
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttClients.MqttClient.clientName)
}
inline void MqttClients_MqttClient::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttClients.MqttClient.clientName)
}
inline void MqttClients_MqttClient::set_clientname(const char* value, size_t size) {
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttClients.MqttClient.clientName)
}
inline std::string* MqttClients_MqttClient::_internal_mutable_clientname() {
  
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttClients_MqttClient::release_clientname() {
  // @@protoc_insertion_point(field_release:MqttClients.MqttClient.clientName)
  
  return clientname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttClients_MqttClient::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    
  } else {
    
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:MqttClients.MqttClient.clientName)
}

// string clientID = 2;
inline void MqttClients_MqttClient::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttClients_MqttClient::clientid() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.clientID)
  return _internal_clientid();
}
inline void MqttClients_MqttClient::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.clientID)
}
inline std::string* MqttClients_MqttClient::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.clientID)
  return _internal_mutable_clientid();
}
inline const std::string& MqttClients_MqttClient::_internal_clientid() const {
  return clientid_.GetNoArena();
}
inline void MqttClients_MqttClient::_internal_set_clientid(const std::string& value) {
  
  clientid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttClients_MqttClient::set_clientid(std::string&& value) {
  
  clientid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttClients.MqttClient.clientID)
}
inline void MqttClients_MqttClient::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttClients.MqttClient.clientID)
}
inline void MqttClients_MqttClient::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttClients.MqttClient.clientID)
}
inline std::string* MqttClients_MqttClient::_internal_mutable_clientid() {
  
  return clientid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttClients_MqttClient::release_clientid() {
  // @@protoc_insertion_point(field_release:MqttClients.MqttClient.clientID)
  
  return clientid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttClients_MqttClient::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:MqttClients.MqttClient.clientID)
}

// .Protocol protocol = 3;
inline void MqttClients_MqttClient::clear_protocol() {
  protocol_ = 0;
}
inline ::Protocol MqttClients_MqttClient::_internal_protocol() const {
  return static_cast< ::Protocol >(protocol_);
}
inline ::Protocol MqttClients_MqttClient::protocol() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.protocol)
  return _internal_protocol();
}
inline void MqttClients_MqttClient::_internal_set_protocol(::Protocol value) {
  
  protocol_ = value;
}
inline void MqttClients_MqttClient::set_protocol(::Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.protocol)
}

// string hostAddress = 4;
inline void MqttClients_MqttClient::clear_hostaddress() {
  hostaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttClients_MqttClient::hostaddress() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.hostAddress)
  return _internal_hostaddress();
}
inline void MqttClients_MqttClient::set_hostaddress(const std::string& value) {
  _internal_set_hostaddress(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.hostAddress)
}
inline std::string* MqttClients_MqttClient::mutable_hostaddress() {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.hostAddress)
  return _internal_mutable_hostaddress();
}
inline const std::string& MqttClients_MqttClient::_internal_hostaddress() const {
  return hostaddress_.GetNoArena();
}
inline void MqttClients_MqttClient::_internal_set_hostaddress(const std::string& value) {
  
  hostaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttClients_MqttClient::set_hostaddress(std::string&& value) {
  
  hostaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttClients.MqttClient.hostAddress)
}
inline void MqttClients_MqttClient::set_hostaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttClients.MqttClient.hostAddress)
}
inline void MqttClients_MqttClient::set_hostaddress(const char* value, size_t size) {
  
  hostaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttClients.MqttClient.hostAddress)
}
inline std::string* MqttClients_MqttClient::_internal_mutable_hostaddress() {
  
  return hostaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttClients_MqttClient::release_hostaddress() {
  // @@protoc_insertion_point(field_release:MqttClients.MqttClient.hostAddress)
  
  return hostaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttClients_MqttClient::set_allocated_hostaddress(std::string* hostaddress) {
  if (hostaddress != nullptr) {
    
  } else {
    
  }
  hostaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostaddress);
  // @@protoc_insertion_point(field_set_allocated:MqttClients.MqttClient.hostAddress)
}

// int32 hostPort = 5;
inline void MqttClients_MqttClient::clear_hostport() {
  hostport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttClients_MqttClient::_internal_hostport() const {
  return hostport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttClients_MqttClient::hostport() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.hostPort)
  return _internal_hostport();
}
inline void MqttClients_MqttClient::_internal_set_hostport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hostport_ = value;
}
inline void MqttClients_MqttClient::set_hostport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hostport(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.hostPort)
}

// string userName = 6;
inline void MqttClients_MqttClient::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttClients_MqttClient::username() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.userName)
  return _internal_username();
}
inline void MqttClients_MqttClient::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.userName)
}
inline std::string* MqttClients_MqttClient::mutable_username() {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.userName)
  return _internal_mutable_username();
}
inline const std::string& MqttClients_MqttClient::_internal_username() const {
  return username_.GetNoArena();
}
inline void MqttClients_MqttClient::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttClients_MqttClient::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttClients.MqttClient.userName)
}
inline void MqttClients_MqttClient::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttClients.MqttClient.userName)
}
inline void MqttClients_MqttClient::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttClients.MqttClient.userName)
}
inline std::string* MqttClients_MqttClient::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttClients_MqttClient::release_username() {
  // @@protoc_insertion_point(field_release:MqttClients.MqttClient.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttClients_MqttClient::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:MqttClients.MqttClient.userName)
}

// string userPassword = 7;
inline void MqttClients_MqttClient::clear_userpassword() {
  userpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttClients_MqttClient::userpassword() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.userPassword)
  return _internal_userpassword();
}
inline void MqttClients_MqttClient::set_userpassword(const std::string& value) {
  _internal_set_userpassword(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.userPassword)
}
inline std::string* MqttClients_MqttClient::mutable_userpassword() {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.userPassword)
  return _internal_mutable_userpassword();
}
inline const std::string& MqttClients_MqttClient::_internal_userpassword() const {
  return userpassword_.GetNoArena();
}
inline void MqttClients_MqttClient::_internal_set_userpassword(const std::string& value) {
  
  userpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttClients_MqttClient::set_userpassword(std::string&& value) {
  
  userpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttClients.MqttClient.userPassword)
}
inline void MqttClients_MqttClient::set_userpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttClients.MqttClient.userPassword)
}
inline void MqttClients_MqttClient::set_userpassword(const char* value, size_t size) {
  
  userpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttClients.MqttClient.userPassword)
}
inline std::string* MqttClients_MqttClient::_internal_mutable_userpassword() {
  
  return userpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttClients_MqttClient::release_userpassword() {
  // @@protoc_insertion_point(field_release:MqttClients.MqttClient.userPassword)
  
  return userpassword_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttClients_MqttClient::set_allocated_userpassword(std::string* userpassword) {
  if (userpassword != nullptr) {
    
  } else {
    
  }
  userpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userpassword);
  // @@protoc_insertion_point(field_set_allocated:MqttClients.MqttClient.userPassword)
}

// int32 reConnect = 8;
inline void MqttClients_MqttClient::clear_reconnect() {
  reconnect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttClients_MqttClient::_internal_reconnect() const {
  return reconnect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttClients_MqttClient::reconnect() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.reConnect)
  return _internal_reconnect();
}
inline void MqttClients_MqttClient::_internal_set_reconnect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reconnect_ = value;
}
inline void MqttClients_MqttClient::set_reconnect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reconnect(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.reConnect)
}

// int32 timeOut = 9;
inline void MqttClients_MqttClient::clear_timeout() {
  timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttClients_MqttClient::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttClients_MqttClient::timeout() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.timeOut)
  return _internal_timeout();
}
inline void MqttClients_MqttClient::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_ = value;
}
inline void MqttClients_MqttClient::set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.timeOut)
}

// string willTopic = 10;
inline void MqttClients_MqttClient::clear_willtopic() {
  willtopic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttClients_MqttClient::willtopic() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.willTopic)
  return _internal_willtopic();
}
inline void MqttClients_MqttClient::set_willtopic(const std::string& value) {
  _internal_set_willtopic(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.willTopic)
}
inline std::string* MqttClients_MqttClient::mutable_willtopic() {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.willTopic)
  return _internal_mutable_willtopic();
}
inline const std::string& MqttClients_MqttClient::_internal_willtopic() const {
  return willtopic_.GetNoArena();
}
inline void MqttClients_MqttClient::_internal_set_willtopic(const std::string& value) {
  
  willtopic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttClients_MqttClient::set_willtopic(std::string&& value) {
  
  willtopic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttClients.MqttClient.willTopic)
}
inline void MqttClients_MqttClient::set_willtopic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  willtopic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttClients.MqttClient.willTopic)
}
inline void MqttClients_MqttClient::set_willtopic(const char* value, size_t size) {
  
  willtopic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttClients.MqttClient.willTopic)
}
inline std::string* MqttClients_MqttClient::_internal_mutable_willtopic() {
  
  return willtopic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttClients_MqttClient::release_willtopic() {
  // @@protoc_insertion_point(field_release:MqttClients.MqttClient.willTopic)
  
  return willtopic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttClients_MqttClient::set_allocated_willtopic(std::string* willtopic) {
  if (willtopic != nullptr) {
    
  } else {
    
  }
  willtopic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), willtopic);
  // @@protoc_insertion_point(field_set_allocated:MqttClients.MqttClient.willTopic)
}

// .Qos willQos = 11;
inline void MqttClients_MqttClient::clear_willqos() {
  willqos_ = 0;
}
inline ::Qos MqttClients_MqttClient::_internal_willqos() const {
  return static_cast< ::Qos >(willqos_);
}
inline ::Qos MqttClients_MqttClient::willqos() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.willQos)
  return _internal_willqos();
}
inline void MqttClients_MqttClient::_internal_set_willqos(::Qos value) {
  
  willqos_ = value;
}
inline void MqttClients_MqttClient::set_willqos(::Qos value) {
  _internal_set_willqos(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.willQos)
}

// string willPayLoad = 12;
inline void MqttClients_MqttClient::clear_willpayload() {
  willpayload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttClients_MqttClient::willpayload() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.willPayLoad)
  return _internal_willpayload();
}
inline void MqttClients_MqttClient::set_willpayload(const std::string& value) {
  _internal_set_willpayload(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.willPayLoad)
}
inline std::string* MqttClients_MqttClient::mutable_willpayload() {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.willPayLoad)
  return _internal_mutable_willpayload();
}
inline const std::string& MqttClients_MqttClient::_internal_willpayload() const {
  return willpayload_.GetNoArena();
}
inline void MqttClients_MqttClient::_internal_set_willpayload(const std::string& value) {
  
  willpayload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttClients_MqttClient::set_willpayload(std::string&& value) {
  
  willpayload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttClients.MqttClient.willPayLoad)
}
inline void MqttClients_MqttClient::set_willpayload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  willpayload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttClients.MqttClient.willPayLoad)
}
inline void MqttClients_MqttClient::set_willpayload(const char* value, size_t size) {
  
  willpayload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttClients.MqttClient.willPayLoad)
}
inline std::string* MqttClients_MqttClient::_internal_mutable_willpayload() {
  
  return willpayload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttClients_MqttClient::release_willpayload() {
  // @@protoc_insertion_point(field_release:MqttClients.MqttClient.willPayLoad)
  
  return willpayload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttClients_MqttClient::set_allocated_willpayload(std::string* willpayload) {
  if (willpayload != nullptr) {
    
  } else {
    
  }
  willpayload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), willpayload);
  // @@protoc_insertion_point(field_set_allocated:MqttClients.MqttClient.willPayLoad)
}

// bool sendTimestamp = 13;
inline void MqttClients_MqttClient::clear_sendtimestamp() {
  sendtimestamp_ = false;
}
inline bool MqttClients_MqttClient::_internal_sendtimestamp() const {
  return sendtimestamp_;
}
inline bool MqttClients_MqttClient::sendtimestamp() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.sendTimestamp)
  return _internal_sendtimestamp();
}
inline void MqttClients_MqttClient::_internal_set_sendtimestamp(bool value) {
  
  sendtimestamp_ = value;
}
inline void MqttClients_MqttClient::set_sendtimestamp(bool value) {
  _internal_set_sendtimestamp(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.sendTimestamp)
}

// bool keepAlive = 14;
inline void MqttClients_MqttClient::clear_keepalive() {
  keepalive_ = false;
}
inline bool MqttClients_MqttClient::_internal_keepalive() const {
  return keepalive_;
}
inline bool MqttClients_MqttClient::keepalive() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.keepAlive)
  return _internal_keepalive();
}
inline void MqttClients_MqttClient::_internal_set_keepalive(bool value) {
  
  keepalive_ = value;
}
inline void MqttClients_MqttClient::set_keepalive(bool value) {
  _internal_set_keepalive(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.keepAlive)
}

// int32 keepAliveTime = 15;
inline void MqttClients_MqttClient::clear_keepalivetime() {
  keepalivetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttClients_MqttClient::_internal_keepalivetime() const {
  return keepalivetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttClients_MqttClient::keepalivetime() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.keepAliveTime)
  return _internal_keepalivetime();
}
inline void MqttClients_MqttClient::_internal_set_keepalivetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keepalivetime_ = value;
}
inline void MqttClients_MqttClient::set_keepalivetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keepalivetime(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.keepAliveTime)
}

// bool mqtt31Compatilble = 16;
inline void MqttClients_MqttClient::clear_mqtt31compatilble() {
  mqtt31compatilble_ = false;
}
inline bool MqttClients_MqttClient::_internal_mqtt31compatilble() const {
  return mqtt31compatilble_;
}
inline bool MqttClients_MqttClient::mqtt31compatilble() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.mqtt31Compatilble)
  return _internal_mqtt31compatilble();
}
inline void MqttClients_MqttClient::_internal_set_mqtt31compatilble(bool value) {
  
  mqtt31compatilble_ = value;
}
inline void MqttClients_MqttClient::set_mqtt31compatilble(bool value) {
  _internal_set_mqtt31compatilble(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.mqtt31Compatilble)
}

// bool willRetain = 17;
inline void MqttClients_MqttClient::clear_willretain() {
  willretain_ = false;
}
inline bool MqttClients_MqttClient::_internal_willretain() const {
  return willretain_;
}
inline bool MqttClients_MqttClient::willretain() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.willRetain)
  return _internal_willretain();
}
inline void MqttClients_MqttClient::_internal_set_willretain(bool value) {
  
  willretain_ = value;
}
inline void MqttClients_MqttClient::set_willretain(bool value) {
  _internal_set_willretain(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.willRetain)
}

// bool cleanSession = 18;
inline void MqttClients_MqttClient::clear_cleansession() {
  cleansession_ = false;
}
inline bool MqttClients_MqttClient::_internal_cleansession() const {
  return cleansession_;
}
inline bool MqttClients_MqttClient::cleansession() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.cleanSession)
  return _internal_cleansession();
}
inline void MqttClients_MqttClient::_internal_set_cleansession(bool value) {
  
  cleansession_ = value;
}
inline void MqttClients_MqttClient::set_cleansession(bool value) {
  _internal_set_cleansession(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.cleanSession)
}

// repeated .MqttClients.MqttClient.ClientTag clientTag = 19;
inline int MqttClients_MqttClient::_internal_clienttag_size() const {
  return clienttag_.size();
}
inline int MqttClients_MqttClient::clienttag_size() const {
  return _internal_clienttag_size();
}
inline void MqttClients_MqttClient::clear_clienttag() {
  clienttag_.Clear();
}
inline ::MqttClients_MqttClient_ClientTag* MqttClients_MqttClient::mutable_clienttag(int index) {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.clientTag)
  return clienttag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttClients_MqttClient_ClientTag >*
MqttClients_MqttClient::mutable_clienttag() {
  // @@protoc_insertion_point(field_mutable_list:MqttClients.MqttClient.clientTag)
  return &clienttag_;
}
inline const ::MqttClients_MqttClient_ClientTag& MqttClients_MqttClient::_internal_clienttag(int index) const {
  return clienttag_.Get(index);
}
inline const ::MqttClients_MqttClient_ClientTag& MqttClients_MqttClient::clienttag(int index) const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.clientTag)
  return _internal_clienttag(index);
}
inline ::MqttClients_MqttClient_ClientTag* MqttClients_MqttClient::_internal_add_clienttag() {
  return clienttag_.Add();
}
inline ::MqttClients_MqttClient_ClientTag* MqttClients_MqttClient::add_clienttag() {
  // @@protoc_insertion_point(field_add:MqttClients.MqttClient.clientTag)
  return _internal_add_clienttag();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttClients_MqttClient_ClientTag >&
MqttClients_MqttClient::clienttag() const {
  // @@protoc_insertion_point(field_list:MqttClients.MqttClient.clientTag)
  return clienttag_;
}

// .Qos qos = 20;
inline void MqttClients_MqttClient::clear_qos() {
  qos_ = 0;
}
inline ::Qos MqttClients_MqttClient::_internal_qos() const {
  return static_cast< ::Qos >(qos_);
}
inline ::Qos MqttClients_MqttClient::qos() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.qos)
  return _internal_qos();
}
inline void MqttClients_MqttClient::_internal_set_qos(::Qos value) {
  
  qos_ = value;
}
inline void MqttClients_MqttClient::set_qos(::Qos value) {
  _internal_set_qos(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.qos)
}

// int32 publishInterval = 21;
inline void MqttClients_MqttClient::clear_publishinterval() {
  publishinterval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttClients_MqttClient::_internal_publishinterval() const {
  return publishinterval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttClients_MqttClient::publishinterval() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.publishInterval)
  return _internal_publishinterval();
}
inline void MqttClients_MqttClient::_internal_set_publishinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  publishinterval_ = value;
}
inline void MqttClients_MqttClient::set_publishinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_publishinterval(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.publishInterval)
}

// bool retain = 22;
inline void MqttClients_MqttClient::clear_retain() {
  retain_ = false;
}
inline bool MqttClients_MqttClient::_internal_retain() const {
  return retain_;
}
inline bool MqttClients_MqttClient::retain() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.retain)
  return _internal_retain();
}
inline void MqttClients_MqttClient::_internal_set_retain(bool value) {
  
  retain_ = value;
}
inline void MqttClients_MqttClient::set_retain(bool value) {
  _internal_set_retain(value);
  // @@protoc_insertion_point(field_set:MqttClients.MqttClient.retain)
}

// .MqttClients.MqttClient.Business business = 23;
inline bool MqttClients_MqttClient::_internal_has_business() const {
  return this != internal_default_instance() && business_ != nullptr;
}
inline bool MqttClients_MqttClient::has_business() const {
  return _internal_has_business();
}
inline void MqttClients_MqttClient::clear_business() {
  if (GetArenaNoVirtual() == nullptr && business_ != nullptr) {
    delete business_;
  }
  business_ = nullptr;
}
inline const ::MqttClients_MqttClient_Business& MqttClients_MqttClient::_internal_business() const {
  const ::MqttClients_MqttClient_Business* p = business_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MqttClients_MqttClient_Business*>(
      &::_MqttClients_MqttClient_Business_default_instance_);
}
inline const ::MqttClients_MqttClient_Business& MqttClients_MqttClient::business() const {
  // @@protoc_insertion_point(field_get:MqttClients.MqttClient.business)
  return _internal_business();
}
inline ::MqttClients_MqttClient_Business* MqttClients_MqttClient::release_business() {
  // @@protoc_insertion_point(field_release:MqttClients.MqttClient.business)
  
  ::MqttClients_MqttClient_Business* temp = business_;
  business_ = nullptr;
  return temp;
}
inline ::MqttClients_MqttClient_Business* MqttClients_MqttClient::_internal_mutable_business() {
  
  if (business_ == nullptr) {
    auto* p = CreateMaybeMessage<::MqttClients_MqttClient_Business>(GetArenaNoVirtual());
    business_ = p;
  }
  return business_;
}
inline ::MqttClients_MqttClient_Business* MqttClients_MqttClient::mutable_business() {
  // @@protoc_insertion_point(field_mutable:MqttClients.MqttClient.business)
  return _internal_mutable_business();
}
inline void MqttClients_MqttClient::set_allocated_business(::MqttClients_MqttClient_Business* business) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete business_;
  }
  if (business) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      business = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, business, submessage_arena);
    }
    
  } else {
    
  }
  business_ = business;
  // @@protoc_insertion_point(field_set_allocated:MqttClients.MqttClient.business)
}

// -------------------------------------------------------------------

// MqttClients

// repeated .MqttClients.MqttClient mqttClient = 1;
inline int MqttClients::_internal_mqttclient_size() const {
  return mqttclient_.size();
}
inline int MqttClients::mqttclient_size() const {
  return _internal_mqttclient_size();
}
inline void MqttClients::clear_mqttclient() {
  mqttclient_.Clear();
}
inline ::MqttClients_MqttClient* MqttClients::mutable_mqttclient(int index) {
  // @@protoc_insertion_point(field_mutable:MqttClients.mqttClient)
  return mqttclient_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttClients_MqttClient >*
MqttClients::mutable_mqttclient() {
  // @@protoc_insertion_point(field_mutable_list:MqttClients.mqttClient)
  return &mqttclient_;
}
inline const ::MqttClients_MqttClient& MqttClients::_internal_mqttclient(int index) const {
  return mqttclient_.Get(index);
}
inline const ::MqttClients_MqttClient& MqttClients::mqttclient(int index) const {
  // @@protoc_insertion_point(field_get:MqttClients.mqttClient)
  return _internal_mqttclient(index);
}
inline ::MqttClients_MqttClient* MqttClients::_internal_add_mqttclient() {
  return mqttclient_.Add();
}
inline ::MqttClients_MqttClient* MqttClients::add_mqttclient() {
  // @@protoc_insertion_point(field_add:MqttClients.mqttClient)
  return _internal_add_mqttclient();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttClients_MqttClient >&
MqttClients::mqttclient() const {
  // @@protoc_insertion_point(field_list:MqttClients.mqttClient)
  return mqttclient_;
}

// -------------------------------------------------------------------

// MqttBorker_BrokerTag

// string tagName = 1;
inline void MqttBorker_BrokerTag::clear_tagname() {
  tagname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttBorker_BrokerTag::tagname() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerTag.tagName)
  return _internal_tagname();
}
inline void MqttBorker_BrokerTag::set_tagname(const std::string& value) {
  _internal_set_tagname(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerTag.tagName)
}
inline std::string* MqttBorker_BrokerTag::mutable_tagname() {
  // @@protoc_insertion_point(field_mutable:MqttBorker.BrokerTag.tagName)
  return _internal_mutable_tagname();
}
inline const std::string& MqttBorker_BrokerTag::_internal_tagname() const {
  return tagname_.GetNoArena();
}
inline void MqttBorker_BrokerTag::_internal_set_tagname(const std::string& value) {
  
  tagname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttBorker_BrokerTag::set_tagname(std::string&& value) {
  
  tagname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttBorker.BrokerTag.tagName)
}
inline void MqttBorker_BrokerTag::set_tagname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tagname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttBorker.BrokerTag.tagName)
}
inline void MqttBorker_BrokerTag::set_tagname(const char* value, size_t size) {
  
  tagname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttBorker.BrokerTag.tagName)
}
inline std::string* MqttBorker_BrokerTag::_internal_mutable_tagname() {
  
  return tagname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttBorker_BrokerTag::release_tagname() {
  // @@protoc_insertion_point(field_release:MqttBorker.BrokerTag.tagName)
  
  return tagname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttBorker_BrokerTag::set_allocated_tagname(std::string* tagname) {
  if (tagname != nullptr) {
    
  } else {
    
  }
  tagname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tagname);
  // @@protoc_insertion_point(field_set_allocated:MqttBorker.BrokerTag.tagName)
}

// string topicName = 2;
inline void MqttBorker_BrokerTag::clear_topicname() {
  topicname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttBorker_BrokerTag::topicname() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerTag.topicName)
  return _internal_topicname();
}
inline void MqttBorker_BrokerTag::set_topicname(const std::string& value) {
  _internal_set_topicname(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerTag.topicName)
}
inline std::string* MqttBorker_BrokerTag::mutable_topicname() {
  // @@protoc_insertion_point(field_mutable:MqttBorker.BrokerTag.topicName)
  return _internal_mutable_topicname();
}
inline const std::string& MqttBorker_BrokerTag::_internal_topicname() const {
  return topicname_.GetNoArena();
}
inline void MqttBorker_BrokerTag::_internal_set_topicname(const std::string& value) {
  
  topicname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttBorker_BrokerTag::set_topicname(std::string&& value) {
  
  topicname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttBorker.BrokerTag.topicName)
}
inline void MqttBorker_BrokerTag::set_topicname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topicname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttBorker.BrokerTag.topicName)
}
inline void MqttBorker_BrokerTag::set_topicname(const char* value, size_t size) {
  
  topicname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttBorker.BrokerTag.topicName)
}
inline std::string* MqttBorker_BrokerTag::_internal_mutable_topicname() {
  
  return topicname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttBorker_BrokerTag::release_topicname() {
  // @@protoc_insertion_point(field_release:MqttBorker.BrokerTag.topicName)
  
  return topicname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttBorker_BrokerTag::set_allocated_topicname(std::string* topicname) {
  if (topicname != nullptr) {
    
  } else {
    
  }
  topicname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topicname);
  // @@protoc_insertion_point(field_set_allocated:MqttBorker.BrokerTag.topicName)
}

// .MqttVarType mqttVarType = 3;
inline void MqttBorker_BrokerTag::clear_mqttvartype() {
  mqttvartype_ = 0;
}
inline ::MqttVarType MqttBorker_BrokerTag::_internal_mqttvartype() const {
  return static_cast< ::MqttVarType >(mqttvartype_);
}
inline ::MqttVarType MqttBorker_BrokerTag::mqttvartype() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerTag.mqttVarType)
  return _internal_mqttvartype();
}
inline void MqttBorker_BrokerTag::_internal_set_mqttvartype(::MqttVarType value) {
  
  mqttvartype_ = value;
}
inline void MqttBorker_BrokerTag::set_mqttvartype(::MqttVarType value) {
  _internal_set_mqttvartype(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerTag.mqttVarType)
}

// bool onOff = 4;
inline void MqttBorker_BrokerTag::clear_onoff() {
  onoff_ = false;
}
inline bool MqttBorker_BrokerTag::_internal_onoff() const {
  return onoff_;
}
inline bool MqttBorker_BrokerTag::onoff() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerTag.onOff)
  return _internal_onoff();
}
inline void MqttBorker_BrokerTag::_internal_set_onoff(bool value) {
  
  onoff_ = value;
}
inline void MqttBorker_BrokerTag::set_onoff(bool value) {
  _internal_set_onoff(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerTag.onOff)
}

// string systemName = 5;
inline void MqttBorker_BrokerTag::clear_systemname() {
  systemname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttBorker_BrokerTag::systemname() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerTag.systemName)
  return _internal_systemname();
}
inline void MqttBorker_BrokerTag::set_systemname(const std::string& value) {
  _internal_set_systemname(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerTag.systemName)
}
inline std::string* MqttBorker_BrokerTag::mutable_systemname() {
  // @@protoc_insertion_point(field_mutable:MqttBorker.BrokerTag.systemName)
  return _internal_mutable_systemname();
}
inline const std::string& MqttBorker_BrokerTag::_internal_systemname() const {
  return systemname_.GetNoArena();
}
inline void MqttBorker_BrokerTag::_internal_set_systemname(const std::string& value) {
  
  systemname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttBorker_BrokerTag::set_systemname(std::string&& value) {
  
  systemname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttBorker.BrokerTag.systemName)
}
inline void MqttBorker_BrokerTag::set_systemname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  systemname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttBorker.BrokerTag.systemName)
}
inline void MqttBorker_BrokerTag::set_systemname(const char* value, size_t size) {
  
  systemname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttBorker.BrokerTag.systemName)
}
inline std::string* MqttBorker_BrokerTag::_internal_mutable_systemname() {
  
  return systemname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttBorker_BrokerTag::release_systemname() {
  // @@protoc_insertion_point(field_release:MqttBorker.BrokerTag.systemName)
  
  return systemname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttBorker_BrokerTag::set_allocated_systemname(std::string* systemname) {
  if (systemname != nullptr) {
    
  } else {
    
  }
  systemname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), systemname);
  // @@protoc_insertion_point(field_set_allocated:MqttBorker.BrokerTag.systemName)
}

// int32 timer = 6;
inline void MqttBorker_BrokerTag::clear_timer() {
  timer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker_BrokerTag::_internal_timer() const {
  return timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker_BrokerTag::timer() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerTag.timer)
  return _internal_timer();
}
inline void MqttBorker_BrokerTag::_internal_set_timer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timer_ = value;
}
inline void MqttBorker_BrokerTag::set_timer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timer(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerTag.timer)
}

// -------------------------------------------------------------------

// MqttBorker_BrokerClient_ClientTopic

// string clientTopic = 1;
inline void MqttBorker_BrokerClient_ClientTopic::clear_clienttopic() {
  clienttopic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttBorker_BrokerClient_ClientTopic::clienttopic() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerClient.ClientTopic.clientTopic)
  return _internal_clienttopic();
}
inline void MqttBorker_BrokerClient_ClientTopic::set_clienttopic(const std::string& value) {
  _internal_set_clienttopic(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerClient.ClientTopic.clientTopic)
}
inline std::string* MqttBorker_BrokerClient_ClientTopic::mutable_clienttopic() {
  // @@protoc_insertion_point(field_mutable:MqttBorker.BrokerClient.ClientTopic.clientTopic)
  return _internal_mutable_clienttopic();
}
inline const std::string& MqttBorker_BrokerClient_ClientTopic::_internal_clienttopic() const {
  return clienttopic_.GetNoArena();
}
inline void MqttBorker_BrokerClient_ClientTopic::_internal_set_clienttopic(const std::string& value) {
  
  clienttopic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttBorker_BrokerClient_ClientTopic::set_clienttopic(std::string&& value) {
  
  clienttopic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttBorker.BrokerClient.ClientTopic.clientTopic)
}
inline void MqttBorker_BrokerClient_ClientTopic::set_clienttopic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clienttopic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttBorker.BrokerClient.ClientTopic.clientTopic)
}
inline void MqttBorker_BrokerClient_ClientTopic::set_clienttopic(const char* value, size_t size) {
  
  clienttopic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttBorker.BrokerClient.ClientTopic.clientTopic)
}
inline std::string* MqttBorker_BrokerClient_ClientTopic::_internal_mutable_clienttopic() {
  
  return clienttopic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttBorker_BrokerClient_ClientTopic::release_clienttopic() {
  // @@protoc_insertion_point(field_release:MqttBorker.BrokerClient.ClientTopic.clientTopic)
  
  return clienttopic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttBorker_BrokerClient_ClientTopic::set_allocated_clienttopic(std::string* clienttopic) {
  if (clienttopic != nullptr) {
    
  } else {
    
  }
  clienttopic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clienttopic);
  // @@protoc_insertion_point(field_set_allocated:MqttBorker.BrokerClient.ClientTopic.clientTopic)
}

// string topicName = 2;
inline void MqttBorker_BrokerClient_ClientTopic::clear_topicname() {
  topicname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttBorker_BrokerClient_ClientTopic::topicname() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerClient.ClientTopic.topicName)
  return _internal_topicname();
}
inline void MqttBorker_BrokerClient_ClientTopic::set_topicname(const std::string& value) {
  _internal_set_topicname(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerClient.ClientTopic.topicName)
}
inline std::string* MqttBorker_BrokerClient_ClientTopic::mutable_topicname() {
  // @@protoc_insertion_point(field_mutable:MqttBorker.BrokerClient.ClientTopic.topicName)
  return _internal_mutable_topicname();
}
inline const std::string& MqttBorker_BrokerClient_ClientTopic::_internal_topicname() const {
  return topicname_.GetNoArena();
}
inline void MqttBorker_BrokerClient_ClientTopic::_internal_set_topicname(const std::string& value) {
  
  topicname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttBorker_BrokerClient_ClientTopic::set_topicname(std::string&& value) {
  
  topicname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttBorker.BrokerClient.ClientTopic.topicName)
}
inline void MqttBorker_BrokerClient_ClientTopic::set_topicname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topicname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttBorker.BrokerClient.ClientTopic.topicName)
}
inline void MqttBorker_BrokerClient_ClientTopic::set_topicname(const char* value, size_t size) {
  
  topicname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttBorker.BrokerClient.ClientTopic.topicName)
}
inline std::string* MqttBorker_BrokerClient_ClientTopic::_internal_mutable_topicname() {
  
  return topicname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttBorker_BrokerClient_ClientTopic::release_topicname() {
  // @@protoc_insertion_point(field_release:MqttBorker.BrokerClient.ClientTopic.topicName)
  
  return topicname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttBorker_BrokerClient_ClientTopic::set_allocated_topicname(std::string* topicname) {
  if (topicname != nullptr) {
    
  } else {
    
  }
  topicname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topicname);
  // @@protoc_insertion_point(field_set_allocated:MqttBorker.BrokerClient.ClientTopic.topicName)
}

// .Qos qos = 3;
inline void MqttBorker_BrokerClient_ClientTopic::clear_qos() {
  qos_ = 0;
}
inline ::Qos MqttBorker_BrokerClient_ClientTopic::_internal_qos() const {
  return static_cast< ::Qos >(qos_);
}
inline ::Qos MqttBorker_BrokerClient_ClientTopic::qos() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerClient.ClientTopic.qos)
  return _internal_qos();
}
inline void MqttBorker_BrokerClient_ClientTopic::_internal_set_qos(::Qos value) {
  
  qos_ = value;
}
inline void MqttBorker_BrokerClient_ClientTopic::set_qos(::Qos value) {
  _internal_set_qos(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerClient.ClientTopic.qos)
}

// bool retain = 4;
inline void MqttBorker_BrokerClient_ClientTopic::clear_retain() {
  retain_ = false;
}
inline bool MqttBorker_BrokerClient_ClientTopic::_internal_retain() const {
  return retain_;
}
inline bool MqttBorker_BrokerClient_ClientTopic::retain() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerClient.ClientTopic.retain)
  return _internal_retain();
}
inline void MqttBorker_BrokerClient_ClientTopic::_internal_set_retain(bool value) {
  
  retain_ = value;
}
inline void MqttBorker_BrokerClient_ClientTopic::set_retain(bool value) {
  _internal_set_retain(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerClient.ClientTopic.retain)
}

// bool private = 5;
inline void MqttBorker_BrokerClient_ClientTopic::clear_private_() {
  private__ = false;
}
inline bool MqttBorker_BrokerClient_ClientTopic::_internal_private_() const {
  return private__;
}
inline bool MqttBorker_BrokerClient_ClientTopic::private_() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerClient.ClientTopic.private)
  return _internal_private_();
}
inline void MqttBorker_BrokerClient_ClientTopic::_internal_set_private_(bool value) {
  
  private__ = value;
}
inline void MqttBorker_BrokerClient_ClientTopic::set_private_(bool value) {
  _internal_set_private_(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerClient.ClientTopic.private)
}

// -------------------------------------------------------------------

// MqttBorker_BrokerClient

// string brokerClientName = 1;
inline void MqttBorker_BrokerClient::clear_brokerclientname() {
  brokerclientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttBorker_BrokerClient::brokerclientname() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerClient.brokerClientName)
  return _internal_brokerclientname();
}
inline void MqttBorker_BrokerClient::set_brokerclientname(const std::string& value) {
  _internal_set_brokerclientname(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerClient.brokerClientName)
}
inline std::string* MqttBorker_BrokerClient::mutable_brokerclientname() {
  // @@protoc_insertion_point(field_mutable:MqttBorker.BrokerClient.brokerClientName)
  return _internal_mutable_brokerclientname();
}
inline const std::string& MqttBorker_BrokerClient::_internal_brokerclientname() const {
  return brokerclientname_.GetNoArena();
}
inline void MqttBorker_BrokerClient::_internal_set_brokerclientname(const std::string& value) {
  
  brokerclientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttBorker_BrokerClient::set_brokerclientname(std::string&& value) {
  
  brokerclientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttBorker.BrokerClient.brokerClientName)
}
inline void MqttBorker_BrokerClient::set_brokerclientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brokerclientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttBorker.BrokerClient.brokerClientName)
}
inline void MqttBorker_BrokerClient::set_brokerclientname(const char* value, size_t size) {
  
  brokerclientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttBorker.BrokerClient.brokerClientName)
}
inline std::string* MqttBorker_BrokerClient::_internal_mutable_brokerclientname() {
  
  return brokerclientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttBorker_BrokerClient::release_brokerclientname() {
  // @@protoc_insertion_point(field_release:MqttBorker.BrokerClient.brokerClientName)
  
  return brokerclientname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttBorker_BrokerClient::set_allocated_brokerclientname(std::string* brokerclientname) {
  if (brokerclientname != nullptr) {
    
  } else {
    
  }
  brokerclientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brokerclientname);
  // @@protoc_insertion_point(field_set_allocated:MqttBorker.BrokerClient.brokerClientName)
}

// string brokerClientID = 2;
inline void MqttBorker_BrokerClient::clear_brokerclientid() {
  brokerclientid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttBorker_BrokerClient::brokerclientid() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerClient.brokerClientID)
  return _internal_brokerclientid();
}
inline void MqttBorker_BrokerClient::set_brokerclientid(const std::string& value) {
  _internal_set_brokerclientid(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerClient.brokerClientID)
}
inline std::string* MqttBorker_BrokerClient::mutable_brokerclientid() {
  // @@protoc_insertion_point(field_mutable:MqttBorker.BrokerClient.brokerClientID)
  return _internal_mutable_brokerclientid();
}
inline const std::string& MqttBorker_BrokerClient::_internal_brokerclientid() const {
  return brokerclientid_.GetNoArena();
}
inline void MqttBorker_BrokerClient::_internal_set_brokerclientid(const std::string& value) {
  
  brokerclientid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttBorker_BrokerClient::set_brokerclientid(std::string&& value) {
  
  brokerclientid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttBorker.BrokerClient.brokerClientID)
}
inline void MqttBorker_BrokerClient::set_brokerclientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brokerclientid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttBorker.BrokerClient.brokerClientID)
}
inline void MqttBorker_BrokerClient::set_brokerclientid(const char* value, size_t size) {
  
  brokerclientid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttBorker.BrokerClient.brokerClientID)
}
inline std::string* MqttBorker_BrokerClient::_internal_mutable_brokerclientid() {
  
  return brokerclientid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttBorker_BrokerClient::release_brokerclientid() {
  // @@protoc_insertion_point(field_release:MqttBorker.BrokerClient.brokerClientID)
  
  return brokerclientid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttBorker_BrokerClient::set_allocated_brokerclientid(std::string* brokerclientid) {
  if (brokerclientid != nullptr) {
    
  } else {
    
  }
  brokerclientid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brokerclientid);
  // @@protoc_insertion_point(field_set_allocated:MqttBorker.BrokerClient.brokerClientID)
}

// .Qos qos = 3;
inline void MqttBorker_BrokerClient::clear_qos() {
  qos_ = 0;
}
inline ::Qos MqttBorker_BrokerClient::_internal_qos() const {
  return static_cast< ::Qos >(qos_);
}
inline ::Qos MqttBorker_BrokerClient::qos() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerClient.qos)
  return _internal_qos();
}
inline void MqttBorker_BrokerClient::_internal_set_qos(::Qos value) {
  
  qos_ = value;
}
inline void MqttBorker_BrokerClient::set_qos(::Qos value) {
  _internal_set_qos(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerClient.qos)
}

// .ClientActions clientActions = 4;
inline void MqttBorker_BrokerClient::clear_clientactions() {
  clientactions_ = 0;
}
inline ::ClientActions MqttBorker_BrokerClient::_internal_clientactions() const {
  return static_cast< ::ClientActions >(clientactions_);
}
inline ::ClientActions MqttBorker_BrokerClient::clientactions() const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerClient.clientActions)
  return _internal_clientactions();
}
inline void MqttBorker_BrokerClient::_internal_set_clientactions(::ClientActions value) {
  
  clientactions_ = value;
}
inline void MqttBorker_BrokerClient::set_clientactions(::ClientActions value) {
  _internal_set_clientactions(value);
  // @@protoc_insertion_point(field_set:MqttBorker.BrokerClient.clientActions)
}

// repeated .MqttBorker.BrokerClient.ClientTopic clientTopic = 5;
inline int MqttBorker_BrokerClient::_internal_clienttopic_size() const {
  return clienttopic_.size();
}
inline int MqttBorker_BrokerClient::clienttopic_size() const {
  return _internal_clienttopic_size();
}
inline void MqttBorker_BrokerClient::clear_clienttopic() {
  clienttopic_.Clear();
}
inline ::MqttBorker_BrokerClient_ClientTopic* MqttBorker_BrokerClient::mutable_clienttopic(int index) {
  // @@protoc_insertion_point(field_mutable:MqttBorker.BrokerClient.clientTopic)
  return clienttopic_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerClient_ClientTopic >*
MqttBorker_BrokerClient::mutable_clienttopic() {
  // @@protoc_insertion_point(field_mutable_list:MqttBorker.BrokerClient.clientTopic)
  return &clienttopic_;
}
inline const ::MqttBorker_BrokerClient_ClientTopic& MqttBorker_BrokerClient::_internal_clienttopic(int index) const {
  return clienttopic_.Get(index);
}
inline const ::MqttBorker_BrokerClient_ClientTopic& MqttBorker_BrokerClient::clienttopic(int index) const {
  // @@protoc_insertion_point(field_get:MqttBorker.BrokerClient.clientTopic)
  return _internal_clienttopic(index);
}
inline ::MqttBorker_BrokerClient_ClientTopic* MqttBorker_BrokerClient::_internal_add_clienttopic() {
  return clienttopic_.Add();
}
inline ::MqttBorker_BrokerClient_ClientTopic* MqttBorker_BrokerClient::add_clienttopic() {
  // @@protoc_insertion_point(field_add:MqttBorker.BrokerClient.clientTopic)
  return _internal_add_clienttopic();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerClient_ClientTopic >&
MqttBorker_BrokerClient::clienttopic() const {
  // @@protoc_insertion_point(field_list:MqttBorker.BrokerClient.clientTopic)
  return clienttopic_;
}

// -------------------------------------------------------------------

// MqttBorker

// string clientName = 1;
inline void MqttBorker::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttBorker::clientname() const {
  // @@protoc_insertion_point(field_get:MqttBorker.clientName)
  return _internal_clientname();
}
inline void MqttBorker::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:MqttBorker.clientName)
}
inline std::string* MqttBorker::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:MqttBorker.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& MqttBorker::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void MqttBorker::_internal_set_clientname(const std::string& value) {
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttBorker::set_clientname(std::string&& value) {
  
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttBorker.clientName)
}
inline void MqttBorker::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttBorker.clientName)
}
inline void MqttBorker::set_clientname(const char* value, size_t size) {
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttBorker.clientName)
}
inline std::string* MqttBorker::_internal_mutable_clientname() {
  
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttBorker::release_clientname() {
  // @@protoc_insertion_point(field_release:MqttBorker.clientName)
  
  return clientname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttBorker::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    
  } else {
    
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:MqttBorker.clientName)
}

// string clientID = 2;
inline void MqttBorker::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttBorker::clientid() const {
  // @@protoc_insertion_point(field_get:MqttBorker.clientID)
  return _internal_clientid();
}
inline void MqttBorker::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:MqttBorker.clientID)
}
inline std::string* MqttBorker::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:MqttBorker.clientID)
  return _internal_mutable_clientid();
}
inline const std::string& MqttBorker::_internal_clientid() const {
  return clientid_.GetNoArena();
}
inline void MqttBorker::_internal_set_clientid(const std::string& value) {
  
  clientid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttBorker::set_clientid(std::string&& value) {
  
  clientid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttBorker.clientID)
}
inline void MqttBorker::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttBorker.clientID)
}
inline void MqttBorker::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttBorker.clientID)
}
inline std::string* MqttBorker::_internal_mutable_clientid() {
  
  return clientid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttBorker::release_clientid() {
  // @@protoc_insertion_point(field_release:MqttBorker.clientID)
  
  return clientid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttBorker::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:MqttBorker.clientID)
}

// .Protocol protocol = 3;
inline void MqttBorker::clear_protocol() {
  protocol_ = 0;
}
inline ::Protocol MqttBorker::_internal_protocol() const {
  return static_cast< ::Protocol >(protocol_);
}
inline ::Protocol MqttBorker::protocol() const {
  // @@protoc_insertion_point(field_get:MqttBorker.protocol)
  return _internal_protocol();
}
inline void MqttBorker::_internal_set_protocol(::Protocol value) {
  
  protocol_ = value;
}
inline void MqttBorker::set_protocol(::Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:MqttBorker.protocol)
}

// string hostAddress = 4;
inline void MqttBorker::clear_hostaddress() {
  hostaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttBorker::hostaddress() const {
  // @@protoc_insertion_point(field_get:MqttBorker.hostAddress)
  return _internal_hostaddress();
}
inline void MqttBorker::set_hostaddress(const std::string& value) {
  _internal_set_hostaddress(value);
  // @@protoc_insertion_point(field_set:MqttBorker.hostAddress)
}
inline std::string* MqttBorker::mutable_hostaddress() {
  // @@protoc_insertion_point(field_mutable:MqttBorker.hostAddress)
  return _internal_mutable_hostaddress();
}
inline const std::string& MqttBorker::_internal_hostaddress() const {
  return hostaddress_.GetNoArena();
}
inline void MqttBorker::_internal_set_hostaddress(const std::string& value) {
  
  hostaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttBorker::set_hostaddress(std::string&& value) {
  
  hostaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttBorker.hostAddress)
}
inline void MqttBorker::set_hostaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttBorker.hostAddress)
}
inline void MqttBorker::set_hostaddress(const char* value, size_t size) {
  
  hostaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttBorker.hostAddress)
}
inline std::string* MqttBorker::_internal_mutable_hostaddress() {
  
  return hostaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttBorker::release_hostaddress() {
  // @@protoc_insertion_point(field_release:MqttBorker.hostAddress)
  
  return hostaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttBorker::set_allocated_hostaddress(std::string* hostaddress) {
  if (hostaddress != nullptr) {
    
  } else {
    
  }
  hostaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostaddress);
  // @@protoc_insertion_point(field_set_allocated:MqttBorker.hostAddress)
}

// int32 hostPort = 5;
inline void MqttBorker::clear_hostport() {
  hostport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker::_internal_hostport() const {
  return hostport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker::hostport() const {
  // @@protoc_insertion_point(field_get:MqttBorker.hostPort)
  return _internal_hostport();
}
inline void MqttBorker::_internal_set_hostport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hostport_ = value;
}
inline void MqttBorker::set_hostport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hostport(value);
  // @@protoc_insertion_point(field_set:MqttBorker.hostPort)
}

// string userName = 6;
inline void MqttBorker::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttBorker::username() const {
  // @@protoc_insertion_point(field_get:MqttBorker.userName)
  return _internal_username();
}
inline void MqttBorker::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:MqttBorker.userName)
}
inline std::string* MqttBorker::mutable_username() {
  // @@protoc_insertion_point(field_mutable:MqttBorker.userName)
  return _internal_mutable_username();
}
inline const std::string& MqttBorker::_internal_username() const {
  return username_.GetNoArena();
}
inline void MqttBorker::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttBorker::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttBorker.userName)
}
inline void MqttBorker::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttBorker.userName)
}
inline void MqttBorker::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttBorker.userName)
}
inline std::string* MqttBorker::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttBorker::release_username() {
  // @@protoc_insertion_point(field_release:MqttBorker.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttBorker::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:MqttBorker.userName)
}

// string userPassword = 7;
inline void MqttBorker::clear_userpassword() {
  userpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MqttBorker::userpassword() const {
  // @@protoc_insertion_point(field_get:MqttBorker.userPassword)
  return _internal_userpassword();
}
inline void MqttBorker::set_userpassword(const std::string& value) {
  _internal_set_userpassword(value);
  // @@protoc_insertion_point(field_set:MqttBorker.userPassword)
}
inline std::string* MqttBorker::mutable_userpassword() {
  // @@protoc_insertion_point(field_mutable:MqttBorker.userPassword)
  return _internal_mutable_userpassword();
}
inline const std::string& MqttBorker::_internal_userpassword() const {
  return userpassword_.GetNoArena();
}
inline void MqttBorker::_internal_set_userpassword(const std::string& value) {
  
  userpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MqttBorker::set_userpassword(std::string&& value) {
  
  userpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MqttBorker.userPassword)
}
inline void MqttBorker::set_userpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MqttBorker.userPassword)
}
inline void MqttBorker::set_userpassword(const char* value, size_t size) {
  
  userpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MqttBorker.userPassword)
}
inline std::string* MqttBorker::_internal_mutable_userpassword() {
  
  return userpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MqttBorker::release_userpassword() {
  // @@protoc_insertion_point(field_release:MqttBorker.userPassword)
  
  return userpassword_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MqttBorker::set_allocated_userpassword(std::string* userpassword) {
  if (userpassword != nullptr) {
    
  } else {
    
  }
  userpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userpassword);
  // @@protoc_insertion_point(field_set_allocated:MqttBorker.userPassword)
}

// int32 maxCient = 8;
inline void MqttBorker::clear_maxcient() {
  maxcient_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker::_internal_maxcient() const {
  return maxcient_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker::maxcient() const {
  // @@protoc_insertion_point(field_get:MqttBorker.maxCient)
  return _internal_maxcient();
}
inline void MqttBorker::_internal_set_maxcient(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxcient_ = value;
}
inline void MqttBorker::set_maxcient(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxcient(value);
  // @@protoc_insertion_point(field_set:MqttBorker.maxCient)
}

// int32 maxLenght = 9;
inline void MqttBorker::clear_maxlenght() {
  maxlenght_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker::_internal_maxlenght() const {
  return maxlenght_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker::maxlenght() const {
  // @@protoc_insertion_point(field_get:MqttBorker.maxLenght)
  return _internal_maxlenght();
}
inline void MqttBorker::_internal_set_maxlenght(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxlenght_ = value;
}
inline void MqttBorker::set_maxlenght(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxlenght(value);
  // @@protoc_insertion_point(field_set:MqttBorker.maxLenght)
}

// .Qos brokerQos = 10;
inline void MqttBorker::clear_brokerqos() {
  brokerqos_ = 0;
}
inline ::Qos MqttBorker::_internal_brokerqos() const {
  return static_cast< ::Qos >(brokerqos_);
}
inline ::Qos MqttBorker::brokerqos() const {
  // @@protoc_insertion_point(field_get:MqttBorker.brokerQos)
  return _internal_brokerqos();
}
inline void MqttBorker::_internal_set_brokerqos(::Qos value) {
  
  brokerqos_ = value;
}
inline void MqttBorker::set_brokerqos(::Qos value) {
  _internal_set_brokerqos(value);
  // @@protoc_insertion_point(field_set:MqttBorker.brokerQos)
}

// int32 maxQueLeght = 11;
inline void MqttBorker::clear_maxqueleght() {
  maxqueleght_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker::_internal_maxqueleght() const {
  return maxqueleght_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker::maxqueleght() const {
  // @@protoc_insertion_point(field_get:MqttBorker.maxQueLeght)
  return _internal_maxqueleght();
}
inline void MqttBorker::_internal_set_maxqueleght(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxqueleght_ = value;
}
inline void MqttBorker::set_maxqueleght(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxqueleght(value);
  // @@protoc_insertion_point(field_set:MqttBorker.maxQueLeght)
}

// int32 retainMessage = 12;
inline void MqttBorker::clear_retainmessage() {
  retainmessage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker::_internal_retainmessage() const {
  return retainmessage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker::retainmessage() const {
  // @@protoc_insertion_point(field_get:MqttBorker.retainMessage)
  return _internal_retainmessage();
}
inline void MqttBorker::_internal_set_retainmessage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  retainmessage_ = value;
}
inline void MqttBorker::set_retainmessage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retainmessage(value);
  // @@protoc_insertion_point(field_set:MqttBorker.retainMessage)
}

// bool sendTimestamp = 13;
inline void MqttBorker::clear_sendtimestamp() {
  sendtimestamp_ = false;
}
inline bool MqttBorker::_internal_sendtimestamp() const {
  return sendtimestamp_;
}
inline bool MqttBorker::sendtimestamp() const {
  // @@protoc_insertion_point(field_get:MqttBorker.sendTimestamp)
  return _internal_sendtimestamp();
}
inline void MqttBorker::_internal_set_sendtimestamp(bool value) {
  
  sendtimestamp_ = value;
}
inline void MqttBorker::set_sendtimestamp(bool value) {
  _internal_set_sendtimestamp(value);
  // @@protoc_insertion_point(field_set:MqttBorker.sendTimestamp)
}

// bool keepAlive = 14;
inline void MqttBorker::clear_keepalive() {
  keepalive_ = false;
}
inline bool MqttBorker::_internal_keepalive() const {
  return keepalive_;
}
inline bool MqttBorker::keepalive() const {
  // @@protoc_insertion_point(field_get:MqttBorker.keepAlive)
  return _internal_keepalive();
}
inline void MqttBorker::_internal_set_keepalive(bool value) {
  
  keepalive_ = value;
}
inline void MqttBorker::set_keepalive(bool value) {
  _internal_set_keepalive(value);
  // @@protoc_insertion_point(field_set:MqttBorker.keepAlive)
}

// int32 keepAliveTime = 15;
inline void MqttBorker::clear_keepalivetime() {
  keepalivetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker::_internal_keepalivetime() const {
  return keepalivetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MqttBorker::keepalivetime() const {
  // @@protoc_insertion_point(field_get:MqttBorker.keepAliveTime)
  return _internal_keepalivetime();
}
inline void MqttBorker::_internal_set_keepalivetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keepalivetime_ = value;
}
inline void MqttBorker::set_keepalivetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keepalivetime(value);
  // @@protoc_insertion_point(field_set:MqttBorker.keepAliveTime)
}

// bool mqtt31Compatilble = 16;
inline void MqttBorker::clear_mqtt31compatilble() {
  mqtt31compatilble_ = false;
}
inline bool MqttBorker::_internal_mqtt31compatilble() const {
  return mqtt31compatilble_;
}
inline bool MqttBorker::mqtt31compatilble() const {
  // @@protoc_insertion_point(field_get:MqttBorker.mqtt31Compatilble)
  return _internal_mqtt31compatilble();
}
inline void MqttBorker::_internal_set_mqtt31compatilble(bool value) {
  
  mqtt31compatilble_ = value;
}
inline void MqttBorker::set_mqtt31compatilble(bool value) {
  _internal_set_mqtt31compatilble(value);
  // @@protoc_insertion_point(field_set:MqttBorker.mqtt31Compatilble)
}

// bool retainWill = 17;
inline void MqttBorker::clear_retainwill() {
  retainwill_ = false;
}
inline bool MqttBorker::_internal_retainwill() const {
  return retainwill_;
}
inline bool MqttBorker::retainwill() const {
  // @@protoc_insertion_point(field_get:MqttBorker.retainWill)
  return _internal_retainwill();
}
inline void MqttBorker::_internal_set_retainwill(bool value) {
  
  retainwill_ = value;
}
inline void MqttBorker::set_retainwill(bool value) {
  _internal_set_retainwill(value);
  // @@protoc_insertion_point(field_set:MqttBorker.retainWill)
}

// bool wildcardSub = 18;
inline void MqttBorker::clear_wildcardsub() {
  wildcardsub_ = false;
}
inline bool MqttBorker::_internal_wildcardsub() const {
  return wildcardsub_;
}
inline bool MqttBorker::wildcardsub() const {
  // @@protoc_insertion_point(field_get:MqttBorker.wildcardSub)
  return _internal_wildcardsub();
}
inline void MqttBorker::_internal_set_wildcardsub(bool value) {
  
  wildcardsub_ = value;
}
inline void MqttBorker::set_wildcardsub(bool value) {
  _internal_set_wildcardsub(value);
  // @@protoc_insertion_point(field_set:MqttBorker.wildcardSub)
}

// repeated .MqttBorker.BrokerClient brokerClient = 19;
inline int MqttBorker::_internal_brokerclient_size() const {
  return brokerclient_.size();
}
inline int MqttBorker::brokerclient_size() const {
  return _internal_brokerclient_size();
}
inline void MqttBorker::clear_brokerclient() {
  brokerclient_.Clear();
}
inline ::MqttBorker_BrokerClient* MqttBorker::mutable_brokerclient(int index) {
  // @@protoc_insertion_point(field_mutable:MqttBorker.brokerClient)
  return brokerclient_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerClient >*
MqttBorker::mutable_brokerclient() {
  // @@protoc_insertion_point(field_mutable_list:MqttBorker.brokerClient)
  return &brokerclient_;
}
inline const ::MqttBorker_BrokerClient& MqttBorker::_internal_brokerclient(int index) const {
  return brokerclient_.Get(index);
}
inline const ::MqttBorker_BrokerClient& MqttBorker::brokerclient(int index) const {
  // @@protoc_insertion_point(field_get:MqttBorker.brokerClient)
  return _internal_brokerclient(index);
}
inline ::MqttBorker_BrokerClient* MqttBorker::_internal_add_brokerclient() {
  return brokerclient_.Add();
}
inline ::MqttBorker_BrokerClient* MqttBorker::add_brokerclient() {
  // @@protoc_insertion_point(field_add:MqttBorker.brokerClient)
  return _internal_add_brokerclient();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerClient >&
MqttBorker::brokerclient() const {
  // @@protoc_insertion_point(field_list:MqttBorker.brokerClient)
  return brokerclient_;
}

// repeated .MqttBorker.BrokerTag brokerTag = 20;
inline int MqttBorker::_internal_brokertag_size() const {
  return brokertag_.size();
}
inline int MqttBorker::brokertag_size() const {
  return _internal_brokertag_size();
}
inline void MqttBorker::clear_brokertag() {
  brokertag_.Clear();
}
inline ::MqttBorker_BrokerTag* MqttBorker::mutable_brokertag(int index) {
  // @@protoc_insertion_point(field_mutable:MqttBorker.brokerTag)
  return brokertag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerTag >*
MqttBorker::mutable_brokertag() {
  // @@protoc_insertion_point(field_mutable_list:MqttBorker.brokerTag)
  return &brokertag_;
}
inline const ::MqttBorker_BrokerTag& MqttBorker::_internal_brokertag(int index) const {
  return brokertag_.Get(index);
}
inline const ::MqttBorker_BrokerTag& MqttBorker::brokertag(int index) const {
  // @@protoc_insertion_point(field_get:MqttBorker.brokerTag)
  return _internal_brokertag(index);
}
inline ::MqttBorker_BrokerTag* MqttBorker::_internal_add_brokertag() {
  return brokertag_.Add();
}
inline ::MqttBorker_BrokerTag* MqttBorker::add_brokertag() {
  // @@protoc_insertion_point(field_add:MqttBorker.brokerTag)
  return _internal_add_brokertag();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttBorker_BrokerTag >&
MqttBorker::brokertag() const {
  // @@protoc_insertion_point(field_list:MqttBorker.brokerTag)
  return brokertag_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Qos> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qos>() {
  return ::Qos_descriptor();
}
template <> struct is_proto_enum< ::Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol>() {
  return ::Protocol_descriptor();
}
template <> struct is_proto_enum< ::MqttVarType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MqttVarType>() {
  return ::MqttVarType_descriptor();
}
template <> struct is_proto_enum< ::ClientActions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientActions>() {
  return ::ClientActions_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mqtt_2eproto
