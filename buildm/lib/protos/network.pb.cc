// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#include "network.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_network_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GatewayNetworksConfig_NetworkDNSConfig_network_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_network_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GatewayNetworksConfig_NetworkIPConfig_network_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_network_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GatewayNetworksConfig_NetworksConfig_network_2eproto;
class NetworkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkResponse> _instance;
} _NetworkResponse_default_instance_;
class GatewayNetworksConfig_NetworksConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GatewayNetworksConfig_NetworksConfig> _instance;
} _GatewayNetworksConfig_NetworksConfig_default_instance_;
class GatewayNetworksConfig_NetworkIPConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GatewayNetworksConfig_NetworkIPConfig> _instance;
} _GatewayNetworksConfig_NetworkIPConfig_default_instance_;
class GatewayNetworksConfig_NetworkDNSConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GatewayNetworksConfig_NetworkDNSConfig> _instance;
} _GatewayNetworksConfig_NetworkDNSConfig_default_instance_;
class GatewayNetworksConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GatewayNetworksConfig> _instance;
} _GatewayNetworksConfig_default_instance_;
static void InitDefaultsscc_info_GatewayNetworksConfig_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GatewayNetworksConfig_default_instance_;
    new (ptr) ::GatewayNetworksConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayNetworksConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GatewayNetworksConfig_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GatewayNetworksConfig_network_2eproto}, {
      &scc_info_GatewayNetworksConfig_NetworkIPConfig_network_2eproto.base,
      &scc_info_GatewayNetworksConfig_NetworkDNSConfig_network_2eproto.base,
      &scc_info_GatewayNetworksConfig_NetworksConfig_network_2eproto.base,}};

static void InitDefaultsscc_info_GatewayNetworksConfig_NetworkDNSConfig_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GatewayNetworksConfig_NetworkDNSConfig_default_instance_;
    new (ptr) ::GatewayNetworksConfig_NetworkDNSConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayNetworksConfig_NetworkDNSConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GatewayNetworksConfig_NetworkDNSConfig_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GatewayNetworksConfig_NetworkDNSConfig_network_2eproto}, {}};

static void InitDefaultsscc_info_GatewayNetworksConfig_NetworkIPConfig_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GatewayNetworksConfig_NetworkIPConfig_default_instance_;
    new (ptr) ::GatewayNetworksConfig_NetworkIPConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayNetworksConfig_NetworkIPConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GatewayNetworksConfig_NetworkIPConfig_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GatewayNetworksConfig_NetworkIPConfig_network_2eproto}, {}};

static void InitDefaultsscc_info_GatewayNetworksConfig_NetworksConfig_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GatewayNetworksConfig_NetworksConfig_default_instance_;
    new (ptr) ::GatewayNetworksConfig_NetworksConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayNetworksConfig_NetworksConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GatewayNetworksConfig_NetworksConfig_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GatewayNetworksConfig_NetworksConfig_network_2eproto}, {}};

static void InitDefaultsscc_info_NetworkResponse_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NetworkResponse_default_instance_;
    new (ptr) ::NetworkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetworkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkResponse_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkResponse_network_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_network_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_network_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_network_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_network_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetworkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetworkResponse, success_),
  PROTOBUF_FIELD_OFFSET(::NetworkResponse, errorcode_),
  PROTOBUF_FIELD_OFFSET(::NetworkResponse, errordesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworksConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworksConfig, dhcpenabled_),
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworksConfig, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworkIPConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworkIPConfig, netip_),
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworkIPConfig, netmask_),
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworkIPConfig, defaultgate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworkDNSConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworkDNSConfig, dnsconfig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig, networkipconfig_),
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig, networkdnsconfig_),
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig, otnetworkconfig_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NetworkResponse)},
  { 8, -1, sizeof(::GatewayNetworksConfig_NetworksConfig)},
  { 15, -1, sizeof(::GatewayNetworksConfig_NetworkIPConfig)},
  { 23, -1, sizeof(::GatewayNetworksConfig_NetworkDNSConfig)},
  { 29, -1, sizeof(::GatewayNetworksConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetworkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GatewayNetworksConfig_NetworksConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GatewayNetworksConfig_NetworkIPConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GatewayNetworksConfig_NetworkDNSConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GatewayNetworksConfig_default_instance_),
};

const char descriptor_table_protodef_network_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rnetwork.proto\"H\n\017NetworkResponse\022\017\n\007Su"
  "ccess\030\001 \001(\010\022\021\n\terrorCode\030\002 \001(\005\022\021\n\terrorD"
  "esc\030\003 \001(\t\"\201\003\n\025GatewayNetworksConfig\022\?\n\017n"
  "etworkIPConfig\030\001 \003(\0132&.GatewayNetworksCo"
  "nfig.NetworkIPConfig\022A\n\020networkDNSConfig"
  "\030\002 \003(\0132\'.GatewayNetworksConfig.NetworkDN"
  "SConfig\022>\n\017OTNetworkConfig\030\003 \001(\0132%.Gatew"
  "ayNetworksConfig.NetworksConfig\0325\n\016Netwo"
  "rksConfig\022\023\n\013dhcpEnabled\030\001 \001(\010\022\016\n\006Status"
  "\030\002 \001(\010\032F\n\017NetworkIPConfig\022\r\n\005netIP\030\001 \001(\t"
  "\022\017\n\007netMask\030\002 \001(\t\022\023\n\013defaultGate\030\003 \001(\t\032%"
  "\n\020NetworkDNSConfig\022\021\n\tDNSConfig\030\001 \001(\t2Z\n"
  "\023SystemNetworkConfig\022C\n\027SendSystemNetwor"
  "kConfig\022\026.GatewayNetworksConfig\032\020.Networ"
  "kResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_network_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_network_2eproto_sccs[5] = {
  &scc_info_GatewayNetworksConfig_network_2eproto.base,
  &scc_info_GatewayNetworksConfig_NetworkDNSConfig_network_2eproto.base,
  &scc_info_GatewayNetworksConfig_NetworkIPConfig_network_2eproto.base,
  &scc_info_GatewayNetworksConfig_NetworksConfig_network_2eproto.base,
  &scc_info_NetworkResponse_network_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_network_2eproto_once;
static bool descriptor_table_network_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eproto = {
  &descriptor_table_network_2eproto_initialized, descriptor_table_protodef_network_2eproto, "network.proto", 577,
  &descriptor_table_network_2eproto_once, descriptor_table_network_2eproto_sccs, descriptor_table_network_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_network_2eproto::offsets,
  file_level_metadata_network_2eproto, 5, file_level_enum_descriptors_network_2eproto, file_level_service_descriptors_network_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_network_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_network_2eproto), true);

// ===================================================================

void NetworkResponse::InitAsDefaultInstance() {
}
class NetworkResponse::_Internal {
 public:
};

NetworkResponse::NetworkResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetworkResponse)
}
NetworkResponse::NetworkResponse(const NetworkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errordesc().empty()) {
    errordesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errordesc_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:NetworkResponse)
}

void NetworkResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkResponse_network_2eproto.base);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
}

NetworkResponse::~NetworkResponse() {
  // @@protoc_insertion_point(destructor:NetworkResponse)
  SharedDtor();
}

void NetworkResponse::SharedDtor() {
  errordesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkResponse& NetworkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkResponse_network_2eproto.base);
  return *internal_default_instance();
}


void NetworkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errordesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  _internal_metadata_.Clear();
}

const char* NetworkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errorDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errordesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NetworkResponse.errorDesc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 errorCode = 2;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // string errorDesc = 3;
  if (this->errordesc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errordesc().data(), static_cast<int>(this->_internal_errordesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetworkResponse.errorDesc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errordesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkResponse)
  return target;
}

size_t NetworkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorDesc = 3;
  if (this->errordesc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errordesc());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 errorCode = 2;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkResponse)
    MergeFrom(*source);
  }
}

void NetworkResponse::MergeFrom(const NetworkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errordesc().size() > 0) {

    errordesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errordesc_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void NetworkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkResponse::CopyFrom(const NetworkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkResponse::IsInitialized() const {
  return true;
}

void NetworkResponse::InternalSwap(NetworkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errordesc_.Swap(&other->errordesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GatewayNetworksConfig_NetworksConfig::InitAsDefaultInstance() {
}
class GatewayNetworksConfig_NetworksConfig::_Internal {
 public:
};

GatewayNetworksConfig_NetworksConfig::GatewayNetworksConfig_NetworksConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GatewayNetworksConfig.NetworksConfig)
}
GatewayNetworksConfig_NetworksConfig::GatewayNetworksConfig_NetworksConfig(const GatewayNetworksConfig_NetworksConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dhcpenabled_, &from.dhcpenabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&dhcpenabled_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:GatewayNetworksConfig.NetworksConfig)
}

void GatewayNetworksConfig_NetworksConfig::SharedCtor() {
  ::memset(&dhcpenabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&dhcpenabled_)) + sizeof(status_));
}

GatewayNetworksConfig_NetworksConfig::~GatewayNetworksConfig_NetworksConfig() {
  // @@protoc_insertion_point(destructor:GatewayNetworksConfig.NetworksConfig)
  SharedDtor();
}

void GatewayNetworksConfig_NetworksConfig::SharedDtor() {
}

void GatewayNetworksConfig_NetworksConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GatewayNetworksConfig_NetworksConfig& GatewayNetworksConfig_NetworksConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GatewayNetworksConfig_NetworksConfig_network_2eproto.base);
  return *internal_default_instance();
}


void GatewayNetworksConfig_NetworksConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayNetworksConfig.NetworksConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dhcpenabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&dhcpenabled_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* GatewayNetworksConfig_NetworksConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool dhcpEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dhcpenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GatewayNetworksConfig_NetworksConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayNetworksConfig.NetworksConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool dhcpEnabled = 1;
  if (this->dhcpenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_dhcpenabled(), target);
  }

  // bool Status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayNetworksConfig.NetworksConfig)
  return target;
}

size_t GatewayNetworksConfig_NetworksConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayNetworksConfig.NetworksConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool dhcpEnabled = 1;
  if (this->dhcpenabled() != 0) {
    total_size += 1 + 1;
  }

  // bool Status = 2;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GatewayNetworksConfig_NetworksConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayNetworksConfig.NetworksConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GatewayNetworksConfig_NetworksConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GatewayNetworksConfig_NetworksConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayNetworksConfig.NetworksConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayNetworksConfig.NetworksConfig)
    MergeFrom(*source);
  }
}

void GatewayNetworksConfig_NetworksConfig::MergeFrom(const GatewayNetworksConfig_NetworksConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayNetworksConfig.NetworksConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dhcpenabled() != 0) {
    _internal_set_dhcpenabled(from._internal_dhcpenabled());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void GatewayNetworksConfig_NetworksConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayNetworksConfig.NetworksConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayNetworksConfig_NetworksConfig::CopyFrom(const GatewayNetworksConfig_NetworksConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayNetworksConfig.NetworksConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayNetworksConfig_NetworksConfig::IsInitialized() const {
  return true;
}

void GatewayNetworksConfig_NetworksConfig::InternalSwap(GatewayNetworksConfig_NetworksConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dhcpenabled_, other->dhcpenabled_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GatewayNetworksConfig_NetworksConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GatewayNetworksConfig_NetworkIPConfig::InitAsDefaultInstance() {
}
class GatewayNetworksConfig_NetworkIPConfig::_Internal {
 public:
};

GatewayNetworksConfig_NetworkIPConfig::GatewayNetworksConfig_NetworkIPConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GatewayNetworksConfig.NetworkIPConfig)
}
GatewayNetworksConfig_NetworkIPConfig::GatewayNetworksConfig_NetworkIPConfig(const GatewayNetworksConfig_NetworkIPConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  netip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_netip().empty()) {
    netip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.netip_);
  }
  netmask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_netmask().empty()) {
    netmask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.netmask_);
  }
  defaultgate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_defaultgate().empty()) {
    defaultgate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.defaultgate_);
  }
  // @@protoc_insertion_point(copy_constructor:GatewayNetworksConfig.NetworkIPConfig)
}

void GatewayNetworksConfig_NetworkIPConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GatewayNetworksConfig_NetworkIPConfig_network_2eproto.base);
  netip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  netmask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defaultgate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GatewayNetworksConfig_NetworkIPConfig::~GatewayNetworksConfig_NetworkIPConfig() {
  // @@protoc_insertion_point(destructor:GatewayNetworksConfig.NetworkIPConfig)
  SharedDtor();
}

void GatewayNetworksConfig_NetworkIPConfig::SharedDtor() {
  netip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  netmask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defaultgate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GatewayNetworksConfig_NetworkIPConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GatewayNetworksConfig_NetworkIPConfig& GatewayNetworksConfig_NetworkIPConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GatewayNetworksConfig_NetworkIPConfig_network_2eproto.base);
  return *internal_default_instance();
}


void GatewayNetworksConfig_NetworkIPConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayNetworksConfig.NetworkIPConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  netip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  netmask_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defaultgate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GatewayNetworksConfig_NetworkIPConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string netIP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_netip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayNetworksConfig.NetworkIPConfig.netIP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string netMask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_netmask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayNetworksConfig.NetworkIPConfig.netMask"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string defaultGate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_defaultgate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayNetworksConfig.NetworkIPConfig.defaultGate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GatewayNetworksConfig_NetworkIPConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayNetworksConfig.NetworkIPConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string netIP = 1;
  if (this->netip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_netip().data(), static_cast<int>(this->_internal_netip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GatewayNetworksConfig.NetworkIPConfig.netIP");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_netip(), target);
  }

  // string netMask = 2;
  if (this->netmask().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_netmask().data(), static_cast<int>(this->_internal_netmask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GatewayNetworksConfig.NetworkIPConfig.netMask");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_netmask(), target);
  }

  // string defaultGate = 3;
  if (this->defaultgate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_defaultgate().data(), static_cast<int>(this->_internal_defaultgate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GatewayNetworksConfig.NetworkIPConfig.defaultGate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_defaultgate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayNetworksConfig.NetworkIPConfig)
  return target;
}

size_t GatewayNetworksConfig_NetworkIPConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayNetworksConfig.NetworkIPConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string netIP = 1;
  if (this->netip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_netip());
  }

  // string netMask = 2;
  if (this->netmask().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_netmask());
  }

  // string defaultGate = 3;
  if (this->defaultgate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defaultgate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GatewayNetworksConfig_NetworkIPConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayNetworksConfig.NetworkIPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GatewayNetworksConfig_NetworkIPConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GatewayNetworksConfig_NetworkIPConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayNetworksConfig.NetworkIPConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayNetworksConfig.NetworkIPConfig)
    MergeFrom(*source);
  }
}

void GatewayNetworksConfig_NetworkIPConfig::MergeFrom(const GatewayNetworksConfig_NetworkIPConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayNetworksConfig.NetworkIPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.netip().size() > 0) {

    netip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.netip_);
  }
  if (from.netmask().size() > 0) {

    netmask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.netmask_);
  }
  if (from.defaultgate().size() > 0) {

    defaultgate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.defaultgate_);
  }
}

void GatewayNetworksConfig_NetworkIPConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayNetworksConfig.NetworkIPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayNetworksConfig_NetworkIPConfig::CopyFrom(const GatewayNetworksConfig_NetworkIPConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayNetworksConfig.NetworkIPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayNetworksConfig_NetworkIPConfig::IsInitialized() const {
  return true;
}

void GatewayNetworksConfig_NetworkIPConfig::InternalSwap(GatewayNetworksConfig_NetworkIPConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  netip_.Swap(&other->netip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  netmask_.Swap(&other->netmask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  defaultgate_.Swap(&other->defaultgate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GatewayNetworksConfig_NetworkIPConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GatewayNetworksConfig_NetworkDNSConfig::InitAsDefaultInstance() {
}
class GatewayNetworksConfig_NetworkDNSConfig::_Internal {
 public:
};

GatewayNetworksConfig_NetworkDNSConfig::GatewayNetworksConfig_NetworkDNSConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GatewayNetworksConfig.NetworkDNSConfig)
}
GatewayNetworksConfig_NetworkDNSConfig::GatewayNetworksConfig_NetworkDNSConfig(const GatewayNetworksConfig_NetworkDNSConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dnsconfig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dnsconfig().empty()) {
    dnsconfig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dnsconfig_);
  }
  // @@protoc_insertion_point(copy_constructor:GatewayNetworksConfig.NetworkDNSConfig)
}

void GatewayNetworksConfig_NetworkDNSConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GatewayNetworksConfig_NetworkDNSConfig_network_2eproto.base);
  dnsconfig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GatewayNetworksConfig_NetworkDNSConfig::~GatewayNetworksConfig_NetworkDNSConfig() {
  // @@protoc_insertion_point(destructor:GatewayNetworksConfig.NetworkDNSConfig)
  SharedDtor();
}

void GatewayNetworksConfig_NetworkDNSConfig::SharedDtor() {
  dnsconfig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GatewayNetworksConfig_NetworkDNSConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GatewayNetworksConfig_NetworkDNSConfig& GatewayNetworksConfig_NetworkDNSConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GatewayNetworksConfig_NetworkDNSConfig_network_2eproto.base);
  return *internal_default_instance();
}


void GatewayNetworksConfig_NetworkDNSConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayNetworksConfig.NetworkDNSConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dnsconfig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GatewayNetworksConfig_NetworkDNSConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string DNSConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dnsconfig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayNetworksConfig.NetworkDNSConfig.DNSConfig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GatewayNetworksConfig_NetworkDNSConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayNetworksConfig.NetworkDNSConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string DNSConfig = 1;
  if (this->dnsconfig().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dnsconfig().data(), static_cast<int>(this->_internal_dnsconfig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GatewayNetworksConfig.NetworkDNSConfig.DNSConfig");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dnsconfig(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayNetworksConfig.NetworkDNSConfig)
  return target;
}

size_t GatewayNetworksConfig_NetworkDNSConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayNetworksConfig.NetworkDNSConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DNSConfig = 1;
  if (this->dnsconfig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dnsconfig());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GatewayNetworksConfig_NetworkDNSConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayNetworksConfig.NetworkDNSConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GatewayNetworksConfig_NetworkDNSConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GatewayNetworksConfig_NetworkDNSConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayNetworksConfig.NetworkDNSConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayNetworksConfig.NetworkDNSConfig)
    MergeFrom(*source);
  }
}

void GatewayNetworksConfig_NetworkDNSConfig::MergeFrom(const GatewayNetworksConfig_NetworkDNSConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayNetworksConfig.NetworkDNSConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dnsconfig().size() > 0) {

    dnsconfig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dnsconfig_);
  }
}

void GatewayNetworksConfig_NetworkDNSConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayNetworksConfig.NetworkDNSConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayNetworksConfig_NetworkDNSConfig::CopyFrom(const GatewayNetworksConfig_NetworkDNSConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayNetworksConfig.NetworkDNSConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayNetworksConfig_NetworkDNSConfig::IsInitialized() const {
  return true;
}

void GatewayNetworksConfig_NetworkDNSConfig::InternalSwap(GatewayNetworksConfig_NetworkDNSConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dnsconfig_.Swap(&other->dnsconfig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GatewayNetworksConfig_NetworkDNSConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GatewayNetworksConfig::InitAsDefaultInstance() {
  ::_GatewayNetworksConfig_default_instance_._instance.get_mutable()->otnetworkconfig_ = const_cast< ::GatewayNetworksConfig_NetworksConfig*>(
      ::GatewayNetworksConfig_NetworksConfig::internal_default_instance());
}
class GatewayNetworksConfig::_Internal {
 public:
  static const ::GatewayNetworksConfig_NetworksConfig& otnetworkconfig(const GatewayNetworksConfig* msg);
};

const ::GatewayNetworksConfig_NetworksConfig&
GatewayNetworksConfig::_Internal::otnetworkconfig(const GatewayNetworksConfig* msg) {
  return *msg->otnetworkconfig_;
}
GatewayNetworksConfig::GatewayNetworksConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GatewayNetworksConfig)
}
GatewayNetworksConfig::GatewayNetworksConfig(const GatewayNetworksConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      networkipconfig_(from.networkipconfig_),
      networkdnsconfig_(from.networkdnsconfig_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_otnetworkconfig()) {
    otnetworkconfig_ = new ::GatewayNetworksConfig_NetworksConfig(*from.otnetworkconfig_);
  } else {
    otnetworkconfig_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GatewayNetworksConfig)
}

void GatewayNetworksConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GatewayNetworksConfig_network_2eproto.base);
  otnetworkconfig_ = nullptr;
}

GatewayNetworksConfig::~GatewayNetworksConfig() {
  // @@protoc_insertion_point(destructor:GatewayNetworksConfig)
  SharedDtor();
}

void GatewayNetworksConfig::SharedDtor() {
  if (this != internal_default_instance()) delete otnetworkconfig_;
}

void GatewayNetworksConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GatewayNetworksConfig& GatewayNetworksConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GatewayNetworksConfig_network_2eproto.base);
  return *internal_default_instance();
}


void GatewayNetworksConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayNetworksConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkipconfig_.Clear();
  networkdnsconfig_.Clear();
  if (GetArenaNoVirtual() == nullptr && otnetworkconfig_ != nullptr) {
    delete otnetworkconfig_;
  }
  otnetworkconfig_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GatewayNetworksConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GatewayNetworksConfig.NetworkIPConfig networkIPConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_networkipconfig(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GatewayNetworksConfig.NetworkDNSConfig networkDNSConfig = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_networkdnsconfig(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .GatewayNetworksConfig.NetworksConfig OTNetworkConfig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_otnetworkconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GatewayNetworksConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayNetworksConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GatewayNetworksConfig.NetworkIPConfig networkIPConfig = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_networkipconfig_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_networkipconfig(i), target, stream);
  }

  // repeated .GatewayNetworksConfig.NetworkDNSConfig networkDNSConfig = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_networkdnsconfig_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_networkdnsconfig(i), target, stream);
  }

  // .GatewayNetworksConfig.NetworksConfig OTNetworkConfig = 3;
  if (this->has_otnetworkconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::otnetworkconfig(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayNetworksConfig)
  return target;
}

size_t GatewayNetworksConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayNetworksConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GatewayNetworksConfig.NetworkIPConfig networkIPConfig = 1;
  total_size += 1UL * this->_internal_networkipconfig_size();
  for (const auto& msg : this->networkipconfig_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GatewayNetworksConfig.NetworkDNSConfig networkDNSConfig = 2;
  total_size += 1UL * this->_internal_networkdnsconfig_size();
  for (const auto& msg : this->networkdnsconfig_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .GatewayNetworksConfig.NetworksConfig OTNetworkConfig = 3;
  if (this->has_otnetworkconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *otnetworkconfig_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GatewayNetworksConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayNetworksConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GatewayNetworksConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GatewayNetworksConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayNetworksConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayNetworksConfig)
    MergeFrom(*source);
  }
}

void GatewayNetworksConfig::MergeFrom(const GatewayNetworksConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayNetworksConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  networkipconfig_.MergeFrom(from.networkipconfig_);
  networkdnsconfig_.MergeFrom(from.networkdnsconfig_);
  if (from.has_otnetworkconfig()) {
    _internal_mutable_otnetworkconfig()->::GatewayNetworksConfig_NetworksConfig::MergeFrom(from._internal_otnetworkconfig());
  }
}

void GatewayNetworksConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayNetworksConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayNetworksConfig::CopyFrom(const GatewayNetworksConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayNetworksConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayNetworksConfig::IsInitialized() const {
  return true;
}

void GatewayNetworksConfig::InternalSwap(GatewayNetworksConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  networkipconfig_.InternalSwap(&other->networkipconfig_);
  networkdnsconfig_.InternalSwap(&other->networkdnsconfig_);
  swap(otnetworkconfig_, other->otnetworkconfig_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GatewayNetworksConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NetworkResponse* Arena::CreateMaybeMessage< ::NetworkResponse >(Arena* arena) {
  return Arena::CreateInternal< ::NetworkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayNetworksConfig_NetworksConfig* Arena::CreateMaybeMessage< ::GatewayNetworksConfig_NetworksConfig >(Arena* arena) {
  return Arena::CreateInternal< ::GatewayNetworksConfig_NetworksConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayNetworksConfig_NetworkIPConfig* Arena::CreateMaybeMessage< ::GatewayNetworksConfig_NetworkIPConfig >(Arena* arena) {
  return Arena::CreateInternal< ::GatewayNetworksConfig_NetworkIPConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayNetworksConfig_NetworkDNSConfig* Arena::CreateMaybeMessage< ::GatewayNetworksConfig_NetworkDNSConfig >(Arena* arena) {
  return Arena::CreateInternal< ::GatewayNetworksConfig_NetworkDNSConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayNetworksConfig* Arena::CreateMaybeMessage< ::GatewayNetworksConfig >(Arena* arena) {
  return Arena::CreateInternal< ::GatewayNetworksConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
