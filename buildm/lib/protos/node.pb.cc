// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfigNodeS_NodeData_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigNodeS_NodeData_TagListConfig_node_2eproto;
class NodeConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeConfigResponse> _instance;
} _NodeConfigResponse_default_instance_;
class ConfigNodeS_NodeData_TagListConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigNodeS_NodeData_TagListConfig> _instance;
} _ConfigNodeS_NodeData_TagListConfig_default_instance_;
class ConfigNodeS_NodeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigNodeS_NodeData> _instance;
} _ConfigNodeS_NodeData_default_instance_;
class ConfigNodeSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigNodeS> _instance;
} _ConfigNodeS_default_instance_;
static void InitDefaultsscc_info_ConfigNodeS_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfigNodeS_default_instance_;
    new (ptr) ::ConfigNodeS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfigNodeS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfigNodeS_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConfigNodeS_node_2eproto}, {
      &scc_info_ConfigNodeS_NodeData_node_2eproto.base,}};

static void InitDefaultsscc_info_ConfigNodeS_NodeData_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfigNodeS_NodeData_default_instance_;
    new (ptr) ::ConfigNodeS_NodeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfigNodeS_NodeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfigNodeS_NodeData_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConfigNodeS_NodeData_node_2eproto}, {
      &scc_info_ConfigNodeS_NodeData_TagListConfig_node_2eproto.base,}};

static void InitDefaultsscc_info_ConfigNodeS_NodeData_TagListConfig_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfigNodeS_NodeData_TagListConfig_default_instance_;
    new (ptr) ::ConfigNodeS_NodeData_TagListConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfigNodeS_NodeData_TagListConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigNodeS_NodeData_TagListConfig_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigNodeS_NodeData_TagListConfig_node_2eproto}, {}};

static void InitDefaultsscc_info_NodeConfigResponse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NodeConfigResponse_default_instance_;
    new (ptr) ::NodeConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NodeConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeConfigResponse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeConfigResponse_node_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_node_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NodeConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NodeConfigResponse, success_),
  PROTOBUF_FIELD_OFFSET(::NodeConfigResponse, errorcode_),
  PROTOBUF_FIELD_OFFSET(::NodeConfigResponse, errordesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData_TagListConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData_TagListConfig, attrib_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData_TagListConfig, tagname_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData_TagListConfig, alternative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, nodename_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, nodeid_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, connectionname_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, timer_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, taglistconfig_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS, nodedata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NodeConfigResponse)},
  { 8, -1, sizeof(::ConfigNodeS_NodeData_TagListConfig)},
  { 16, -1, sizeof(::ConfigNodeS_NodeData)},
  { 27, -1, sizeof(::ConfigNodeS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NodeConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigNodeS_NodeData_TagListConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigNodeS_NodeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigNodeS_default_instance_),
};

const char descriptor_table_protodef_node_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nnode.proto\"K\n\022NodeConfigResponse\022\017\n\007Su"
  "ccess\030\001 \001(\010\022\021\n\terrorCode\030\002 \001(\005\022\021\n\terrorD"
  "esc\030\003 \001(\t\"\236\002\n\013ConfigNodeS\022\'\n\010nodeData\030\001 "
  "\003(\0132\025.ConfigNodeS.NodeData\032\345\001\n\010NodeData\022"
  "\020\n\010nodeName\030\001 \001(\t\022\016\n\006nodeID\030\002 \001(\t\022\026\n\016con"
  "nectionName\030\003 \001(\t\022\r\n\005timer\030\004 \001(\005\022:\n\rtagL"
  "istConfig\030\005 \003(\0132#.ConfigNodeS.NodeData.T"
  "agListConfig\022\r\n\005topic\030\006 \001(\t\032E\n\rTagListCo"
  "nfig\022\016\n\006Attrib\030\001 \001(\005\022\017\n\007TagName\030\002 \001(\t\022\023\n"
  "\013Alternative\030\003 \001(\t2M\n\020SystemNodeConfig\0229"
  "\n\024SendSystemNodeConfig\022\014.ConfigNodeS\032\023.N"
  "odeConfigResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_node_2eproto_sccs[4] = {
  &scc_info_ConfigNodeS_node_2eproto.base,
  &scc_info_ConfigNodeS_NodeData_node_2eproto.base,
  &scc_info_ConfigNodeS_NodeData_TagListConfig_node_2eproto.base,
  &scc_info_NodeConfigResponse_node_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2eproto_once;
static bool descriptor_table_node_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2eproto = {
  &descriptor_table_node_2eproto_initialized, descriptor_table_protodef_node_2eproto, "node.proto", 465,
  &descriptor_table_node_2eproto_once, descriptor_table_node_2eproto_sccs, descriptor_table_node_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_node_2eproto::offsets,
  file_level_metadata_node_2eproto, 4, file_level_enum_descriptors_node_2eproto, file_level_service_descriptors_node_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_node_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_node_2eproto), true);

// ===================================================================

void NodeConfigResponse::InitAsDefaultInstance() {
}
class NodeConfigResponse::_Internal {
 public:
};

NodeConfigResponse::NodeConfigResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeConfigResponse)
}
NodeConfigResponse::NodeConfigResponse(const NodeConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errordesc().empty()) {
    errordesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errordesc_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:NodeConfigResponse)
}

void NodeConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeConfigResponse_node_2eproto.base);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
}

NodeConfigResponse::~NodeConfigResponse() {
  // @@protoc_insertion_point(destructor:NodeConfigResponse)
  SharedDtor();
}

void NodeConfigResponse::SharedDtor() {
  errordesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeConfigResponse& NodeConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeConfigResponse_node_2eproto.base);
  return *internal_default_instance();
}


void NodeConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NodeConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errordesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  _internal_metadata_.Clear();
}

const char* NodeConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errorDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errordesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NodeConfigResponse.errorDesc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 errorCode = 2;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // string errorDesc = 3;
  if (this->errordesc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errordesc().data(), static_cast<int>(this->_internal_errordesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NodeConfigResponse.errorDesc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errordesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeConfigResponse)
  return target;
}

size_t NodeConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NodeConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorDesc = 3;
  if (this->errordesc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errordesc());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 errorCode = 2;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NodeConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NodeConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NodeConfigResponse)
    MergeFrom(*source);
  }
}

void NodeConfigResponse::MergeFrom(const NodeConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NodeConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errordesc().size() > 0) {

    errordesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errordesc_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void NodeConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NodeConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeConfigResponse::CopyFrom(const NodeConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NodeConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeConfigResponse::IsInitialized() const {
  return true;
}

void NodeConfigResponse::InternalSwap(NodeConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errordesc_.Swap(&other->errordesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigNodeS_NodeData_TagListConfig::InitAsDefaultInstance() {
}
class ConfigNodeS_NodeData_TagListConfig::_Internal {
 public:
};

ConfigNodeS_NodeData_TagListConfig::ConfigNodeS_NodeData_TagListConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigNodeS.NodeData.TagListConfig)
}
ConfigNodeS_NodeData_TagListConfig::ConfigNodeS_NodeData_TagListConfig(const ConfigNodeS_NodeData_TagListConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagname().empty()) {
    tagname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tagname_);
  }
  alternative_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alternative().empty()) {
    alternative_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alternative_);
  }
  attrib_ = from.attrib_;
  // @@protoc_insertion_point(copy_constructor:ConfigNodeS.NodeData.TagListConfig)
}

void ConfigNodeS_NodeData_TagListConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigNodeS_NodeData_TagListConfig_node_2eproto.base);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alternative_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attrib_ = 0;
}

ConfigNodeS_NodeData_TagListConfig::~ConfigNodeS_NodeData_TagListConfig() {
  // @@protoc_insertion_point(destructor:ConfigNodeS.NodeData.TagListConfig)
  SharedDtor();
}

void ConfigNodeS_NodeData_TagListConfig::SharedDtor() {
  tagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alternative_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigNodeS_NodeData_TagListConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigNodeS_NodeData_TagListConfig& ConfigNodeS_NodeData_TagListConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigNodeS_NodeData_TagListConfig_node_2eproto.base);
  return *internal_default_instance();
}


void ConfigNodeS_NodeData_TagListConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigNodeS.NodeData.TagListConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alternative_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attrib_ = 0;
  _internal_metadata_.Clear();
}

const char* ConfigNodeS_NodeData_TagListConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Attrib = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          attrib_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string TagName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigNodeS.NodeData.TagListConfig.TagName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Alternative = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_alternative();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigNodeS.NodeData.TagListConfig.Alternative"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigNodeS_NodeData_TagListConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigNodeS.NodeData.TagListConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Attrib = 1;
  if (this->attrib() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_attrib(), target);
  }

  // string TagName = 2;
  if (this->tagname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagname().data(), static_cast<int>(this->_internal_tagname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigNodeS.NodeData.TagListConfig.TagName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tagname(), target);
  }

  // string Alternative = 3;
  if (this->alternative().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alternative().data(), static_cast<int>(this->_internal_alternative().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigNodeS.NodeData.TagListConfig.Alternative");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alternative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigNodeS.NodeData.TagListConfig)
  return target;
}

size_t ConfigNodeS_NodeData_TagListConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigNodeS.NodeData.TagListConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TagName = 2;
  if (this->tagname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagname());
  }

  // string Alternative = 3;
  if (this->alternative().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alternative());
  }

  // int32 Attrib = 1;
  if (this->attrib() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attrib());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigNodeS_NodeData_TagListConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigNodeS.NodeData.TagListConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigNodeS_NodeData_TagListConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigNodeS_NodeData_TagListConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigNodeS.NodeData.TagListConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigNodeS.NodeData.TagListConfig)
    MergeFrom(*source);
  }
}

void ConfigNodeS_NodeData_TagListConfig::MergeFrom(const ConfigNodeS_NodeData_TagListConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigNodeS.NodeData.TagListConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tagname().size() > 0) {

    tagname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tagname_);
  }
  if (from.alternative().size() > 0) {

    alternative_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alternative_);
  }
  if (from.attrib() != 0) {
    _internal_set_attrib(from._internal_attrib());
  }
}

void ConfigNodeS_NodeData_TagListConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigNodeS.NodeData.TagListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigNodeS_NodeData_TagListConfig::CopyFrom(const ConfigNodeS_NodeData_TagListConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigNodeS.NodeData.TagListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNodeS_NodeData_TagListConfig::IsInitialized() const {
  return true;
}

void ConfigNodeS_NodeData_TagListConfig::InternalSwap(ConfigNodeS_NodeData_TagListConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tagname_.Swap(&other->tagname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  alternative_.Swap(&other->alternative_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attrib_, other->attrib_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigNodeS_NodeData_TagListConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigNodeS_NodeData::InitAsDefaultInstance() {
}
class ConfigNodeS_NodeData::_Internal {
 public:
};

ConfigNodeS_NodeData::ConfigNodeS_NodeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigNodeS.NodeData)
}
ConfigNodeS_NodeData::ConfigNodeS_NodeData(const ConfigNodeS_NodeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      taglistconfig_(from.taglistconfig_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodename().empty()) {
    nodename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodename_);
  }
  nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodeid().empty()) {
    nodeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
  }
  connectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_connectionname().empty()) {
    connectionname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.connectionname_);
  }
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  timer_ = from.timer_;
  // @@protoc_insertion_point(copy_constructor:ConfigNodeS.NodeData)
}

void ConfigNodeS_NodeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigNodeS_NodeData_node_2eproto.base);
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timer_ = 0;
}

ConfigNodeS_NodeData::~ConfigNodeS_NodeData() {
  // @@protoc_insertion_point(destructor:ConfigNodeS.NodeData)
  SharedDtor();
}

void ConfigNodeS_NodeData::SharedDtor() {
  nodename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connectionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigNodeS_NodeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigNodeS_NodeData& ConfigNodeS_NodeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigNodeS_NodeData_node_2eproto.base);
  return *internal_default_instance();
}


void ConfigNodeS_NodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigNodeS.NodeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taglistconfig_.Clear();
  nodename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connectionname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timer_ = 0;
  _internal_metadata_.Clear();
}

const char* ConfigNodeS_NodeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nodeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nodename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigNodeS.NodeData.nodeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nodeID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nodeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigNodeS.NodeData.nodeID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string connectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_connectionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigNodeS.NodeData.connectionName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ConfigNodeS.NodeData.TagListConfig tagListConfig = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taglistconfig(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string topic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigNodeS.NodeData.topic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigNodeS_NodeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigNodeS.NodeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nodeName = 1;
  if (this->nodename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodename().data(), static_cast<int>(this->_internal_nodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigNodeS.NodeData.nodeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodename(), target);
  }

  // string nodeID = 2;
  if (this->nodeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodeid().data(), static_cast<int>(this->_internal_nodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigNodeS.NodeData.nodeID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nodeid(), target);
  }

  // string connectionName = 3;
  if (this->connectionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectionname().data(), static_cast<int>(this->_internal_connectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigNodeS.NodeData.connectionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_connectionname(), target);
  }

  // int32 timer = 4;
  if (this->timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_timer(), target);
  }

  // repeated .ConfigNodeS.NodeData.TagListConfig tagListConfig = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taglistconfig_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_taglistconfig(i), target, stream);
  }

  // string topic = 6;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigNodeS.NodeData.topic");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigNodeS.NodeData)
  return target;
}

size_t ConfigNodeS_NodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigNodeS.NodeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConfigNodeS.NodeData.TagListConfig tagListConfig = 5;
  total_size += 1UL * this->_internal_taglistconfig_size();
  for (const auto& msg : this->taglistconfig_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string nodeName = 1;
  if (this->nodename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodename());
  }

  // string nodeID = 2;
  if (this->nodeid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodeid());
  }

  // string connectionName = 3;
  if (this->connectionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectionname());
  }

  // string topic = 6;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // int32 timer = 4;
  if (this->timer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigNodeS_NodeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigNodeS.NodeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigNodeS_NodeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigNodeS_NodeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigNodeS.NodeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigNodeS.NodeData)
    MergeFrom(*source);
  }
}

void ConfigNodeS_NodeData::MergeFrom(const ConfigNodeS_NodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigNodeS.NodeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  taglistconfig_.MergeFrom(from.taglistconfig_);
  if (from.nodename().size() > 0) {

    nodename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodename_);
  }
  if (from.nodeid().size() > 0) {

    nodeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
  }
  if (from.connectionname().size() > 0) {

    connectionname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.connectionname_);
  }
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.timer() != 0) {
    _internal_set_timer(from._internal_timer());
  }
}

void ConfigNodeS_NodeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigNodeS.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigNodeS_NodeData::CopyFrom(const ConfigNodeS_NodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigNodeS.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNodeS_NodeData::IsInitialized() const {
  return true;
}

void ConfigNodeS_NodeData::InternalSwap(ConfigNodeS_NodeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taglistconfig_.InternalSwap(&other->taglistconfig_);
  nodename_.Swap(&other->nodename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nodeid_.Swap(&other->nodeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  connectionname_.Swap(&other->connectionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timer_, other->timer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigNodeS_NodeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigNodeS::InitAsDefaultInstance() {
}
class ConfigNodeS::_Internal {
 public:
};

ConfigNodeS::ConfigNodeS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigNodeS)
}
ConfigNodeS::ConfigNodeS(const ConfigNodeS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nodedata_(from.nodedata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConfigNodeS)
}

void ConfigNodeS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigNodeS_node_2eproto.base);
}

ConfigNodeS::~ConfigNodeS() {
  // @@protoc_insertion_point(destructor:ConfigNodeS)
  SharedDtor();
}

void ConfigNodeS::SharedDtor() {
}

void ConfigNodeS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigNodeS& ConfigNodeS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigNodeS_node_2eproto.base);
  return *internal_default_instance();
}


void ConfigNodeS::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigNodeS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodedata_.Clear();
  _internal_metadata_.Clear();
}

const char* ConfigNodeS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ConfigNodeS.NodeData nodeData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodedata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigNodeS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigNodeS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ConfigNodeS.NodeData nodeData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodedata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodedata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigNodeS)
  return target;
}

size_t ConfigNodeS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigNodeS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConfigNodeS.NodeData nodeData = 1;
  total_size += 1UL * this->_internal_nodedata_size();
  for (const auto& msg : this->nodedata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigNodeS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigNodeS)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigNodeS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigNodeS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigNodeS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigNodeS)
    MergeFrom(*source);
  }
}

void ConfigNodeS::MergeFrom(const ConfigNodeS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigNodeS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodedata_.MergeFrom(from.nodedata_);
}

void ConfigNodeS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigNodeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigNodeS::CopyFrom(const ConfigNodeS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigNodeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNodeS::IsInitialized() const {
  return true;
}

void ConfigNodeS::InternalSwap(ConfigNodeS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodedata_.InternalSwap(&other->nodedata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigNodeS::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NodeConfigResponse* Arena::CreateMaybeMessage< ::NodeConfigResponse >(Arena* arena) {
  return Arena::CreateInternal< ::NodeConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigNodeS_NodeData_TagListConfig* Arena::CreateMaybeMessage< ::ConfigNodeS_NodeData_TagListConfig >(Arena* arena) {
  return Arena::CreateInternal< ::ConfigNodeS_NodeData_TagListConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigNodeS_NodeData* Arena::CreateMaybeMessage< ::ConfigNodeS_NodeData >(Arena* arena) {
  return Arena::CreateInternal< ::ConfigNodeS_NodeData >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigNodeS* Arena::CreateMaybeMessage< ::ConfigNodeS >(Arena* arena) {
  return Arena::CreateInternal< ::ConfigNodeS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
