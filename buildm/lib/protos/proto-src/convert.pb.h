// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: convert.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_convert_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_convert_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_convert_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_convert_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_convert_2eproto;
class ConfigConvertProtocol;
class ConfigConvertProtocolDefaultTypeInternal;
extern ConfigConvertProtocolDefaultTypeInternal _ConfigConvertProtocol_default_instance_;
class ConfigConvertProtocol_ConvertProtocol;
class ConfigConvertProtocol_ConvertProtocolDefaultTypeInternal;
extern ConfigConvertProtocol_ConvertProtocolDefaultTypeInternal _ConfigConvertProtocol_ConvertProtocol_default_instance_;
class ConvertProtocolConfigResponse;
class ConvertProtocolConfigResponseDefaultTypeInternal;
extern ConvertProtocolConfigResponseDefaultTypeInternal _ConvertProtocolConfigResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConfigConvertProtocol* Arena::CreateMaybeMessage<::ConfigConvertProtocol>(Arena*);
template<> ::ConfigConvertProtocol_ConvertProtocol* Arena::CreateMaybeMessage<::ConfigConvertProtocol_ConvertProtocol>(Arena*);
template<> ::ConvertProtocolConfigResponse* Arena::CreateMaybeMessage<::ConvertProtocolConfigResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ConvertProtocolConfigResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConvertProtocolConfigResponse) */ {
 public:
  ConvertProtocolConfigResponse();
  virtual ~ConvertProtocolConfigResponse();

  ConvertProtocolConfigResponse(const ConvertProtocolConfigResponse& from);
  ConvertProtocolConfigResponse(ConvertProtocolConfigResponse&& from) noexcept
    : ConvertProtocolConfigResponse() {
    *this = ::std::move(from);
  }

  inline ConvertProtocolConfigResponse& operator=(const ConvertProtocolConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvertProtocolConfigResponse& operator=(ConvertProtocolConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConvertProtocolConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvertProtocolConfigResponse* internal_default_instance() {
    return reinterpret_cast<const ConvertProtocolConfigResponse*>(
               &_ConvertProtocolConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConvertProtocolConfigResponse& a, ConvertProtocolConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvertProtocolConfigResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConvertProtocolConfigResponse* New() const final {
    return CreateMaybeMessage<ConvertProtocolConfigResponse>(nullptr);
  }

  ConvertProtocolConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConvertProtocolConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConvertProtocolConfigResponse& from);
  void MergeFrom(const ConvertProtocolConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvertProtocolConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConvertProtocolConfigResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_convert_2eproto);
    return ::descriptor_table_convert_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDescFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // string errorDesc = 3;
  void clear_errordesc();
  const std::string& errordesc() const;
  void set_errordesc(const std::string& value);
  void set_errordesc(std::string&& value);
  void set_errordesc(const char* value);
  void set_errordesc(const char* value, size_t size);
  std::string* mutable_errordesc();
  std::string* release_errordesc();
  void set_allocated_errordesc(std::string* errordesc);
  private:
  const std::string& _internal_errordesc() const;
  void _internal_set_errordesc(const std::string& value);
  std::string* _internal_mutable_errordesc();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 errorCode = 2;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ConvertProtocolConfigResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordesc_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_convert_2eproto;
};
// -------------------------------------------------------------------

class ConfigConvertProtocol_ConvertProtocol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigConvertProtocol.ConvertProtocol) */ {
 public:
  ConfigConvertProtocol_ConvertProtocol();
  virtual ~ConfigConvertProtocol_ConvertProtocol();

  ConfigConvertProtocol_ConvertProtocol(const ConfigConvertProtocol_ConvertProtocol& from);
  ConfigConvertProtocol_ConvertProtocol(ConfigConvertProtocol_ConvertProtocol&& from) noexcept
    : ConfigConvertProtocol_ConvertProtocol() {
    *this = ::std::move(from);
  }

  inline ConfigConvertProtocol_ConvertProtocol& operator=(const ConfigConvertProtocol_ConvertProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigConvertProtocol_ConvertProtocol& operator=(ConfigConvertProtocol_ConvertProtocol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigConvertProtocol_ConvertProtocol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigConvertProtocol_ConvertProtocol* internal_default_instance() {
    return reinterpret_cast<const ConfigConvertProtocol_ConvertProtocol*>(
               &_ConfigConvertProtocol_ConvertProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfigConvertProtocol_ConvertProtocol& a, ConfigConvertProtocol_ConvertProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigConvertProtocol_ConvertProtocol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigConvertProtocol_ConvertProtocol* New() const final {
    return CreateMaybeMessage<ConfigConvertProtocol_ConvertProtocol>(nullptr);
  }

  ConfigConvertProtocol_ConvertProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigConvertProtocol_ConvertProtocol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigConvertProtocol_ConvertProtocol& from);
  void MergeFrom(const ConfigConvertProtocol_ConvertProtocol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigConvertProtocol_ConvertProtocol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigConvertProtocol.ConvertProtocol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_convert_2eproto);
    return ::descriptor_table_convert_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagNameSourceFieldNumber = 1,
    kTagNameDistFieldNumber = 2,
    kTimerFieldNumber = 3,
  };
  // string tagNameSource = 1;
  void clear_tagnamesource();
  const std::string& tagnamesource() const;
  void set_tagnamesource(const std::string& value);
  void set_tagnamesource(std::string&& value);
  void set_tagnamesource(const char* value);
  void set_tagnamesource(const char* value, size_t size);
  std::string* mutable_tagnamesource();
  std::string* release_tagnamesource();
  void set_allocated_tagnamesource(std::string* tagnamesource);
  private:
  const std::string& _internal_tagnamesource() const;
  void _internal_set_tagnamesource(const std::string& value);
  std::string* _internal_mutable_tagnamesource();
  public:

  // string tagNameDist = 2;
  void clear_tagnamedist();
  const std::string& tagnamedist() const;
  void set_tagnamedist(const std::string& value);
  void set_tagnamedist(std::string&& value);
  void set_tagnamedist(const char* value);
  void set_tagnamedist(const char* value, size_t size);
  std::string* mutable_tagnamedist();
  std::string* release_tagnamedist();
  void set_allocated_tagnamedist(std::string* tagnamedist);
  private:
  const std::string& _internal_tagnamedist() const;
  void _internal_set_tagnamedist(const std::string& value);
  std::string* _internal_mutable_tagnamedist();
  public:

  // int32 timer = 3;
  void clear_timer();
  ::PROTOBUF_NAMESPACE_ID::int32 timer() const;
  void set_timer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timer() const;
  void _internal_set_timer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ConfigConvertProtocol.ConvertProtocol)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tagnamesource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tagnamedist_;
  ::PROTOBUF_NAMESPACE_ID::int32 timer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_convert_2eproto;
};
// -------------------------------------------------------------------

class ConfigConvertProtocol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigConvertProtocol) */ {
 public:
  ConfigConvertProtocol();
  virtual ~ConfigConvertProtocol();

  ConfigConvertProtocol(const ConfigConvertProtocol& from);
  ConfigConvertProtocol(ConfigConvertProtocol&& from) noexcept
    : ConfigConvertProtocol() {
    *this = ::std::move(from);
  }

  inline ConfigConvertProtocol& operator=(const ConfigConvertProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigConvertProtocol& operator=(ConfigConvertProtocol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigConvertProtocol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigConvertProtocol* internal_default_instance() {
    return reinterpret_cast<const ConfigConvertProtocol*>(
               &_ConfigConvertProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConfigConvertProtocol& a, ConfigConvertProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigConvertProtocol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigConvertProtocol* New() const final {
    return CreateMaybeMessage<ConfigConvertProtocol>(nullptr);
  }

  ConfigConvertProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigConvertProtocol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigConvertProtocol& from);
  void MergeFrom(const ConfigConvertProtocol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigConvertProtocol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigConvertProtocol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_convert_2eproto);
    return ::descriptor_table_convert_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConfigConvertProtocol_ConvertProtocol ConvertProtocol;

  // accessors -------------------------------------------------------

  enum : int {
    kConvertProtocolFieldNumber = 1,
  };
  // repeated .ConfigConvertProtocol.ConvertProtocol convertProtocol = 1;
  int convertprotocol_size() const;
  private:
  int _internal_convertprotocol_size() const;
  public:
  void clear_convertprotocol();
  ::ConfigConvertProtocol_ConvertProtocol* mutable_convertprotocol(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigConvertProtocol_ConvertProtocol >*
      mutable_convertprotocol();
  private:
  const ::ConfigConvertProtocol_ConvertProtocol& _internal_convertprotocol(int index) const;
  ::ConfigConvertProtocol_ConvertProtocol* _internal_add_convertprotocol();
  public:
  const ::ConfigConvertProtocol_ConvertProtocol& convertprotocol(int index) const;
  ::ConfigConvertProtocol_ConvertProtocol* add_convertprotocol();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigConvertProtocol_ConvertProtocol >&
      convertprotocol() const;

  // @@protoc_insertion_point(class_scope:ConfigConvertProtocol)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigConvertProtocol_ConvertProtocol > convertprotocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_convert_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConvertProtocolConfigResponse

// bool Success = 1;
inline void ConvertProtocolConfigResponse::clear_success() {
  success_ = false;
}
inline bool ConvertProtocolConfigResponse::_internal_success() const {
  return success_;
}
inline bool ConvertProtocolConfigResponse::success() const {
  // @@protoc_insertion_point(field_get:ConvertProtocolConfigResponse.Success)
  return _internal_success();
}
inline void ConvertProtocolConfigResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ConvertProtocolConfigResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ConvertProtocolConfigResponse.Success)
}

// int32 errorCode = 2;
inline void ConvertProtocolConfigResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvertProtocolConfigResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvertProtocolConfigResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:ConvertProtocolConfigResponse.errorCode)
  return _internal_errorcode();
}
inline void ConvertProtocolConfigResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void ConvertProtocolConfigResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:ConvertProtocolConfigResponse.errorCode)
}

// string errorDesc = 3;
inline void ConvertProtocolConfigResponse::clear_errordesc() {
  errordesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConvertProtocolConfigResponse::errordesc() const {
  // @@protoc_insertion_point(field_get:ConvertProtocolConfigResponse.errorDesc)
  return _internal_errordesc();
}
inline void ConvertProtocolConfigResponse::set_errordesc(const std::string& value) {
  _internal_set_errordesc(value);
  // @@protoc_insertion_point(field_set:ConvertProtocolConfigResponse.errorDesc)
}
inline std::string* ConvertProtocolConfigResponse::mutable_errordesc() {
  // @@protoc_insertion_point(field_mutable:ConvertProtocolConfigResponse.errorDesc)
  return _internal_mutable_errordesc();
}
inline const std::string& ConvertProtocolConfigResponse::_internal_errordesc() const {
  return errordesc_.GetNoArena();
}
inline void ConvertProtocolConfigResponse::_internal_set_errordesc(const std::string& value) {
  
  errordesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConvertProtocolConfigResponse::set_errordesc(std::string&& value) {
  
  errordesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConvertProtocolConfigResponse.errorDesc)
}
inline void ConvertProtocolConfigResponse::set_errordesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errordesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConvertProtocolConfigResponse.errorDesc)
}
inline void ConvertProtocolConfigResponse::set_errordesc(const char* value, size_t size) {
  
  errordesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConvertProtocolConfigResponse.errorDesc)
}
inline std::string* ConvertProtocolConfigResponse::_internal_mutable_errordesc() {
  
  return errordesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConvertProtocolConfigResponse::release_errordesc() {
  // @@protoc_insertion_point(field_release:ConvertProtocolConfigResponse.errorDesc)
  
  return errordesc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConvertProtocolConfigResponse::set_allocated_errordesc(std::string* errordesc) {
  if (errordesc != nullptr) {
    
  } else {
    
  }
  errordesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordesc);
  // @@protoc_insertion_point(field_set_allocated:ConvertProtocolConfigResponse.errorDesc)
}

// -------------------------------------------------------------------

// ConfigConvertProtocol_ConvertProtocol

// string tagNameSource = 1;
inline void ConfigConvertProtocol_ConvertProtocol::clear_tagnamesource() {
  tagnamesource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigConvertProtocol_ConvertProtocol::tagnamesource() const {
  // @@protoc_insertion_point(field_get:ConfigConvertProtocol.ConvertProtocol.tagNameSource)
  return _internal_tagnamesource();
}
inline void ConfigConvertProtocol_ConvertProtocol::set_tagnamesource(const std::string& value) {
  _internal_set_tagnamesource(value);
  // @@protoc_insertion_point(field_set:ConfigConvertProtocol.ConvertProtocol.tagNameSource)
}
inline std::string* ConfigConvertProtocol_ConvertProtocol::mutable_tagnamesource() {
  // @@protoc_insertion_point(field_mutable:ConfigConvertProtocol.ConvertProtocol.tagNameSource)
  return _internal_mutable_tagnamesource();
}
inline const std::string& ConfigConvertProtocol_ConvertProtocol::_internal_tagnamesource() const {
  return tagnamesource_.GetNoArena();
}
inline void ConfigConvertProtocol_ConvertProtocol::_internal_set_tagnamesource(const std::string& value) {
  
  tagnamesource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigConvertProtocol_ConvertProtocol::set_tagnamesource(std::string&& value) {
  
  tagnamesource_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigConvertProtocol.ConvertProtocol.tagNameSource)
}
inline void ConfigConvertProtocol_ConvertProtocol::set_tagnamesource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tagnamesource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigConvertProtocol.ConvertProtocol.tagNameSource)
}
inline void ConfigConvertProtocol_ConvertProtocol::set_tagnamesource(const char* value, size_t size) {
  
  tagnamesource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigConvertProtocol.ConvertProtocol.tagNameSource)
}
inline std::string* ConfigConvertProtocol_ConvertProtocol::_internal_mutable_tagnamesource() {
  
  return tagnamesource_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigConvertProtocol_ConvertProtocol::release_tagnamesource() {
  // @@protoc_insertion_point(field_release:ConfigConvertProtocol.ConvertProtocol.tagNameSource)
  
  return tagnamesource_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigConvertProtocol_ConvertProtocol::set_allocated_tagnamesource(std::string* tagnamesource) {
  if (tagnamesource != nullptr) {
    
  } else {
    
  }
  tagnamesource_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tagnamesource);
  // @@protoc_insertion_point(field_set_allocated:ConfigConvertProtocol.ConvertProtocol.tagNameSource)
}

// string tagNameDist = 2;
inline void ConfigConvertProtocol_ConvertProtocol::clear_tagnamedist() {
  tagnamedist_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigConvertProtocol_ConvertProtocol::tagnamedist() const {
  // @@protoc_insertion_point(field_get:ConfigConvertProtocol.ConvertProtocol.tagNameDist)
  return _internal_tagnamedist();
}
inline void ConfigConvertProtocol_ConvertProtocol::set_tagnamedist(const std::string& value) {
  _internal_set_tagnamedist(value);
  // @@protoc_insertion_point(field_set:ConfigConvertProtocol.ConvertProtocol.tagNameDist)
}
inline std::string* ConfigConvertProtocol_ConvertProtocol::mutable_tagnamedist() {
  // @@protoc_insertion_point(field_mutable:ConfigConvertProtocol.ConvertProtocol.tagNameDist)
  return _internal_mutable_tagnamedist();
}
inline const std::string& ConfigConvertProtocol_ConvertProtocol::_internal_tagnamedist() const {
  return tagnamedist_.GetNoArena();
}
inline void ConfigConvertProtocol_ConvertProtocol::_internal_set_tagnamedist(const std::string& value) {
  
  tagnamedist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigConvertProtocol_ConvertProtocol::set_tagnamedist(std::string&& value) {
  
  tagnamedist_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigConvertProtocol.ConvertProtocol.tagNameDist)
}
inline void ConfigConvertProtocol_ConvertProtocol::set_tagnamedist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tagnamedist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigConvertProtocol.ConvertProtocol.tagNameDist)
}
inline void ConfigConvertProtocol_ConvertProtocol::set_tagnamedist(const char* value, size_t size) {
  
  tagnamedist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigConvertProtocol.ConvertProtocol.tagNameDist)
}
inline std::string* ConfigConvertProtocol_ConvertProtocol::_internal_mutable_tagnamedist() {
  
  return tagnamedist_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigConvertProtocol_ConvertProtocol::release_tagnamedist() {
  // @@protoc_insertion_point(field_release:ConfigConvertProtocol.ConvertProtocol.tagNameDist)
  
  return tagnamedist_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigConvertProtocol_ConvertProtocol::set_allocated_tagnamedist(std::string* tagnamedist) {
  if (tagnamedist != nullptr) {
    
  } else {
    
  }
  tagnamedist_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tagnamedist);
  // @@protoc_insertion_point(field_set_allocated:ConfigConvertProtocol.ConvertProtocol.tagNameDist)
}

// int32 timer = 3;
inline void ConfigConvertProtocol_ConvertProtocol::clear_timer() {
  timer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigConvertProtocol_ConvertProtocol::_internal_timer() const {
  return timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigConvertProtocol_ConvertProtocol::timer() const {
  // @@protoc_insertion_point(field_get:ConfigConvertProtocol.ConvertProtocol.timer)
  return _internal_timer();
}
inline void ConfigConvertProtocol_ConvertProtocol::_internal_set_timer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timer_ = value;
}
inline void ConfigConvertProtocol_ConvertProtocol::set_timer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timer(value);
  // @@protoc_insertion_point(field_set:ConfigConvertProtocol.ConvertProtocol.timer)
}

// -------------------------------------------------------------------

// ConfigConvertProtocol

// repeated .ConfigConvertProtocol.ConvertProtocol convertProtocol = 1;
inline int ConfigConvertProtocol::_internal_convertprotocol_size() const {
  return convertprotocol_.size();
}
inline int ConfigConvertProtocol::convertprotocol_size() const {
  return _internal_convertprotocol_size();
}
inline void ConfigConvertProtocol::clear_convertprotocol() {
  convertprotocol_.Clear();
}
inline ::ConfigConvertProtocol_ConvertProtocol* ConfigConvertProtocol::mutable_convertprotocol(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigConvertProtocol.convertProtocol)
  return convertprotocol_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigConvertProtocol_ConvertProtocol >*
ConfigConvertProtocol::mutable_convertprotocol() {
  // @@protoc_insertion_point(field_mutable_list:ConfigConvertProtocol.convertProtocol)
  return &convertprotocol_;
}
inline const ::ConfigConvertProtocol_ConvertProtocol& ConfigConvertProtocol::_internal_convertprotocol(int index) const {
  return convertprotocol_.Get(index);
}
inline const ::ConfigConvertProtocol_ConvertProtocol& ConfigConvertProtocol::convertprotocol(int index) const {
  // @@protoc_insertion_point(field_get:ConfigConvertProtocol.convertProtocol)
  return _internal_convertprotocol(index);
}
inline ::ConfigConvertProtocol_ConvertProtocol* ConfigConvertProtocol::_internal_add_convertprotocol() {
  return convertprotocol_.Add();
}
inline ::ConfigConvertProtocol_ConvertProtocol* ConfigConvertProtocol::add_convertprotocol() {
  // @@protoc_insertion_point(field_add:ConfigConvertProtocol.convertProtocol)
  return _internal_add_convertprotocol();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigConvertProtocol_ConvertProtocol >&
ConfigConvertProtocol::convertprotocol() const {
  // @@protoc_insertion_point(field_list:ConfigConvertProtocol.convertProtocol)
  return convertprotocol_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_convert_2eproto
