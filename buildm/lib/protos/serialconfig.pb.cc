// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialconfig.proto

#include "serialconfig.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_serialconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerialConfig_Rs232Config_serialconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serialconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerialConfig_Rs485Config_serialconfig_2eproto;
class SerialResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerialResponse> _instance;
} _SerialResponse_default_instance_;
class SerialConfig_Rs232ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerialConfig_Rs232Config> _instance;
} _SerialConfig_Rs232Config_default_instance_;
class SerialConfig_Rs485ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerialConfig_Rs485Config> _instance;
} _SerialConfig_Rs485Config_default_instance_;
class SerialConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerialConfig> _instance;
} _SerialConfig_default_instance_;
static void InitDefaultsscc_info_SerialConfig_serialconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerialConfig_default_instance_;
    new (ptr) ::SerialConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerialConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SerialConfig_serialconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SerialConfig_serialconfig_2eproto}, {
      &scc_info_SerialConfig_Rs232Config_serialconfig_2eproto.base,
      &scc_info_SerialConfig_Rs485Config_serialconfig_2eproto.base,}};

static void InitDefaultsscc_info_SerialConfig_Rs232Config_serialconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerialConfig_Rs232Config_default_instance_;
    new (ptr) ::SerialConfig_Rs232Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerialConfig_Rs232Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerialConfig_Rs232Config_serialconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SerialConfig_Rs232Config_serialconfig_2eproto}, {}};

static void InitDefaultsscc_info_SerialConfig_Rs485Config_serialconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerialConfig_Rs485Config_default_instance_;
    new (ptr) ::SerialConfig_Rs485Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerialConfig_Rs485Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerialConfig_Rs485Config_serialconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SerialConfig_Rs485Config_serialconfig_2eproto}, {}};

static void InitDefaultsscc_info_SerialResponse_serialconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SerialResponse_default_instance_;
    new (ptr) ::SerialResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SerialResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerialResponse_serialconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SerialResponse_serialconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_serialconfig_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_serialconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_serialconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_serialconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerialResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerialResponse, success_),
  PROTOBUF_FIELD_OFFSET(::SerialResponse, errorcode_),
  PROTOBUF_FIELD_OFFSET(::SerialResponse, errordesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerialConfig_Rs232Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerialConfig_Rs232Config, enabled_),
  PROTOBUF_FIELD_OFFSET(::SerialConfig_Rs232Config, serialbaudrate_),
  PROTOBUF_FIELD_OFFSET(::SerialConfig_Rs232Config, endbit_),
  PROTOBUF_FIELD_OFFSET(::SerialConfig_Rs232Config, serialparity_),
  PROTOBUF_FIELD_OFFSET(::SerialConfig_Rs232Config, databit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerialConfig_Rs485Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerialConfig_Rs485Config, enabled_),
  PROTOBUF_FIELD_OFFSET(::SerialConfig_Rs485Config, serialbaudrate_),
  PROTOBUF_FIELD_OFFSET(::SerialConfig_Rs485Config, endbit_),
  PROTOBUF_FIELD_OFFSET(::SerialConfig_Rs485Config, serialparity_),
  PROTOBUF_FIELD_OFFSET(::SerialConfig_Rs485Config, databit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SerialConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SerialConfig, rs232config_),
  PROTOBUF_FIELD_OFFSET(::SerialConfig, rs485config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SerialResponse)},
  { 8, -1, sizeof(::SerialConfig_Rs232Config)},
  { 18, -1, sizeof(::SerialConfig_Rs485Config)},
  { 28, -1, sizeof(::SerialConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerialResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerialConfig_Rs232Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerialConfig_Rs485Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SerialConfig_default_instance_),
};

const char descriptor_table_protodef_serialconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022serialconfig.proto\"G\n\016SerialResponse\022\017"
  "\n\007Success\030\001 \001(\010\022\021\n\terrorCode\030\002 \001(\005\022\021\n\ter"
  "rorDesc\030\003 \001(\t\"\216\003\n\014SerialConfig\022.\n\013rs232C"
  "onfig\030\001 \001(\0132\031.SerialConfig.Rs232Config\022."
  "\n\013rs485Config\030\002 \001(\0132\031.SerialConfig.Rs485"
  "Config\032\215\001\n\013Rs232Config\022\017\n\007enabled\030\001 \001(\010\022"
  "\'\n\016serialBaudRate\030\002 \001(\0162\017.SerialBaudRate"
  "\022\016\n\006endBit\030\003 \001(\005\022#\n\014serialParity\030\004 \001(\0162\r"
  ".SerialParity\022\017\n\007dataBit\030\005 \001(\005\032\215\001\n\013Rs485"
  "Config\022\017\n\007enabled\030\001 \001(\010\022\'\n\016serialBaudRat"
  "e\030\002 \001(\0162\017.SerialBaudRate\022\016\n\006endBit\030\003 \001(\005"
  "\022#\n\014serialParity\030\004 \001(\0162\r.SerialParity\022\017\n"
  "\007dataBit\030\005 \001(\005*=\n\014SerialParity\022\016\n\nSerial"
  "None\020\000\022\016\n\nSerialEven\020\001\022\r\n\tSerialODD\020\002*\321\001"
  "\n\016SerialBaudRate\022\t\n\005BS300\020\000\022\t\n\005BS600\020\001\022\n"
  "\n\006BS1200\020\002\022\n\n\006BS2400\020\003\022\n\n\006BS4800\020\004\022\n\n\006BS"
  "9600\020\005\022\013\n\007BS14400\020\006\022\013\n\007BS19200\020\007\022\013\n\007BS38"
  "400\020\010\022\013\n\007BS57600\020\t\022\014\n\010BS115200\020\n\022\014\n\010BS23"
  "0400\020\013\022\014\n\010BS460800\020\014\022\014\n\010BS921600\020\r\022\r\n\tBS"
  "1843000\020\0162N\n\022SystemSerialConfig\0228\n\026SendS"
  "ystemSerialConfig\022\r.SerialConfig\032\017.Seria"
  "lResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_serialconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_serialconfig_2eproto_sccs[4] = {
  &scc_info_SerialConfig_serialconfig_2eproto.base,
  &scc_info_SerialConfig_Rs232Config_serialconfig_2eproto.base,
  &scc_info_SerialConfig_Rs485Config_serialconfig_2eproto.base,
  &scc_info_SerialResponse_serialconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_serialconfig_2eproto_once;
static bool descriptor_table_serialconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serialconfig_2eproto = {
  &descriptor_table_serialconfig_2eproto_initialized, descriptor_table_protodef_serialconfig_2eproto, "serialconfig.proto", 857,
  &descriptor_table_serialconfig_2eproto_once, descriptor_table_serialconfig_2eproto_sccs, descriptor_table_serialconfig_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_serialconfig_2eproto::offsets,
  file_level_metadata_serialconfig_2eproto, 4, file_level_enum_descriptors_serialconfig_2eproto, file_level_service_descriptors_serialconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_serialconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_serialconfig_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SerialParity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_serialconfig_2eproto);
  return file_level_enum_descriptors_serialconfig_2eproto[0];
}
bool SerialParity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SerialBaudRate_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_serialconfig_2eproto);
  return file_level_enum_descriptors_serialconfig_2eproto[1];
}
bool SerialBaudRate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SerialResponse::InitAsDefaultInstance() {
}
class SerialResponse::_Internal {
 public:
};

SerialResponse::SerialResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerialResponse)
}
SerialResponse::SerialResponse(const SerialResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errordesc().empty()) {
    errordesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errordesc_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:SerialResponse)
}

void SerialResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerialResponse_serialconfig_2eproto.base);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
}

SerialResponse::~SerialResponse() {
  // @@protoc_insertion_point(destructor:SerialResponse)
  SharedDtor();
}

void SerialResponse::SharedDtor() {
  errordesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SerialResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerialResponse& SerialResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerialResponse_serialconfig_2eproto.base);
  return *internal_default_instance();
}


void SerialResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SerialResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errordesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  _internal_metadata_.Clear();
}

const char* SerialResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errorDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errordesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SerialResponse.errorDesc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerialResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerialResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 errorCode = 2;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // string errorDesc = 3;
  if (this->errordesc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errordesc().data(), static_cast<int>(this->_internal_errordesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SerialResponse.errorDesc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errordesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerialResponse)
  return target;
}

size_t SerialResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerialResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorDesc = 3;
  if (this->errordesc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errordesc());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 errorCode = 2;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerialResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerialResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SerialResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerialResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerialResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerialResponse)
    MergeFrom(*source);
  }
}

void SerialResponse::MergeFrom(const SerialResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerialResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errordesc().size() > 0) {

    errordesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errordesc_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void SerialResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerialResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerialResponse::CopyFrom(const SerialResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerialResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerialResponse::IsInitialized() const {
  return true;
}

void SerialResponse::InternalSwap(SerialResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errordesc_.Swap(&other->errordesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerialResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerialConfig_Rs232Config::InitAsDefaultInstance() {
}
class SerialConfig_Rs232Config::_Internal {
 public:
};

SerialConfig_Rs232Config::SerialConfig_Rs232Config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerialConfig.Rs232Config)
}
SerialConfig_Rs232Config::SerialConfig_Rs232Config(const SerialConfig_Rs232Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&databit_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(databit_));
  // @@protoc_insertion_point(copy_constructor:SerialConfig.Rs232Config)
}

void SerialConfig_Rs232Config::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&databit_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(databit_));
}

SerialConfig_Rs232Config::~SerialConfig_Rs232Config() {
  // @@protoc_insertion_point(destructor:SerialConfig.Rs232Config)
  SharedDtor();
}

void SerialConfig_Rs232Config::SharedDtor() {
}

void SerialConfig_Rs232Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerialConfig_Rs232Config& SerialConfig_Rs232Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerialConfig_Rs232Config_serialconfig_2eproto.base);
  return *internal_default_instance();
}


void SerialConfig_Rs232Config::Clear() {
// @@protoc_insertion_point(message_clear_start:SerialConfig.Rs232Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&databit_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(databit_));
  _internal_metadata_.Clear();
}

const char* SerialConfig_Rs232Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SerialBaudRate serialBaudRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_serialbaudrate(static_cast<::SerialBaudRate>(val));
        } else goto handle_unusual;
        continue;
      // int32 endBit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          endbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SerialParity serialParity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_serialparity(static_cast<::SerialParity>(val));
        } else goto handle_unusual;
        continue;
      // int32 dataBit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          databit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerialConfig_Rs232Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerialConfig.Rs232Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // .SerialBaudRate serialBaudRate = 2;
  if (this->serialbaudrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_serialbaudrate(), target);
  }

  // int32 endBit = 3;
  if (this->endbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_endbit(), target);
  }

  // .SerialParity serialParity = 4;
  if (this->serialparity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_serialparity(), target);
  }

  // int32 dataBit = 5;
  if (this->databit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_databit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerialConfig.Rs232Config)
  return target;
}

size_t SerialConfig_Rs232Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerialConfig.Rs232Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // .SerialBaudRate serialBaudRate = 2;
  if (this->serialbaudrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_serialbaudrate());
  }

  // int32 endBit = 3;
  if (this->endbit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_endbit());
  }

  // .SerialParity serialParity = 4;
  if (this->serialparity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_serialparity());
  }

  // int32 dataBit = 5;
  if (this->databit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_databit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerialConfig_Rs232Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerialConfig.Rs232Config)
  GOOGLE_DCHECK_NE(&from, this);
  const SerialConfig_Rs232Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerialConfig_Rs232Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerialConfig.Rs232Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerialConfig.Rs232Config)
    MergeFrom(*source);
  }
}

void SerialConfig_Rs232Config::MergeFrom(const SerialConfig_Rs232Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerialConfig.Rs232Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.serialbaudrate() != 0) {
    _internal_set_serialbaudrate(from._internal_serialbaudrate());
  }
  if (from.endbit() != 0) {
    _internal_set_endbit(from._internal_endbit());
  }
  if (from.serialparity() != 0) {
    _internal_set_serialparity(from._internal_serialparity());
  }
  if (from.databit() != 0) {
    _internal_set_databit(from._internal_databit());
  }
}

void SerialConfig_Rs232Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerialConfig.Rs232Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerialConfig_Rs232Config::CopyFrom(const SerialConfig_Rs232Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerialConfig.Rs232Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerialConfig_Rs232Config::IsInitialized() const {
  return true;
}

void SerialConfig_Rs232Config::InternalSwap(SerialConfig_Rs232Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
  swap(serialbaudrate_, other->serialbaudrate_);
  swap(endbit_, other->endbit_);
  swap(serialparity_, other->serialparity_);
  swap(databit_, other->databit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerialConfig_Rs232Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerialConfig_Rs485Config::InitAsDefaultInstance() {
}
class SerialConfig_Rs485Config::_Internal {
 public:
};

SerialConfig_Rs485Config::SerialConfig_Rs485Config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerialConfig.Rs485Config)
}
SerialConfig_Rs485Config::SerialConfig_Rs485Config(const SerialConfig_Rs485Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&databit_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(databit_));
  // @@protoc_insertion_point(copy_constructor:SerialConfig.Rs485Config)
}

void SerialConfig_Rs485Config::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&databit_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(databit_));
}

SerialConfig_Rs485Config::~SerialConfig_Rs485Config() {
  // @@protoc_insertion_point(destructor:SerialConfig.Rs485Config)
  SharedDtor();
}

void SerialConfig_Rs485Config::SharedDtor() {
}

void SerialConfig_Rs485Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerialConfig_Rs485Config& SerialConfig_Rs485Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerialConfig_Rs485Config_serialconfig_2eproto.base);
  return *internal_default_instance();
}


void SerialConfig_Rs485Config::Clear() {
// @@protoc_insertion_point(message_clear_start:SerialConfig.Rs485Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&databit_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(databit_));
  _internal_metadata_.Clear();
}

const char* SerialConfig_Rs485Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SerialBaudRate serialBaudRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_serialbaudrate(static_cast<::SerialBaudRate>(val));
        } else goto handle_unusual;
        continue;
      // int32 endBit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          endbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SerialParity serialParity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_serialparity(static_cast<::SerialParity>(val));
        } else goto handle_unusual;
        continue;
      // int32 dataBit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          databit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerialConfig_Rs485Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerialConfig.Rs485Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // .SerialBaudRate serialBaudRate = 2;
  if (this->serialbaudrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_serialbaudrate(), target);
  }

  // int32 endBit = 3;
  if (this->endbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_endbit(), target);
  }

  // .SerialParity serialParity = 4;
  if (this->serialparity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_serialparity(), target);
  }

  // int32 dataBit = 5;
  if (this->databit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_databit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerialConfig.Rs485Config)
  return target;
}

size_t SerialConfig_Rs485Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerialConfig.Rs485Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // .SerialBaudRate serialBaudRate = 2;
  if (this->serialbaudrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_serialbaudrate());
  }

  // int32 endBit = 3;
  if (this->endbit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_endbit());
  }

  // .SerialParity serialParity = 4;
  if (this->serialparity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_serialparity());
  }

  // int32 dataBit = 5;
  if (this->databit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_databit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerialConfig_Rs485Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerialConfig.Rs485Config)
  GOOGLE_DCHECK_NE(&from, this);
  const SerialConfig_Rs485Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerialConfig_Rs485Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerialConfig.Rs485Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerialConfig.Rs485Config)
    MergeFrom(*source);
  }
}

void SerialConfig_Rs485Config::MergeFrom(const SerialConfig_Rs485Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerialConfig.Rs485Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.serialbaudrate() != 0) {
    _internal_set_serialbaudrate(from._internal_serialbaudrate());
  }
  if (from.endbit() != 0) {
    _internal_set_endbit(from._internal_endbit());
  }
  if (from.serialparity() != 0) {
    _internal_set_serialparity(from._internal_serialparity());
  }
  if (from.databit() != 0) {
    _internal_set_databit(from._internal_databit());
  }
}

void SerialConfig_Rs485Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerialConfig.Rs485Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerialConfig_Rs485Config::CopyFrom(const SerialConfig_Rs485Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerialConfig.Rs485Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerialConfig_Rs485Config::IsInitialized() const {
  return true;
}

void SerialConfig_Rs485Config::InternalSwap(SerialConfig_Rs485Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
  swap(serialbaudrate_, other->serialbaudrate_);
  swap(endbit_, other->endbit_);
  swap(serialparity_, other->serialparity_);
  swap(databit_, other->databit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerialConfig_Rs485Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerialConfig::InitAsDefaultInstance() {
  ::_SerialConfig_default_instance_._instance.get_mutable()->rs232config_ = const_cast< ::SerialConfig_Rs232Config*>(
      ::SerialConfig_Rs232Config::internal_default_instance());
  ::_SerialConfig_default_instance_._instance.get_mutable()->rs485config_ = const_cast< ::SerialConfig_Rs485Config*>(
      ::SerialConfig_Rs485Config::internal_default_instance());
}
class SerialConfig::_Internal {
 public:
  static const ::SerialConfig_Rs232Config& rs232config(const SerialConfig* msg);
  static const ::SerialConfig_Rs485Config& rs485config(const SerialConfig* msg);
};

const ::SerialConfig_Rs232Config&
SerialConfig::_Internal::rs232config(const SerialConfig* msg) {
  return *msg->rs232config_;
}
const ::SerialConfig_Rs485Config&
SerialConfig::_Internal::rs485config(const SerialConfig* msg) {
  return *msg->rs485config_;
}
SerialConfig::SerialConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SerialConfig)
}
SerialConfig::SerialConfig(const SerialConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rs232config()) {
    rs232config_ = new ::SerialConfig_Rs232Config(*from.rs232config_);
  } else {
    rs232config_ = nullptr;
  }
  if (from._internal_has_rs485config()) {
    rs485config_ = new ::SerialConfig_Rs485Config(*from.rs485config_);
  } else {
    rs485config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SerialConfig)
}

void SerialConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerialConfig_serialconfig_2eproto.base);
  ::memset(&rs232config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rs485config_) -
      reinterpret_cast<char*>(&rs232config_)) + sizeof(rs485config_));
}

SerialConfig::~SerialConfig() {
  // @@protoc_insertion_point(destructor:SerialConfig)
  SharedDtor();
}

void SerialConfig::SharedDtor() {
  if (this != internal_default_instance()) delete rs232config_;
  if (this != internal_default_instance()) delete rs485config_;
}

void SerialConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerialConfig& SerialConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerialConfig_serialconfig_2eproto.base);
  return *internal_default_instance();
}


void SerialConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SerialConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && rs232config_ != nullptr) {
    delete rs232config_;
  }
  rs232config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rs485config_ != nullptr) {
    delete rs485config_;
  }
  rs485config_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SerialConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SerialConfig.Rs232Config rs232Config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rs232config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SerialConfig.Rs485Config rs485Config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rs485config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerialConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SerialConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SerialConfig.Rs232Config rs232Config = 1;
  if (this->has_rs232config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rs232config(this), target, stream);
  }

  // .SerialConfig.Rs485Config rs485Config = 2;
  if (this->has_rs485config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rs485config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SerialConfig)
  return target;
}

size_t SerialConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SerialConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SerialConfig.Rs232Config rs232Config = 1;
  if (this->has_rs232config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rs232config_);
  }

  // .SerialConfig.Rs485Config rs485Config = 2;
  if (this->has_rs485config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rs485config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerialConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SerialConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SerialConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerialConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SerialConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SerialConfig)
    MergeFrom(*source);
  }
}

void SerialConfig::MergeFrom(const SerialConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SerialConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rs232config()) {
    _internal_mutable_rs232config()->::SerialConfig_Rs232Config::MergeFrom(from._internal_rs232config());
  }
  if (from.has_rs485config()) {
    _internal_mutable_rs485config()->::SerialConfig_Rs485Config::MergeFrom(from._internal_rs485config());
  }
}

void SerialConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SerialConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerialConfig::CopyFrom(const SerialConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SerialConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerialConfig::IsInitialized() const {
  return true;
}

void SerialConfig::InternalSwap(SerialConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rs232config_, other->rs232config_);
  swap(rs485config_, other->rs485config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerialConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SerialResponse* Arena::CreateMaybeMessage< ::SerialResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SerialResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SerialConfig_Rs232Config* Arena::CreateMaybeMessage< ::SerialConfig_Rs232Config >(Arena* arena) {
  return Arena::CreateInternal< ::SerialConfig_Rs232Config >(arena);
}
template<> PROTOBUF_NOINLINE ::SerialConfig_Rs485Config* Arena::CreateMaybeMessage< ::SerialConfig_Rs485Config >(Arena* arena) {
  return Arena::CreateInternal< ::SerialConfig_Rs485Config >(arena);
}
template<> PROTOBUF_NOINLINE ::SerialConfig* Arena::CreateMaybeMessage< ::SerialConfig >(Arena* arena) {
  return Arena::CreateInternal< ::SerialConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
